./composer.lock:4:        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
./composer.lock:8:    "content-hash": "863cf611af50c93acd3036489ae5aaf6",
./composer.lock:11:            "name": "facebook/graph-sdk",
./composer.lock:15:                "url": "https://github.com/facebook/php-graph-sdk.git",
./composer.lock:20:                "url": "https://api.github.com/repos/facebook/php-graph-sdk/zipball/2f9639c15ae043911f40ffe44080b32bac2c5280",
./composer.lock:27:            "require-dev": {
./composer.lock:38:                "branch-alias": {
./composer.lock:39:                    "dev-master": "5.x-dev"
./composer.lock:43:                "psr-4": {
./composer.lock:50:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:57:                    "homepage": "https://github.com/facebook/php-graph-sdk/contributors"
./composer.lock:61:            "homepage": "https://github.com/facebook/php-graph-sdk",
./composer.lock:66:            "time": "2017-08-16 17:28:07"
./composer.lock:85:            "require-dev": {
./composer.lock:90:                "psr-4": {
./composer.lock:94:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:129:            "time": "2017-08-14 05:06:04"
./composer.lock:150:                "psr/log-implementation": "1.0.0"
./composer.lock:152:            "require-dev": {
./composer.lock:153:                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
./composer.lock:155:                "graylog2/gelf-php": "~1.0",
./composer.lock:156:                "jakub-onderka/php-parallel-lint": "0.9",
./composer.lock:157:                "php-amqplib/php-amqplib": "~2.4",
./composer.lock:158:                "php-console/php-console": "^3.1.3",
./composer.lock:160:                "phpunit/phpunit-mock-objects": "2.3.0",
./composer.lock:166:                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
./composer.lock:168:                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
./composer.lock:169:                "ext-mongo": "Allow sending log messages to a MongoDB server",
./composer.lock:170:                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
./composer.lock:172:                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
./composer.lock:173:                "php-console/php-console": "Allow sending log messages to Google Chrome",
./composer.lock:180:                "branch-alias": {
./composer.lock:181:                    "dev-master": "2.0.x-dev"
./composer.lock:185:                "psr-4": {
./composer.lock:189:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:205:                "psr-3"
./composer.lock:207:            "time": "2017-06-19 01:22:40"
./composer.lock:224:                "ext-ctype": "*",
./composer.lock:225:                "ext-filter": "*",
./composer.lock:228:            "require-dev": {
./composer.lock:230:                "friendsofphp/php-cs-fixer": "^2.2",
./composer.lock:233:                "zendframework/zend-eventmanager": "3.0.*",
./composer.lock:234:                "zendframework/zend-i18n": "2.7.3",
./composer.lock:235:                "zendframework/zend-serializer": "2.7.*"
./composer.lock:238:                "ext-mbstring": "Needed to send email in multibyte encoding charset",
./composer.lock:239:                "hayageek/oauth2-yahoo": "Needed for Yahoo XOAUTH2 authentication",
./composer.lock:240:                "league/oauth2-google": "Needed for Google XOAUTH2 authentication",
./composer.lock:241:                "psr/log": "For optional PSR-3 debug logging",
./composer.lock:242:                "stevenmaguire/oauth2-microsoft": "Needed for Microsoft XOAUTH2 authentication",
./composer.lock:243:                "symfony/polyfill-mbstring": "To support UTF-8 if the Mbstring PHP extension is not enabled (^1.2)"
./composer.lock:247:                "psr-4": {
./composer.lock:251:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:253:                "LGPL-2.1"
./composer.lock:272:            "description": "PHPMailer is a full-featured email creation and transfer class for PHP",
./composer.lock:273:            "time": "2018-01-05 13:19:58"
./composer.lock:276:            "name": "plasticbrain/php-flash-messages",
./composer.lock:294:                "psr-4": {
./composer.lock:298:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:308:            "description": "A modern take on PHP session-based flash messages",
./composer.lock:315:            "time": "2016-04-01 08:39:38"
./composer.lock:322:                "url": "https://github.com/php-fig/log.git",
./composer.lock:327:                "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
./composer.lock:336:                "branch-alias": {
./composer.lock:337:                    "dev-master": "1.0.x-dev"
./composer.lock:341:                "psr-4": {
./composer.lock:345:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:351:                    "name": "PHP-FIG",
./composer.lock:352:                    "homepage": "http://www.php-fig.org/"
./composer.lock:356:            "homepage": "https://github.com/php-fig/log",
./composer.lock:360:                "psr-3"
./composer.lock:362:            "time": "2016-10-10 12:19:37"
./composer.lock:384:            "notification-url": "https://packagist.org/downloads/",
./composer.lock:398:            "description": "A fast, extensible & stand-alone PHP input validation class that allows you to validate any data",
./composer.lock:400:            "time": "2017-08-04 16:37:43"
./composer.lock:403:    "packages-dev": [],
./composer.lock:405:    "minimum-stability": "stable",
./composer.lock:406:    "stability-flags": [],
./composer.lock:407:    "prefer-stable": false,
./composer.lock:408:    "prefer-lowest": false,
./composer.lock:410:    "platform-dev": []
./libraries/Request.php:12:        echo 'redicrect-url:  '.$_SERVER['REDIRECT_URL'];
./libraries/Log.php:9:        $logger->pushHandler(new StreamHandler('log/error.log', Logger::DEBUG));
./libraries/Log.php:10:        $logger->pushHandler(new FirePHPHandler());
./libraries/Log.php:11:        $logger->error(Ip::get().': '.$msg);
./libraries/Log.php:16:        $logger->pushHandler(new StreamHandler('log/info.log', Logger::DEBUG));
./libraries/Log.php:17:        $logger->pushHandler(new FirePHPHandler());
./libraries/Log.php:18:        $logger->info(Ip::get().': '.$msg);
./libraries/Log.php:23:        $logger->pushHandler(new StreamHandler('log/warning.log', Logger::DEBUG));
./libraries/Log.php:24:        $logger->pushHandler(new FirePHPHandler());
./libraries/Log.php:25:        $logger->warning(Ip::get().': '.$msg);
./libraries/Mail.php:15:        $this->Username = $Username;
./libraries/Mail.php:16:        $this->Password = $Password;
./libraries/Mail.php:20:        $this->Subject = $subject;
./libraries/Mail.php:24:        $this->Body = $body;
./libraries/Mail.php:28:        $this->AltBody = strip_tags(stripslashes($this->Body))."\n\n";
./libraries/Mail.php:29:        $this->AltBody = str_replace("&nbsp;", "\n\n", $this->AltBody);
./libraries/Password.php:70:                    trigger_error('password_hash(): Non-string salt parameter supplied', E_USER_WARNING);
./libraries/Password.php:76:            } elseif (0 == preg_match('#^[a-zA-Z0-9./]+$#D', $salt)) {
./libraries/Password.php:80:            $salt = str_replace('+', '.', base64_encode($this->generate_entropy($required_salt_len)));
./libraries/Password.php:122:                $buffer .= fread($f, $bytes - $read);
./libraries/Router.php:6:        "^([a-zA-Z0-9-_]+)\/?$",
./libraries/Router.php:7:        "^([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)\/?$",
./libraries/Router.php:8:        "^([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)\/?$",
./libraries/Router.php:9:        "^([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)\/?$"
./libraries/Router.php:13:        foreach ($this->routes as $route) {
./libraries/Router.php:16:            $this->parameters = array_slice($matches, 1);
./libraries/Router.php:20:      if(isset($this->parameters[($index-1)])){
./libraries/Router.php:21:        return $this->parameters[($index-1)];
./libraries/Sms.php:14:        $this->username = $username;
./libraries/Sms.php:15:        $this->password = base64_decode($password);
./libraries/Sms.php:19:        $this->content = $content;
./libraries/Sms.php:23:        $this->phoneNumber = $phoneNumber;
./libraries/Sms.php:27:        $this->responseUrl = $responseUrl;
./libraries/Sms.php:31:        if ( $this->content=='' || !preg_match('/^09([0-9]{8})$/', $this->phoneNumber) || $this->username=='' || $this->password=='' ){
./libraries/Sms.php:36:            'username' =>$this->username,
./libraries/Sms.php:37:            'apikey'   =>$this->password,
./libraries/Sms.php:38:            'dstaddr'  =>$this->phoneNumber,
./libraries/Sms.php:39:            'response' =>$this->responseUrl,
./libraries/Sms.php:40:            'smbody'   =>iconv("UTF-8","big5//TRANSLIT",$this->content));
./libraries/Sms.php:44:        curl_setopt($ch, CURLOPT_URL, "http://api.kotsms.com.tw/kotsmsapi-1.php?".$querystring);
./libraries/Sms.php:49:        $this->phoneNumber = '';
./libraries/Sms.php:50:        $this->content = '';
./libraries/DatabaseAccessObject.php:17:        $this->mysql_address  = $mysql_address;
./libraries/DatabaseAccessObject.php:18:        $this->mysql_username = $mysql_username;
./libraries/DatabaseAccessObject.php:19:        $this->mysql_password = $mysql_password;
./libraries/DatabaseAccessObject.php:20:        $this->mysql_database = $mysql_database;
./libraries/DatabaseAccessObject.php:23:            $db = new PDO("mysql:host=".$this->mysql_address.";charset=utf8mb4;dbname=".$this->mysql_database, $this->mysql_username, $this->mysql_password);
./libraries/DatabaseAccessObject.php:24:            //$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT);//Suggested to uncomment on production websites
./libraries/DatabaseAccessObject.php:25:            $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);//Suggested to comment on production websites
./libraries/DatabaseAccessObject.php:26:            $db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
./libraries/DatabaseAccessObject.php:28:            $this->db = $db;
./libraries/DatabaseAccessObject.php:32:            echo '<p class="bg-danger">'.$e->getMessage().'</p>';
./libraries/DatabaseAccessObject.php:41:        $this->db = null;
./libraries/DatabaseAccessObject.php:49:            $stmt = $this->db->prepare($sql);
./libraries/DatabaseAccessObject.php:50:            $stmt->execute($data_array);
./libraries/DatabaseAccessObject.php:51:            return $stmt->fetchAll(); 
./libraries/DatabaseAccessObject.php:53:		    $this->error_message = '<p class="bg-danger">'.$e->getMessage().'</p>';
./libraries/DatabaseAccessObject.php:67:        $this->last_sql = "SELECT {$fields} FROM {$table} WHERE {$condition} ORDER BY {$order_by} {$limit}";
./libraries/DatabaseAccessObject.php:69:			$stmt = $this->db->prepare($this->last_sql);
./libraries/DatabaseAccessObject.php:70:			$stmt->execute($data_array);
./libraries/DatabaseAccessObject.php:71:            return $stmt->fetchAll();
./libraries/DatabaseAccessObject.php:73:		    $this->error_message = '<p class="bg-danger">'.$e->getMessage().'</p>';
./libraries/DatabaseAccessObject.php:95:        $this->last_sql = "INSERT INTO " . $table . "(" . $columns . ")VALUES(" . $data . ")";
./libraries/DatabaseAccessObject.php:97:        $stmt = $this->db->prepare($this->last_sql);
./libraries/DatabaseAccessObject.php:98:        $stmt->execute($prepare_array);
./libraries/DatabaseAccessObject.php:99:        $this->last_id = $this->db->lastInsertId();
./libraries/DatabaseAccessObject.php:115:            if ($xx != count($data_array) - 1){
./libraries/DatabaseAccessObject.php:120:        $this->last_sql = "UPDATE " . $table . " SET " . $setting_list . " WHERE " . $key_column . " = " . ":".$key_column;
./libraries/DatabaseAccessObject.php:121:        $stmt = $this->db->prepare($this->last_sql);                       
./libraries/DatabaseAccessObject.php:122:        $stmt->execute($data_array);
./libraries/DatabaseAccessObject.php:132:        $this->last_sql = "DELETE FROM $table WHERE " . $key_column . " = " . ':'.$key_column;
./libraries/DatabaseAccessObject.php:133:        $stmt = $this->db->prepare($this->last_sql);
./libraries/DatabaseAccessObject.php:134:        $stmt->execute(array( ':'.$key_column => $id));
./libraries/DatabaseAccessObject.php:142:        return $this->last_sql;
./libraries/DatabaseAccessObject.php:150:        $this->last_sql = $last_sql;
./libraries/DatabaseAccessObject.php:158:        return $this->last_id;
./libraries/DatabaseAccessObject.php:166:        $this->last_id = $last_id;
./libraries/DatabaseAccessObject.php:173:        return $this->last_num_rows;
./libraries/DatabaseAccessObject.php:180:        $this->last_num_rows = $last_num_rows;
./libraries/DatabaseAccessObject.php:189:        return $this->error_message;
./libraries/DatabaseAccessObject.php:198:        $this->error_message = $error_message;
./libraries/UserAction.php:6:        Database::get()->update('members', $data_array, "memberID", $memberID);
./libraries/UserAction.php:16:      $result = Database::get()->query($table, $condition, $order_by, $fields, $limit, $data_array);
./libraries/UserAction.php:31:        $mail->setFrom(Config::MAIL_FROM, Config::MAIL_FROM_NAME);
./libraries/UserAction.php:32:        $mail->addAddress($email);
./libraries/UserAction.php:33:        $mail->subject("Password Reset");
./libraries/UserAction.php:34:        $mail->body($body);
./libraries/UserAction.php:35:        $mail->send();
./libraries/UserAction.php:40:        $msg->success("Please check your inbox for a reset link.");
./validators/PostVeridator.php:8:        $data_array = $gump->sanitize($data_array); 
./validators/PostVeridator.php:12:        $gump->validation_rules($validation_rules_array);
./validators/PostVeridator.php:16:        $gump->filter_rules($filter_rules_array);
./validators/PostVeridator.php:17:        $validated_data = $gump->run($data_array);
./validators/PostVeridator.php:19:            $error = $gump->get_readable_errors(false);
./validators/PostVeridator.php:22:                $msg->error($e);
./validators/PostVeridator.php:33:        $data_array = $gump->sanitize($data_array); 
./validators/PostVeridator.php:37:        $gump->validation_rules($validation_rules_array);
./validators/PostVeridator.php:41:        $gump->filter_rules($filter_rules_array);
./validators/PostVeridator.php:42:        $validated_data = $gump->run($data_array);
./validators/PostVeridator.php:44:            $error = $gump->get_readable_errors(false);
./validators/PostVeridator.php:47:                $msg->error($e);
./validators/OrderVeridator.php:11:        $result = Database::get()->execute('SELECT OrderID FROM order WHERE orderID = :orderID', array(':orderID' => $orderID));
./validators/UserVeridator.php:24:        return $this->error;
./validators/UserVeridator.php:32:            $this->error[] = 'Passwords do not match.';
./validators/UserVeridator.php:42:        $result = Database::get()->execute('SELECT * FROM members WHERE active = "Yes" AND username = :username', array(':username' => $username));
./validators/UserVeridator.php:45:            if($passwordObject->password_verify($password,$result[0]['password'])){
./validators/UserVeridator.php:49:        $this->error[] = 'Wrong username or password or your account has not been activated.';
./validators/UserVeridator.php:57:        $result = Database::get()->execute('SELECT username FROM members WHERE username = :username', array(':username' => $username));
./validators/UserVeridator.php:59:          $this->error[] = 'Username provided is already in use.';
./validators/UserVeridator.php:69:        $result = Database::get()->execute('SELECT username FROM members WHERE memberID = :memberID AND active = :active', array(':memberID' => $id, ':active' => $active));
./validators/UserVeridator.php:73:          $this->error[] = 'Username provided is already in use.';
./validators/UserVeridator.php:82:        $result = Database::get()->execute('SELECT email FROM members WHERE email = :email', array(':email' => $email));
./validators/UserVeridator.php:84:            $this->error[] = 'Email provided is already in use.';
./composer.json:6:            "name": "dio-ub",
./composer.json:14:        "plasticbrain/php-flash-messages": "^1.0"
Binary file ./.git/objects/d4/3ba779e152b5712bcd7a007649dbfb7e24e5e5 matches
Binary file ./.git/objects/5f/a17b93d4e3287379d703717b704cd14648885b matches
Binary file ./.git/objects/f9/6c8e0995cc4e18a008eef84dd4b47f257ec3e7 matches
Binary file ./.git/objects/bc/53a76b0dea1968085b164b864ac9907c403183 matches
Binary file ./.git/objects/72/a3702f7f56a4b8f006a6daeca73c15489b0d9f matches
Binary file ./.git/objects/f6/5a75a98cb55d9abe4a023fda80f3a652b7e4c5 matches
Binary file ./.git/objects/cc/60224f9292b7e3ba6f7a4bfd6f6441c1522353 matches
./.git/logs/HEAD:1:0000000000000000000000000000000000000000 f31dddb5458f55fcd394eadd0e51314dc390ff95 dio-ub <hcgcarry@gmail.com> 1534991174 +0800	commit (initial): commit
./.git/logs/HEAD:2:f31dddb5458f55fcd394eadd0e51314dc390ff95 a07ac6479e51f767637533eb701f316808926e32 dio-ub <hcgcarry@gmail.com> 1534991720 +0800	commit: fsdjafa
./.git/logs/HEAD:3:a07ac6479e51f767637533eb701f316808926e32 4f0cd96e8cb448347c6da529069fdf340c98daef dio-ub <hcgcarry@gmail.com> 1535276048 +0800	commit: fuck
./.git/logs/refs/remotes/origin/master:1:0000000000000000000000000000000000000000 f31dddb5458f55fcd394eadd0e51314dc390ff95 dio-ub <hcgcarry@gmail.com> 1534991662 +0800	update by push
./.git/logs/refs/remotes/origin/master:2:f31dddb5458f55fcd394eadd0e51314dc390ff95 a07ac6479e51f767637533eb701f316808926e32 dio-ub <hcgcarry@gmail.com> 1534991745 +0800	update by push
./.git/logs/refs/remotes/origin/master:3:a07ac6479e51f767637533eb701f316808926e32 4f0cd96e8cb448347c6da529069fdf340c98daef dio-ub <hcgcarry@gmail.com> 1535276309 +0800	update by push
./.git/logs/refs/heads/master:1:0000000000000000000000000000000000000000 f31dddb5458f55fcd394eadd0e51314dc390ff95 dio-ub <hcgcarry@gmail.com> 1534991174 +0800	commit (initial): commit
./.git/logs/refs/heads/master:2:f31dddb5458f55fcd394eadd0e51314dc390ff95 a07ac6479e51f767637533eb701f316808926e32 dio-ub <hcgcarry@gmail.com> 1534991720 +0800	commit: fsdjafa
./.git/logs/refs/heads/master:3:a07ac6479e51f767637533eb701f316808926e32 4f0cd96e8cb448347c6da529069fdf340c98daef dio-ub <hcgcarry@gmail.com> 1535276048 +0800	commit: fuck
./.git/hooks/pre-push.sample:5:# pushed.  If this script exits with a non-zero status nothing will be pushed.
./.git/hooks/pre-push.sample:9:# $1 -- Name of the remote to which the push is being done
./.git/hooks/pre-push.sample:10:# $2 -- URL to which the push is being done
./.git/hooks/pre-push.sample:44:		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
./.git/hooks/pre-push.sample:45:		if [ -n "$commit" ]
./.git/hooks/post-update.sample:6:# To enable this hook, rename this file to "post-update".
./.git/hooks/post-update.sample:8:exec git update-server-info
./.git/hooks/applypatch-msg.sample:4:# applypatch from an e-mail message.
./.git/hooks/applypatch-msg.sample:6:# The hook should exit with non-zero status after issuing an
./.git/hooks/applypatch-msg.sample:10:# To enable this hook, rename this file to "applypatch-msg".
./.git/hooks/applypatch-msg.sample:12:. git-sh-setup
./.git/hooks/applypatch-msg.sample:13:commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
./.git/hooks/applypatch-msg.sample:14:test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
./.git/hooks/pre-rebase.sample:5:# The "pre-rebase" hook is run just before "git rebase" starts doing
./.git/hooks/pre-rebase.sample:7:# non-zero status.
./.git/hooks/pre-rebase.sample:11:# $1 -- the upstream the series was forked from.
./.git/hooks/pre-rebase.sample:12:# $2 -- the branch being rebased (or empty when rebasing the current branch).
./.git/hooks/pre-rebase.sample:24:	topic=`git symbolic-ref HEAD` ||
./.git/hooks/pre-rebase.sample:40:git show-ref -q "$topic" || {
./.git/hooks/pre-rebase.sample:46:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
./.git/hooks/pre-rebase.sample:47:if test -z "$not_in_master"
./.git/hooks/pre-rebase.sample:54:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
./.git/hooks/pre-rebase.sample:55:only_next_2=`git rev-list ^master           ${publish} | sort`
./.git/hooks/pre-rebase.sample:58:	not_in_topic=`git rev-list "^$topic" master`
./.git/hooks/pre-rebase.sample:59:	if test -z "$not_in_topic"
./.git/hooks/pre-rebase.sample:61:		echo >&2 "$topic is already up-to-date with master"
./.git/hooks/pre-rebase.sample:67:	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
./.git/hooks/pre-rebase.sample:68:	/usr/bin/perl -e '
./.git/hooks/pre-rebase.sample:72:			/^([0-9a-f]+) /;
./.git/hooks/pre-rebase.sample:76:				/^([0-9a-f]+) (.*)$/;
./.git/hooks/pre-rebase.sample:79:			if (!exists $not_in_next{$elem->[0]}) {
./.git/hooks/pre-rebase.sample:84:				print STDERR " $elem->[1]\n";
./.git/hooks/pre-rebase.sample:125:    build on top of it -- other people may already want to
./.git/hooks/pre-rebase.sample:133:		   o---o---o---o---o---o---o---o---o---o "next"
./.git/hooks/pre-rebase.sample:135:		 /   a---a---b A     /           /
./.git/hooks/pre-rebase.sample:137:	       /   /   c---c---c---c B         /
./.git/hooks/pre-rebase.sample:139:	     /   /   /   b---b C     \       /
./.git/hooks/pre-rebase.sample:141:    ---o---o---o---o---o---o---o---o---o---o---o "master"
./.git/hooks/pre-rebase.sample:158:	git rev-list ^master ^topic next
./.git/hooks/pre-rebase.sample:159:	git rev-list ^master        next
./.git/hooks/pre-rebase.sample:165:	git rev-list master..topic
./.git/hooks/update.sample:4:# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
./.git/hooks/update.sample:9:# ------
./.git/hooks/update.sample:27:# --- Command line
./.git/hooks/update.sample:32:# --- Safety check
./.git/hooks/update.sample:33:if [ -z "$GIT_DIR" ]; then
./.git/hooks/update.sample:40:if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
./.git/hooks/update.sample:45:# --- Config
./.git/hooks/update.sample:46:allowunannotated=$(git config --bool hooks.allowunannotated)
./.git/hooks/update.sample:47:allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
./.git/hooks/update.sample:48:denycreatebranch=$(git config --bool hooks.denycreatebranch)
./.git/hooks/update.sample:49:allowdeletetag=$(git config --bool hooks.allowdeletetag)
./.git/hooks/update.sample:50:allowmodifytag=$(git config --bool hooks.allowmodifytag)
./.git/hooks/update.sample:53:projectdesc=$(sed -e '1q' "$GIT_DIR/description")
./.git/hooks/update.sample:61:# --- Check types
./.git/hooks/update.sample:67:	newrev_type=$(git cat-file -t $newrev)
./.git/hooks/update.sample:72:		# un-annotated tag
./.git/hooks/update.sample:75:			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
./.git/hooks/update.sample:76:			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
./.git/hooks/update.sample:89:		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
./.git/hooks/update.sample:98:		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
./.git/hooks/update.sample:127:# --- Finished
./.git/hooks/commit-msg.sample:5:# that has the commit message.  The hook should exit with non-zero
./.git/hooks/commit-msg.sample:9:# To enable this hook, rename this file to "commit-msg".
./.git/hooks/commit-msg.sample:11:# Uncomment the below to add a Signed-off-by line to the message.
./.git/hooks/commit-msg.sample:12:# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
./.git/hooks/commit-msg.sample:15:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
./.git/hooks/commit-msg.sample:16:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
./.git/hooks/commit-msg.sample:18:# This example catches duplicate Signed-off-by lines.
./.git/hooks/commit-msg.sample:20:test "" = "$(grep '^Signed-off-by: ' "$1" |
./.git/hooks/commit-msg.sample:21:	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
./.git/hooks/commit-msg.sample:22:	echo >&2 Duplicate Signed-off-by lines.
./.git/hooks/pre-applypatch.sample:4:# by applypatch from an e-mail message.
./.git/hooks/pre-applypatch.sample:6:# The hook should exit with non-zero status after issuing an
./.git/hooks/pre-applypatch.sample:9:# To enable this hook, rename this file to "pre-applypatch".
./.git/hooks/pre-applypatch.sample:11:. git-sh-setup
./.git/hooks/pre-applypatch.sample:12:precommit="$(git rev-parse --git-path hooks/pre-commit)"
./.git/hooks/pre-applypatch.sample:13:test -x "$precommit" && exec "$precommit" ${1+"$@"}
./.git/hooks/prepare-commit-msg.sample:7:# message file.  If the hook fails with a non-zero status,
./.git/hooks/prepare-commit-msg.sample:10:# To enable this hook, rename this file to "prepare-commit-msg".
./.git/hooks/prepare-commit-msg.sample:15:# The second includes the output of "git diff --name-status -r"
./.git/hooks/prepare-commit-msg.sample:17:# commented because it doesn't cope with --amend or with squashed
./.git/hooks/prepare-commit-msg.sample:20:# The third example adds a Signed-off-by line to the message, that can
./.git/hooks/prepare-commit-msg.sample:25:    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
./.git/hooks/prepare-commit-msg.sample:28:#   /usr/bin/perl -i.bak -pe '
./.git/hooks/prepare-commit-msg.sample:29:#      print "\n" . `git diff --cached --name-status -r`
./.git/hooks/prepare-commit-msg.sample:35:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
./.git/hooks/prepare-commit-msg.sample:36:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
./.git/hooks/pre-commit.sample:5:# exit with non-zero status after issuing an appropriate message if
./.git/hooks/pre-commit.sample:8:# To enable this hook, rename this file to "pre-commit".
./.git/hooks/pre-commit.sample:10:if git rev-parse --verify HEAD >/dev/null 2>&1
./.git/hooks/pre-commit.sample:18:# If you want to allow non-ASCII filenames set this variable to true.
./.git/hooks/pre-commit.sample:19:allownonascii=$(git config --bool hooks.allownonascii)
./.git/hooks/pre-commit.sample:24:# Cross platform projects tend to avoid non-ASCII filenames; prevent
./.git/hooks/pre-commit.sample:31:	test $(git diff --cached --name-only --diff-filter=A -z $against |
./.git/hooks/pre-commit.sample:32:	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
./.git/hooks/pre-commit.sample:35:Error: Attempt to add a non-ASCII file name.
./.git/hooks/pre-commit.sample:49:exec git diff-index --check --cached $against --
./.git/info/exclude:1:# git ls-files --others --exclude-from=.git/info/exclude
./style/main.css:3:  background-color:lightblue;
./style/main.css:4:  font-family: Arial;
./style/main.css:8:	box-shadow: 0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19) !important;
./style/main.css:11:  box-sizing: border-box;
./style/main.css:17:ul.navbar-nav li a{padding:auto 30px;}
./style/main.css:19:ul.navbar-nav li a:hover:not(.active) {
./style/main.css:20:background-color: #111;}
./route.php:3:$parameter = strtolower($route->getParameter(1));
./vendor/wixel/gump/lang/pt-br.php:5:    'validate_valid_email'              => 'O campo {field} precisa conter um e-mail válido',
./vendor/wixel/gump/lang/fr.php:9:    'validate_alpha'                => 'Le champ {field} doit seulement contenir des caract&#232;res alpha (a-z)',
./vendor/wixel/gump/lang/fr.php:10:    'validate_alpha_numeric'        => 'Le champ {field} doit seulement contenir des caract&#232;res alpha-num&#233;rique (a-z)',
./vendor/wixel/gump/lang/fr.php:11:    'validate_alpha_dash'           => 'Le champ {field} doit seulement contenir des caract&#232;res alpha (a-z) et tiret',
./vendor/wixel/gump/lang/fr.php:12:    'validate_alpha_space'          => 'Le champ {field} doit seulement contenir des caract&#232;res alpha (a-z) et espace',
./vendor/wixel/gump/examples/noise_words.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/noise_words.php:11:	'words' => "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English"
./vendor/wixel/gump/examples/noise_words.php:18:print_r($validator->filter($_POST, $filters));
./vendor/wixel/gump/examples/guid.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/guid.php:7:  'guid' => "A98C5A1E-A742-4808-96FA-6F409E799937"
./vendor/wixel/gump/examples/contains.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/contains.php:21:$valid = $validator->validate(
./vendor/wixel/gump/examples/contains.php:26:  echo $validator->get_readable_errors(true);
./vendor/wixel/gump/examples/contains.php:39:$invalid = $validator->validate(
./vendor/wixel/gump/examples/contains.php:44:  echo $validator->get_readable_errors(true);
./vendor/wixel/gump/examples/url_exists.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/url_exists.php:4:error_reporting(-1);
./vendor/wixel/gump/examples/url_exists.php:20:$is_valid = $validator->validate($_POST, $rules);
./vendor/wixel/gump/examples/url_exists.php:25:	print_r($validator->get_readable_errors());
./vendor/wixel/gump/examples/custom_validator.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/custom_validator.php:26:$validated = $validator->validate(
./vendor/wixel/gump/examples/custom_validator.php:33:	echo $validator->get_readable_errors(true);
./vendor/wixel/gump/examples/explicit_fields.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/explicit_fields.php:4:error_reporting(-1);
./vendor/wixel/gump/examples/handling_errors.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/handling_errors.php:15:	'credit_card' => '9872389-2424-234224-234', // Obviously an invalid credit card number,
./vendor/wixel/gump/examples/handling_errors.php:19:$_POST = $validator->sanitize($_POST); // You don't have to sanitize, but it's safest to do so.
./vendor/wixel/gump/examples/handling_errors.php:39:$_POST = $validator->filter($_POST, $filters);
./vendor/wixel/gump/examples/handling_errors.php:43:$validated = $validator->validate(
./vendor/wixel/gump/examples/handling_errors.php:63:				echo "- The credit card provided is not valid.\n";
./vendor/wixel/gump/examples/handling_errors.php:66:				echo "- The username provided is not valid.\n";
./vendor/wixel/gump/examples/handling_errors.php:73:	echo $validator->get_readable_errors(true);
./vendor/wixel/gump/examples/escaping_mysql_strings.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/escaping_mysql_strings.php:13:$validator->sanitize($_POST);
./vendor/wixel/gump/examples/escaping_mysql_strings.php:20:print_r($validator->filter($_POST, $filters));
./vendor/wixel/gump/examples/escaping_mysql_strings.php:24:$validator->sanitize($_POST);
./vendor/wixel/gump/examples/escaping_mysql_strings.php:36:$validator->filter($_POST, $filters);
./vendor/wixel/gump/examples/files.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/full_example.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/full_example.php:15:	'credit_card' => '9872389-2424-234224-234', // Obviously an invalid credit card number,
./vendor/wixel/gump/examples/full_example.php:19:$_POST = $validator->sanitize($_POST); // You don't have to sanitize, but it's safest to do so.
./vendor/wixel/gump/examples/full_example.php:39:$_POST = $validator->filter($_POST, $filters);
./vendor/wixel/gump/examples/full_example.php:43:$validated = $validator->validate(
./vendor/wixel/gump/examples/match.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/credit_card.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/credit_card.php:9:	'cc' => '987230234-2498234-24234-23' // This is not a valid credit card number
./vendor/wixel/gump/examples/credit_card.php:16:print_r($validator->validate($_POST, $rules));
./vendor/wixel/gump/examples/street_address.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/street_address.php:4:error_reporting(-1);
./vendor/wixel/gump/examples/sanitize_string.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/sanitize_string.php:16:print_r($validator->filter($_POST, $filters));
./vendor/wixel/gump/examples/utf-8.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/utf-8.php:4:error_reporting(-1);
./vendor/wixel/gump/examples/sanitize_whitelist.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/sanitize_whitelist.php:28:$_POST = $validator->sanitize( $_POST, $whitelist );
./vendor/wixel/gump/examples/sanitize_whitelist.php:30:$validated = $validator->validate($_POST, $rules);
./vendor/wixel/gump/examples/sanitize_whitelist.php:39:	 * using an ORM/active-records library to store data into database
./vendor/wixel/gump/examples/sanitize_whitelist.php:42:	 * E.g.: ... $db->table('products')->insert($_POST) ...
./vendor/wixel/gump/examples/basic_tags.php:1:#!/usr/bin/php -q
./vendor/wixel/gump/examples/basic_tags.php:8:$validator->validation_rules(array(
./vendor/wixel/gump/examples/basic_tags.php:12:$validator->filter_rules(array(
./vendor/wixel/gump/examples/basic_tags.php:22:$_POST = $validator->run($_POST);
./vendor/wixel/gump/composer.json:3:    "description": "A fast, extensible & stand-alone PHP input validation class that allows you to validate any data",
./vendor/wixel/gump/README.md:5:Follow along on the project board: http://d.monsterboards.co/project/LSCPVmHUxQ-gump
./vendor/wixel/gump/README.md:38:        "wixel/gump": "dev-master"
./vendor/wixel/gump/README.md:65:// Sanitizes data and converts strings to UTF-8 (if available),
./vendor/wixel/gump/README.md:96:$_POST = $gump->sanitize($_POST); // You don't have to sanitize, but it's safest to do so.
./vendor/wixel/gump/README.md:98:$gump->validation_rules(array(
./vendor/wixel/gump/README.md:106:$gump->filter_rules(array(
./vendor/wixel/gump/README.md:114:$validated_data = $gump->run($_POST);
./vendor/wixel/gump/README.md:117:	echo $gump->get_readable_errors(true);
./vendor/wixel/gump/README.md:144:Match data-keys against rules-keys
./vendor/wixel/gump/README.md:145:-------------
./vendor/wixel/gump/README.md:146:We can check if there is a rule specified for every data-key, by adding an extra parameter to the run method.
./vendor/wixel/gump/README.md:149:$gump->run($_POST, true);
./vendor/wixel/gump/README.md:158:-------------
./vendor/wixel/gump/README.md:177:--------------------
./vendor/wixel/gump/README.md:183:* alpha `Ensure only alpha characters are present in the key value (a-z, A-Z)`
./vendor/wixel/gump/README.md:184:* alpha_numeric `Ensure only alpha-numeric characters are present in the key value (a-z, A-Z, 0-9)`
./vendor/wixel/gump/README.md:185:* alpha_dash `Ensure only alpha-numeric characters + dashes and underscores are present in the key value (a-z, A-Z, 0-9, _-)`
./vendor/wixel/gump/README.md:186:* alpha_space `Ensure only alpha-numeric characters + spaces are present in the key value (a-z, A-Z, 0-9, \s)`
./vendor/wixel/gump/README.md:198:* contains,n `Verify that a value is contained within the pre-defined value set`
./vendor/wixel/gump/README.md:199:* contains_list,n `Verify that a value is contained within the pre-defined value set. The list of valid values must be provided in semicolon-separated list format (like so: value1;value2;value3;..;valuen). If a validation error occurs, the list of valid values is not revelead (this means, the error will just say the input is invalid, but it won't reveal the valid set to the user.`
./vendor/wixel/gump/README.md:200:* doesnt_contain_list,n `Verify that a value is not contained within the pre-defined value set. Semicolon (;) separated, list not outputted. See the rule above for more info.`
./vendor/wixel/gump/README.md:207:* phone_number `Validate phone numbers that match the following examples: 555-555-5555 , 5555425555, 555 555 5555, 1(519) 555-4444, 1 (519) 555-4422, 1-555-555-5555`
./vendor/wixel/gump/README.md:208:* regex `You can pass a custom regex using the following format: 'regex,/your-regex/'`
./vendor/wixel/gump/README.md:212:-----------------
./vendor/wixel/gump/README.md:219:* sanitize_numbers `Remove any non-numeric characters`
./vendor/wixel/gump/README.md:220:* sanitize_floats `Remove any non-float characters`
./vendor/wixel/gump/README.md:284:$validated = $validator->validate($_POST, $rules);
./vendor/wixel/gump/README.md:337:------------------
./vendor/wixel/gump/README.md:351:* Christian Klisch http://www.christian-klisch.de/
./vendor/wixel/gump/README.md:361:* Location co-ordinates validator
./vendor/wixel/gump/README.md:371:* Add a twitter & facebook profile url validator: http://stackoverflow.com/questions/2845243/check-if-twitter-username-exists
./vendor/wixel/gump/README.md:372:* Add more logical examples - log in form, profile update form, blog post form, etc etc.
./vendor/wixel/gump/tests.php:2:error_reporting(-1);
./vendor/wixel/gump/tests.php:44:    'alpha_dash'            => "ab<script>alert(1);</script>cdefg12345-_+",
./vendor/wixel/gump/tests.php:71:    'alpha_dash'            => 'abcdefg12345-_',
./vendor/wixel/gump/tests.php:94:print_r($validator->sanitize($invalid_data));
./vendor/wixel/gump/tests.php:97:$validator->validate($invalid_data, $rules);
./vendor/wixel/gump/tests.php:100:print_r($validator->get_readable_errors());
./vendor/wixel/gump/tests.php:102:if($validator->validate($valid_data, $rules)) {
./vendor/wixel/gump/.travis.yml:3:  - "7.0"
./vendor/wixel/gump/.travis.yml:4:  - "5.6"
./vendor/wixel/gump/.travis.yml:5:  - "5.5"
./vendor/wixel/gump/.travis.yml:6:  - "5.4"
./vendor/wixel/gump/.travis.yml:7:  - hhvm
./vendor/wixel/gump/gump.class.php:3: * GUMP - A fast, extensible PHP input validation class.
./vendor/wixel/gump/gump.class.php:38:    // ** ------------------------- Instance Helper ---------------------------- ** //
./vendor/wixel/gump/gump.class.php:54:    // ** ------------------------- Validation Data ------------------------------- ** //
./vendor/wixel/gump/gump.class.php:68:    protected $fieldCharsToRemove = array('_', '-');
./vendor/wixel/gump/gump.class.php:73:    // ** ------------------------- Validation Helpers ---------------------------- ** //
./vendor/wixel/gump/gump.class.php:81:                $this->lang = $lang;
./vendor/wixel/gump/gump.class.php:100:        $gump->validation_rules($validators);
./vendor/wixel/gump/gump.class.php:102:        if ($gump->run($data) === false) {
./vendor/wixel/gump/gump.class.php:103:            return $gump->get_readable_errors(false);
./vendor/wixel/gump/gump.class.php:121:        return $gump->filter($data, $filters);
./vendor/wixel/gump/gump.class.php:131:        return $this->get_readable_errors(true);
./vendor/wixel/gump/gump.class.php:233:            return $this->validation_rules;
./vendor/wixel/gump/gump.class.php:236:        $this->validation_rules = $rules;
./vendor/wixel/gump/gump.class.php:249:            return $this->filter_rules;
./vendor/wixel/gump/gump.class.php:252:        $this->filter_rules = $rules;
./vendor/wixel/gump/gump.class.php:267:        $data = $this->filter($data, $this->filter_rules());
./vendor/wixel/gump/gump.class.php:269:        $validated = $this->validate(
./vendor/wixel/gump/gump.class.php:270:            $data, $this->validation_rules()
./vendor/wixel/gump/gump.class.php:274:            $this->check_fields($data);
./vendor/wixel/gump/gump.class.php:291:        $ruleset = $this->validation_rules();
./vendor/wixel/gump/gump.class.php:296:            $this->errors[] = array(
./vendor/wixel/gump/gump.class.php:330:                    $value = $this->sanitize($value);
./vendor/wixel/gump/gump.class.php:344:                        if ($current_encoding != 'UTF-8' && $current_encoding != 'UTF-16') {
./vendor/wixel/gump/gump.class.php:345:                            $value = iconv($current_encoding, 'UTF-8', $value);
./vendor/wixel/gump/gump.class.php:366:        return $this->errors;
./vendor/wixel/gump/gump.class.php:381:        $this->errors = array();
./vendor/wixel/gump/gump.class.php:417:                            if (preg_match('/(?:(?:^|;)_([a-z_]+))/', $param, $matches)) {
./vendor/wixel/gump/gump.class.php:431:                            $result = $this->$method(
./vendor/wixel/gump/gump.class.php:436:                                if (array_search($result['field'], array_column($this->errors, 'field')) === false) {
./vendor/wixel/gump/gump.class.php:437:                                    $this->errors[] = $result;
./vendor/wixel/gump/gump.class.php:445:                                if (array_search($result['field'], array_column($this->errors, 'field')) === false) {
./vendor/wixel/gump/gump.class.php:446:                                    $this->errors[] = array(
./vendor/wixel/gump/gump.class.php:463:        return (count($this->errors) > 0) ? $this->errors : true;
./vendor/wixel/gump/gump.class.php:534:        $lang_file = __DIR__.DIRECTORY_SEPARATOR.'lang'.DIRECTORY_SEPARATOR.$this->lang.'.php';
./vendor/wixel/gump/gump.class.php:553:    public function get_readable_errors($convert_to_string = false, $field_class = 'gump-field', $error_class = 'gump-error-message')
./vendor/wixel/gump/gump.class.php:555:        if (empty($this->errors)) {
./vendor/wixel/gump/gump.class.php:562:        $messages = $this->get_messages();
./vendor/wixel/gump/gump.class.php:564:        foreach ($this->errors as $e) {
./vendor/wixel/gump/gump.class.php:565:            $field = ucwords(str_replace($this->fieldCharsToRemove, chr(32), $e['field']));
./vendor/wixel/gump/gump.class.php:610:        if (empty($this->errors)) {
./vendor/wixel/gump/gump.class.php:617:        $messages = $this->get_messages();
./vendor/wixel/gump/gump.class.php:619:        foreach ($this->errors as $e)
./vendor/wixel/gump/gump.class.php:621:            $field = ucwords(str_replace(array('_', '-'), chr(32), $e['field']));
./vendor/wixel/gump/gump.class.php:679:                    $params = array_slice($filter, 1, count($filter) - 1);
./vendor/wixel/gump/gump.class.php:693:                        $value = $this->$method($value, $params);
./vendor/wixel/gump/gump.class.php:708:    // ** ------------------------- Filters --------------------------------------- ** //
./vendor/wixel/gump/gump.class.php:753:        return preg_replace("/(?![.=$'€%-])\p{P}/u", '', $value);
./vendor/wixel/gump/gump.class.php:870:     * [“, ”, ‘, ’, –, …] => [", ", ', ', -, ...]
./vendor/wixel/gump/gump.class.php:892:        $web_safe_em = '-';
./vendor/wixel/gump/gump.class.php:904:    // ** ------------------------- Validators ------------------------------------ ** //
./vendor/wixel/gump/gump.class.php:908:     * Verify that a value is contained within the pre-defined value set.
./vendor/wixel/gump/gump.class.php:947:     * Verify that a value is contained within the pre-defined value set.
./vendor/wixel/gump/gump.class.php:984:     * Verify that a value is NOT contained within the pre-defined value set.
./vendor/wixel/gump/gump.class.php:1192:        if (!preg_match('/^([a-zÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖßÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ])+$/i', $input[$field]) !== false) {
./vendor/wixel/gump/gump.class.php:1203:     * Determine if the provided value contains only alpha-numeric characters.
./vendor/wixel/gump/gump.class.php:1219:        if (!preg_match('/^([a-z0-9ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖßÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ])+$/i', $input[$field]) !== false) {
./vendor/wixel/gump/gump.class.php:1246:        if (!preg_match('/^([a-z0-9ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖßÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ_-])+$/i', $input[$field]) !== false) {
./vendor/wixel/gump/gump.class.php:1273:        if (!preg_match("/^([a-z0-9ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖßÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ\s])+$/i", $input[$field]) !== false) {
./vendor/wixel/gump/gump.class.php:1300:        if (!preg_match("/^([0-9a-zÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖßÙÚÛÜÝàáâãäåçèéêëìíîïðòóôõöùúûüýÿ\s])+$/i", $input[$field]) !== false) {
./vendor/wixel/gump/gump.class.php:1533:     * What about loop-back address? 127.0.0.1
./vendor/wixel/gump/gump.class.php:1582:     * See: http://stackoverflow.com/questions/174730/what-is-the-best-way-to-validate-a-credit-card-in-php
./vendor/wixel/gump/gump.class.php:1615:                    $digit -= 9;
./vendor/wixel/gump/gump.class.php:1635:     * Determine if the input is a valid human name [Credits to http://github.com/ben-s].
./vendor/wixel/gump/gump.class.php:1651:        if (!preg_match("/^([a-zÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÒÓÔÕÖßÙÚÛÜÝàáâãäåçèéêëìíîïñðòóôõöùúûüýÿ '-])+$/i", $input[$field]) !== false) {
./vendor/wixel/gump/gump.class.php:1678:        $hasLetter = preg_match('/[a-zA-Z]/', $input[$field]);
./vendor/wixel/gump/gump.class.php:1718:        if (!preg_match("/\A[A-Z]{2}\d{2} ?[A-Z\d]{4}( ?\d{4}){1,} ?\d{1,4}\z/", $input[$field])) {
./vendor/wixel/gump/gump.class.php:1748:     * @param string $input date ('Y-m-d') or datetime ('Y-m-d H:i:s')
./vendor/wixel/gump/gump.class.php:1762:            $cdate1 = date('Y-m-d', strtotime($input[$field]));
./vendor/wixel/gump/gump.class.php:1763:            $cdate2 = date('Y-m-d H:i:s', strtotime($input[$field]));
./vendor/wixel/gump/gump.class.php:1777:            if ($date === false || $input[$field] != date($param, $date->getTimestamp()))
./vendor/wixel/gump/gump.class.php:1795:     * @param string $input date ('Y-m-d') or datetime ('Y-m-d H:i:s')
./vendor/wixel/gump/gump.class.php:1806:        $cdate1 = new DateTime(date('Y-m-d', strtotime($input[$field])));
./vendor/wixel/gump/gump.class.php:1807:        $today = new DateTime(date('d-m-Y'));
./vendor/wixel/gump/gump.class.php:1809:        $interval = $cdate1->diff($today);
./vendor/wixel/gump/gump.class.php:1810:        $age = $interval->y;
./vendor/wixel/gump/gump.class.php:2016:        if (preg_match("/\{?[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}\}?$/", $input[$field])) {
./vendor/wixel/gump/gump.class.php:2056:     *  555-555-5555: valid
./vendor/wixel/gump/gump.class.php:2059:     *  1(519) 555-4444: valid
./vendor/wixel/gump/gump.class.php:2060:     *  1 (519) 555-4422: valid
./vendor/wixel/gump/gump.class.php:2061:     *  1-555-555-5555: valid
./vendor/wixel/gump/gump.class.php:2062:     *  1-(555)-555-5555: valid
./vendor/wixel/gump/gump.class.php:2070:        $regex = '/^(\d[\s-]?)?[\(\[\s-]{0,2}?\d{3}[\)\]\s-]{0,2}?\d{3}[\s-]?\d{4}$/i';
./vendor/wixel/gump/gump.class.php:2084:     * Usage: '<index>' => 'regex,/your-regex-expression/'
./vendor/wixel/gump/LICENSE:4:Copyright (c) 2013-2017 Wixel
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:23:    // $msg->display([$msg::SUCCESS, $msg::INFO, $msg::ERROR, $msg::WARNING])
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:41:                                data-dismiss="alert" 
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:42:                                aria-label="Close">
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:43:                                <span aria-hidden="true">&times;</span>
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:50:        self::INFO    => 'alert-info',
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:51:        self::SUCCESS => 'alert-success',
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:52:        self::WARNING => 'alert-warning',
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:53:        self::ERROR   => 'alert-danger',
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:73:        $this->msgId = sha1(uniqid());
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:91:        return $this->add($message, self::INFO, $redirectUrl, $sticky);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:105:        return $this->add($message, self::SUCCESS, $redirectUrl, $sticky);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:119:        return $this->add($message, self::WARNING, $redirectUrl, $sticky);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:133:        return $this->add($message, self::ERROR, $redirectUrl, $sticky);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:147:        return $this->add($message, $type, $redirectUrl, true);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:166:        if (!array_key_exists($type, $this->msgTypes)) $type = $this->defaultType;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:173:        if (!is_null($redirectUrl)) $this->redirectUrl = $redirectUrl;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:174:        $this->doRedirect();
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:198:            $types = array_keys($this->msgTypes);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:218:                $output .= $this->formatMessage($msgData, $type);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:220:            $this->clear($type);            
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:254:            foreach (array_keys($this->msgTypes) as $type) {
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:272:        $msgType = isset($this->msgTypes[$type]) ? $type : $this->defaultType;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:273:        $cssClass = $this->msgCssClass . ' ' . $this->cssClassMap[$type];
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:274:        $msgBefore = $this->msgBefore;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:278:            $cssClass .= ' ' . $this->stickyCssClass;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:282:            $msgBefore = $this->closeBtn . $msgBefore;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:286:        $formattedMessage = $msgBefore . $msgDataArray['message'] . $this->msgAfter; 
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:289:            $this->msgWrapper, 
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:303:        if ($this->redirectUrl) {
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:304:            header('Location: ' . $this->redirectUrl);
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:347:        $this->msgWrapper = $msgWrapper;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:360:        $this->msgBefore = $msgBefore;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:373:        $this->msgAfter = $msgAfter;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:386:        $this->closeBtn = $closeBtn;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:399:        $this->stickyCssClass = $stickyCssClass;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:413:        $this->msgCssClass = $msgCssClass;
./vendor/plasticbrain/php-flash-messages/src/FlashMessages.php:437:            $this->cssClassMap[$type] = $cssClass;
./vendor/plasticbrain/php-flash-messages/composer.json:2:    "name": "plasticbrain/php-flash-messages",
./vendor/plasticbrain/php-flash-messages/composer.json:3:    "description": "A modern take on PHP session-based flash messages",
./vendor/plasticbrain/php-flash-messages/composer.json:15:    "require-dev": {},
./vendor/plasticbrain/php-flash-messages/composer.json:17:        "psr-4": {
./vendor/plasticbrain/php-flash-messages/README.md:1:# PHP Session-Based Flash Messages
./vendor/plasticbrain/php-flash-messages/README.md:3:Store messages in session data until they are retrieved.  Featuring PSR-4 compliance, Bootstrap compatibility, sticky messages, and more. 
./vendor/plasticbrain/php-flash-messages/README.md:5:More info at http://mikeeverhart.net/php-flash-messages.
./vendor/plasticbrain/php-flash-messages/README.md:9:This is a new version of https://github.com/plasticbrain/php-flash-messages-legacy. This updated version has been completely rewritten, and therefore **is not compatible with the original version**!
./vendor/plasticbrain/php-flash-messages/README.md:16:* PSR-4 autoload compliant
./vendor/plasticbrain/php-flash-messages/README.md:34:composer require plasticbrain/php-flash-messages
./vendor/plasticbrain/php-flash-messages/README.md:57:$msg->info('This is an info message');
./vendor/plasticbrain/php-flash-messages/README.md:58:$msg->success('This is a success message');
./vendor/plasticbrain/php-flash-messages/README.md:59:$msg->warning('This is a warning message');
./vendor/plasticbrain/php-flash-messages/README.md:60:$msg->error('This is an error message');
./vendor/plasticbrain/php-flash-messages/README.md:64:if ($msg->hasErrors()) {
./vendor/plasticbrain/php-flash-messages/README.md:71:$msg->display();
./vendor/plasticbrain/php-flash-messages/README.md:78:$msg->info('This is a info message');
./vendor/plasticbrain/php-flash-messages/README.md:80:![Info Message](http://mikeeverhart.net/php-flash-messages/assets/img/info.png)
./vendor/plasticbrain/php-flash-messages/README.md:84:$msg->success('This is a success message');
./vendor/plasticbrain/php-flash-messages/README.md:86:![Success Message](http://mikeeverhart.net/php-flash-messages/assets/img/success.png)
./vendor/plasticbrain/php-flash-messages/README.md:91:$msg->warning('This is a warning message');
./vendor/plasticbrain/php-flash-messages/README.md:93:![Warning Message](http://mikeeverhart.net/php-flash-messages/assets/img/warning.png)
./vendor/plasticbrain/php-flash-messages/README.md:97:$msg->error('This is a error message');
./vendor/plasticbrain/php-flash-messages/README.md:99:![Error Message](http://mikeeverhart.net/php-flash-messages/assets/img/error.png)
./vendor/plasticbrain/php-flash-messages/README.md:117:$msg->error('This is an error message', 'http://yoursite.com/another-page');
./vendor/plasticbrain/php-flash-messages/README.md:123:$msg->success('This is a success message');
./vendor/plasticbrain/php-flash-messages/README.md:124:$msg->success('This is another success message');
./vendor/plasticbrain/php-flash-messages/README.md:125:$msg->error('This is an error message', 'http://redirect-url.com');   
./vendor/plasticbrain/php-flash-messages/README.md:132:$msg->error("This is a sticky error message (it can't be closed)", null, true);
./vendor/plasticbrain/php-flash-messages/README.md:133:$msg->warning("This is a sticky warning message (it can't be closed)", null, true);
./vendor/plasticbrain/php-flash-messages/README.md:134:$msg->success("This is a sticky success message (it can't be closed)", null, true);
./vendor/plasticbrain/php-flash-messages/README.md:135:$msg->info("This is a sticky info message (it can't be closed)", null, true);
./vendor/plasticbrain/php-flash-messages/README.md:138:![Sticky Info Message](http://mikeeverhart.net/php-flash-messages/assets/img/sticky-info.png)
./vendor/plasticbrain/php-flash-messages/README.md:139:![Sticky Success Message](http://mikeeverhart.net/php-flash-messages/assets/img/sticky-success.png)
./vendor/plasticbrain/php-flash-messages/README.md:140:![Sticky Warning Message](http://mikeeverhart.net/php-flash-messages/assets/img/sticky-warning.png)
./vendor/plasticbrain/php-flash-messages/README.md:141:![Sticky Error Message](http://mikeeverhart.net/php-flash-messages/assets/img/sticky-error.png)
./vendor/plasticbrain/php-flash-messages/README.md:146:$msg->sticky('This is also a sticky message');
./vendor/plasticbrain/php-flash-messages/README.md:152:$msg->sticky('This is "success" sticky message', 'http://redirect-url.com', $msg::SUCCESS);
./vendor/plasticbrain/php-flash-messages/README.md:163:if ($msg->hasErrors()) {
./vendor/plasticbrain/php-flash-messages/README.md:174:if ($msg->hasMessages($msg::INFO)) {
./vendor/plasticbrain/php-flash-messages/README.md:179:if ($msg->hasMessages($msg::SUCCESS)) {
./vendor/plasticbrain/php-flash-messages/README.md:184:if ($msg->hasMessages($msg::WARNING)) {
./vendor/plasticbrain/php-flash-messages/README.md:189:if ($msg->hasMessages($msg::ERROR)) {
./vendor/plasticbrain/php-flash-messages/README.md:194:if ($msg->hasMessages()) {
./vendor/plasticbrain/php-flash-messages/README.md:201:Sets the HTML for the close button that's displayed on (non-sticky) messages.
./vendor/plasticbrain/php-flash-messages/README.md:204:$msg->setCloseBtn('<button type="button" class="close" 
./vendor/plasticbrain/php-flash-messages/README.md:205:                        data-dismiss="alert" 
./vendor/plasticbrain/php-flash-messages/README.md:206:                        aria-label="Close">
./vendor/plasticbrain/php-flash-messages/README.md:207:                        <span aria-hidden="true">&amp;times;</span>
./vendor/plasticbrain/php-flash-messages/README.md:216:$msg->setCssClassMap([
./vendor/plasticbrain/php-flash-messages/README.md:217:    $msg::INFO    => 'alert-info',
./vendor/plasticbrain/php-flash-messages/README.md:218:    $msg::SUCCESS => 'alert-success',
./vendor/plasticbrain/php-flash-messages/README.md:219:    $msg::WARNING => 'alert-warning',
./vendor/plasticbrain/php-flash-messages/README.md:220:    $msg::ERROR   => 'alert-danger',
./vendor/plasticbrain/php-flash-messages/README.md:232:$msg->setMsgAfter('</p>')
./vendor/plasticbrain/php-flash-messages/README.md:243:$msg->setMsgBefore('<p>')
./vendor/plasticbrain/php-flash-messages/README.md:251:$msg->setMsgCssClass('alert')
./vendor/plasticbrain/php-flash-messages/README.md:259:$msg->setMsgWrapper("<div class='%s'>%s</div>")
./vendor/plasticbrain/php-flash-messages/README.md:267:$msg->setStickyCssClass('sticky')
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyInterface.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:58:            $this->httpResponseCode = (int)$httpStatusCode;
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:62:            $this->headers = $headers;
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:64:            $this->setHeadersFromString($headers);
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:67:        $this->body = $body;
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:77:        return $this->headers;
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:87:        return $this->body;
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:97:        return $this->httpResponseCode;
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:108:        $this->httpResponseCode = (int)$match[1];
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:130:                $this->setHttpResponseCodeFromHeader($line);
./vendor/facebook/graph-sdk/src/Facebook/Http/GraphRawResponse.php:133:                $this->headers[$key] = $value;
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyUrlEncoded.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyUrlEncoded.php:45:        $this->params = $params;
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyUrlEncoded.php:53:        return http_build_query($this->params, null, '&');
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:61:        $this->params = $params;
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:62:        $this->files = $files;
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:63:        $this->boundary = $boundary ?: uniqid();
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:74:        $params = $this->getNestedParams($this->params);
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:76:            $body .= $this->getParamString($k, $v);
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:80:        foreach ($this->files as $k => $v) {
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:81:            $body .= $this->getFileString($k, $v);
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:85:        $body .= "--{$this->boundary}--\r\n";
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:97:        return $this->boundary;
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:111:            "--%s\r\nContent-Disposition: form-data; name=\"%s\"; filename=\"%s\"%s\r\n\r\n%s\r\n",
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:112:            $this->boundary,
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:114:            $file->getFileName(),
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:115:            $this->getFileHeaders($file),
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:116:            $file->getContents()
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:131:            "--%s\r\nContent-Disposition: form-data; name=\"%s\"\r\n\r\n%s\r\n",
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:132:            $this->boundary,
./vendor/facebook/graph-sdk/src/Facebook/Http/RequestBodyMultipart.php:168:        return "\r\nContent-Type: {$file->getMimetype()}";
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:61:        $this->add($requests);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:79:                $this->add($req, $key);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:95:        $this->addFallbackDefaults($request);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:98:        $attachedFiles = $this->extractFileAttachments($request);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:111:        $this->requests[] = $requestToAdd;
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:125:        if (!$request->getApp()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:126:            $app = $this->getApp();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:130:            $request->setApp($app);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:133:        if (!$request->getAccessToken()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:134:            $accessToken = $this->getAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:138:            $request->setAccessToken($accessToken);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:153:        if (!$request->containsFileUploads()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:157:        $files = $request->getFiles();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:161:            $this->addFile($fileName, $file);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:165:        $request->resetFiles();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:178:        return $this->requests;
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:186:        $this->validateBatchRequestCount();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:189:            'batch' => $this->convertRequestsToJson(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:192:        $this->setParams($params);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:203:        foreach ($this->requests as $request) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:212:            $requests[] = $this->requestEntityToBatchArray($request['request'], $options, $request['attached_files']);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:225:        $batchCount = count($this->requests);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:229:            // Per: https://developers.facebook.com/docs/graph-api/making-multiple-requests#limits
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:235:     * Converts a Request entity into an array that is batch-friendly.
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:254:        $headers = $request->getHeaders();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:261:            'method' => $request->getMethod(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:262:            'relative_url' => $request->getUrl(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:266:        // the child requests will always be URL-encoded.
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:267:        $body = $request->getUrlEncodedBody()->getBody();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:288:        return new ArrayIterator($this->requests);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:296:        $this->add($value, $offset);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:304:        return isset($this->requests[$offset]);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:312:        unset($this->requests[$offset]);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchRequest.php:320:        return isset($this->requests[$offset]) ? $this->requests[$offset] : null;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:49:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:59:        return $this->getField('can_upload');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:69:        return $this->getField('count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:79:        return $this->getField('cover_photo');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:89:        return $this->getField('created_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:99:        return $this->getField('updated_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:109:        return $this->getField('description');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:119:        return $this->getField('from');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:129:        return $this->getField('place');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:139:        return $this->getField('link');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:149:        return $this->getField('location');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:159:        return $this->getField('name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:169:        return $this->getField('privacy');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAlbum.php:181:        return $this->getField('type');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPicture.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPicture.php:40:        return $this->getField('is_silhouette');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPicture.php:50:        return $this->getField('url');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPicture.php:60:        return $this->getField('width');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPicture.php:70:        return $this->getField('height');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:40:        return $this->getField('app_id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:50:        return $this->getField('application');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:60:        return $this->getField('expires_at');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:70:        return $this->getField('is_valid');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:80:        return $this->getField('issued_at');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:90:        return $this->getField('scopes');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphSessionInfo.php:100:        return $this->getField('user_id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:51:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:61:        return $this->getField('category');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:71:        return $this->getField('name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:81:        return $this->getField('best_page');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:91:        return $this->getField('global_brand_parent_page');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:101:        return $this->getField('location');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:111:        return $this->getField('cover');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:121:        return $this->getField('picture');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:133:        return $this->getField('access_token');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphPage.php:145:        return $this->getField('perms');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:68:        $this->request = $request;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:69:        $this->metaData = $metaData;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:70:        $this->parentEdgeEndpoint = $parentEdgeEndpoint;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:71:        $this->subclassName = $subclassName;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:83:        return $this->parentEdgeEndpoint;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:93:        return $this->subclassName;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:103:        return $this->metaData;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:113:        return $this->getCursor('after');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:123:        return $this->getCursor('before');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:135:        if (isset($this->metaData['paging']['cursors'][$direction])) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:136:            return $this->metaData['paging']['cursors'][$direction];
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:153:        $this->validateForPagination();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:156:        if (!isset($this->metaData['paging'][$direction])) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:160:        $pageUrl = $this->metaData['paging'][$direction];
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:172:        if ($this->request->getMethod() !== 'GET') {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:188:        $pageUrl = $this->getPaginationUrl($direction);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:193:        $newRequest = clone $this->request;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:194:        $newRequest->setEndpoint($pageUrl);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:208:        return $this->getPaginationRequest('next');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:220:        return $this->getPaginationRequest('previous');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:232:        if (isset($this->metaData['summary']['total_count'])) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:233:            return $this->metaData['summary']['total_count'];
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:245:            $this->request,
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:246:            array_map($callback, $this->items, array_keys($this->items)),
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:247:            $this->metaData,
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:248:            $this->parentEdgeEndpoint,
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEdge.php:249:            $this->subclassName
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Birthday.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Birthday.php:52:     * @link https://developers.facebook.com/docs/graph-api/reference/user
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Birthday.php:60:        $this->hasYear = count($parts) === 3 || count($parts) === 1;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Birthday.php:61:        $this->hasDate = count($parts) === 3 || count($parts) === 2;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Birthday.php:73:        return $this->hasDate;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Birthday.php:83:        return $this->hasYear;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphObjectFactory.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphObjectFactory.php:59:        return $this->makeGraphNode($subclassName);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphObjectFactory.php:71:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphEvent');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphObjectFactory.php:78:     * @param boolean     $auto_prefix  Toggle to auto-prefix the subclass name.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphObjectFactory.php:86:        return $this->makeGraphEdge($subclassName, $auto_prefix);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphApplication.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphApplication.php:41:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:50:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:60:        return $this->getField('cover');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:64:     * Returns the `description` (Long-form description) as string if present.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:70:        return $this->getField('description');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:80:        return $this->getField('end_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:90:        return $this->getField('is_date_only');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:100:        return $this->getField('name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:110:        return $this->getField('owner');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:120:        return $this->getField('parent_group');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:130:        return $this->getField('place');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:140:        return $this->getField('privacy');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:150:        return $this->getField('start_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:160:        return $this->getField('ticket_uri');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:170:        return $this->getField('timezone');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:180:        return $this->getField('updated_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:190:        return $this->getField('picture');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:200:        return $this->getField('attending_count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:210:        return $this->getField('declined_count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:220:        return $this->getField('maybe_count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:230:        return $this->getField('noreply_count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphEvent.php:240:        return $this->getField('invited_count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:55:        $this->items = $items;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:68:        if (isset($this->items[$name])) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:69:            return $this->items[$name];
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:88:        return $this->getField($name, $default);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:98:        return array_keys($this->items);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:111:        return $this->getFieldNames();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:121:        return $this->items;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:132:            return $value instanceof Collection ? $value->asArray() : $value;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:133:        }, $this->items);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:145:        return new static(array_map($callback, $this->items, array_keys($this->items)));
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:157:        return json_encode($this->asArray(), $options);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:167:        return count($this->items);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:177:        return new ArrayIterator($this->items);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:189:        return array_key_exists($key, $this->items);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:201:        return $this->items[$key];
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:215:            $this->items[] = $value;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:217:            $this->items[$key] = $value;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:230:        unset($this->items[$key]);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/Collection.php:240:        return $this->asJson();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphCoverPhoto.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphCoverPhoto.php:40:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphCoverPhoto.php:50:        return $this->getField('source');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphCoverPhoto.php:60:        return $this->getField('offset_x');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphCoverPhoto.php:70:        return $this->getField('offset_y');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:40:        return $this->getField('street');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:50:        return $this->getField('city');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:60:        return $this->getField('state');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:70:        return $this->getField('country');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:80:        return $this->getField('zip');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:90:        return $this->getField('latitude');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphLocation.php:100:        return $this->getField('longitude');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:48:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:58:        return $this->getField('cover');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:68:        return $this->getField('description');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:78:        return $this->getField('email');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:88:        return $this->getField('icon');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:98:        return $this->getField('link');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:108:        return $this->getField('name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:118:        return $this->getField('member_request_count');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:128:        return $this->getField('owner');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:138:        return $this->getField('parent');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:148:        return $this->getField('privacy');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:158:        return $this->getField('updated_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphGroup.php:168:        return $this->getField('venue');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphObject.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:35: * GraphEdge - is ALWAYS a numeric array
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:36: * GraphEdge - is ALWAYS an array of GraphNode types
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:37: * GraphNode - is ALWAYS an associative array
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:38: * GraphNode - MAY contain GraphNode's "recurrable"
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:39: * GraphNode - MAY contain GraphEdge's "recurrable"
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:40: * GraphNode - MAY contain DateTime's "primitives"
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:41: * GraphNode - MAY contain string's "primitives"
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:77:        $this->response = $response;
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:78:        $this->decodedBody = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:92:        $this->validateResponseAsArray();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:93:        $this->validateResponseCastableAsGraphNode();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:95:        return $this->castAsGraphNodeOrGraphEdge($this->decodedBody, $subclassName);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:107:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphAchievement');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:119:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphAlbum');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:131:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphPage');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:143:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphSessionInfo');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:155:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphUser');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:167:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphEvent');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:179:        return $this->makeGraphNode(static::BASE_GRAPH_OBJECT_PREFIX . 'GraphGroup');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:186:     * @param boolean     $auto_prefix  Toggle to auto-prefix the subclass name.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:194:        $this->validateResponseAsArray();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:195:        $this->validateResponseCastableAsGraphEdge();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:201:        return $this->castAsGraphNodeOrGraphEdge($this->decodedBody, $subclassName);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:211:        if (!is_array($this->decodedBody)) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:223:        if (isset($this->decodedBody['data']) && static::isCastableAsGraphEdge($this->decodedBody['data'])) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:238:        if (!(isset($this->decodedBody['data']) && static::isCastableAsGraphEdge($this->decodedBody['data']))) {
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:269:                // Detect any smart-casting from the $graphObjectMap array.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:271:                // their own array of smart-casting types.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:278:                $items[$k] = $this->castAsGraphNodeOrGraphEdge($v, $objectSubClass, $k, $parentNodeId);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:304:                return $this->safelyMakeGraphEdge($data, $subclassName, $parentKey, $parentNodeId);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:311:        return $this->safelyMakeGraphNode($data, $subclassName);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:334:            $dataList[] = $this->safelyMakeGraphNode($graphNode, $subclassName);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:337:        $metaData = $this->getMetaData($data);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:343:        return new $className($this->response->getRequest(), $dataList, $metaData, $parentGraphEdgeEndpoint, $subclassName);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNodeFactory.php:374:        return array_keys($data) === range(0, count($data) - 1);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:48:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:58:        return $this->getField('from');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:68:        return $this->getField('publish_time');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:78:        return $this->getField('application');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:88:        return $this->getField('data');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:94:     * @see https://developers.facebook.com/docs/graph-api/reference/achievement
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphAchievement.php:110:        return $this->getField('no_feed_story');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphList.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:50:        return $this->getField('id');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:60:        return $this->getField('name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:70:        return $this->getField('first_name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:80:        return $this->getField('middle_name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:90:        return $this->getField('last_name');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:100:        return $this->getField('email');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:110:        return $this->getField('gender');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:120:        return $this->getField('link');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:130:        return $this->getField('birthday');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:140:        return $this->getField('location');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:150:        return $this->getField('hometown');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:160:        return $this->getField('significant_other');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphUser.php:170:        return $this->getField('picture');
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:45:        parent::__construct($this->castItems($data));
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:52:     * @TODO Add auto-casting to AccessToken entities.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:63:            if ($this->shouldCastAsDateTime($k)
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:65:                    || $this->isIso8601DateString($v))
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:67:                $items[$k] = $this->castToDateTime($v);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:69:                $items[$k] = $this->castToBirthday($v);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:79:     * Uncasts any auto-casted datatypes.
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:86:        $items = $this->asArray();
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:90:                return $v->format(\DateTime::ISO8601);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:106:        return json_encode($this->uncastItems(), $options);
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:116:     * @see https://developers.facebook.com/docs/graph-api/using-graph-api/#readmodifiers
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:117:     * @see http://www.cl.cam.ac.uk/~mgk25/iso-time.html
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:123:        // http://www.pelagodesign.com/blog/2009/05/20/iso-8601-date-validation-that-doesnt-suck/
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:125:        // http://thecodinglove.com/post/95378251969/when-code-works-and-i-dont-know-why
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:126:        $crazyInsaneRegexThatSomehowDetectsIso8601 = '/^([\+-]?\d{4}(?!\d{2}\b))'
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:127:            . '((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?'
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:128:            . '|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d'
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:129:            . '|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])'
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:130:            . '((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d'
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:131:            . '([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/';
./vendor/facebook/graph-sdk/src/Facebook/GraphNodes/GraphNode.php:168:            $dt->setTimestamp($value);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/UrandomPseudoRandomStringGenerator.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/UrandomPseudoRandomStringGenerator.php:36:    const ERROR_MESSAGE = 'Unable to generate a cryptographically secure pseudo-random string from /dev/urandom. ';
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/UrandomPseudoRandomStringGenerator.php:63:        $this->validateLength($length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/UrandomPseudoRandomStringGenerator.php:87:        return $this->binToHex($binaryString, $length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorTrait.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/RandomBytesPseudoRandomStringGenerator.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/RandomBytesPseudoRandomStringGenerator.php:35:    const ERROR_MESSAGE = 'Unable to generate a cryptographically secure pseudo-random string from random_bytes(). ';
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/RandomBytesPseudoRandomStringGenerator.php:55:        $this->validateLength($length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/RandomBytesPseudoRandomStringGenerator.php:57:        return $this->binToHex(random_bytes($length), $length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/McryptPseudoRandomStringGenerator.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/McryptPseudoRandomStringGenerator.php:35:    const ERROR_MESSAGE = 'Unable to generate a cryptographically secure pseudo-random string from mcrypt_create_iv(). ';
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/McryptPseudoRandomStringGenerator.php:55:        $this->validateLength($length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/McryptPseudoRandomStringGenerator.php:66:        return $this->binToHex($binaryString, $length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorFactory.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorFactory.php:72:     * Detects which pseudo-random string generator to use.
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorFactory.php:74:     * @throws FacebookSDKException If unable to detect a cryptographically secure pseudo-random string generator.
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorFactory.php:85:        // Since openssl_random_pseudo_bytes() can sometimes return non-cryptographically
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorFactory.php:86:        // secure pseudo-random strings (in rare cases), we check for mcrypt_create_iv() next.
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorFactory.php:99:        throw new FacebookSDKException('Unable to detect a cryptographically secure pseudo-random string generator.');
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorInterface.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorInterface.php:34:     * Get a cryptographically secure pseudo-random string of arbitrary length.
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/PseudoRandomStringGeneratorInterface.php:36:     * @see http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/OpenSslPseudoRandomStringGenerator.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/OpenSslPseudoRandomStringGenerator.php:35:    const ERROR_MESSAGE = 'Unable to generate a cryptographically secure pseudo-random string from openssl_random_pseudo_bytes().';
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/OpenSslPseudoRandomStringGenerator.php:52:        $this->validateLength($length);
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/OpenSslPseudoRandomStringGenerator.php:62:            throw new FacebookSDKException(static::ERROR_MESSAGE . 'openssl_random_pseudo_bytes() returned a pseudo-random string but it was not cryptographically secure and cannot be used.');
./vendor/facebook/graph-sdk/src/Facebook/PseudoRandomString/OpenSslPseudoRandomStringGenerator.php:65:        return $this->binToHex($binaryString, $length);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:81:        $this->app = $app;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:82:        $this->client = $client;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:83:        $this->graphVersion = $graphVersion ?: Facebook::DEFAULT_GRAPH_VERSION;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:94:        return $this->lastRequest;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:106:        $accessToken = $accessToken instanceof AccessToken ? $accessToken->getValue() : $accessToken;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:109:        $this->lastRequest = new FacebookRequest(
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:110:            $this->app,
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:111:            $this->app->getAccessToken(),
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:116:            $this->graphVersion
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:118:        $response = $this->client->sendRequest($this->lastRequest);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:119:        $metadata = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:128:     * @param string $state       The CSPRNG-generated CSRF value.
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:138:            'client_id' => $this->app->getId(),
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:141:            'sdk' => 'php-sdk-' . Facebook::VERSION,
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:146:        return static::BASE_AUTHORIZATION_URL . '/' . $this->graphVersion . '/dialog/oauth?' . http_build_query($params, null, $separator);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:166:        return $this->requestAnAccessToken($params);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:170:     * Exchanges a short-lived access token with a long-lived access token.
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:180:        $accessToken = $accessToken instanceof AccessToken ? $accessToken->getValue() : $accessToken;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:186:        return $this->requestAnAccessToken($params);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:205:        $response = $this->sendRequestWithClientParams('/oauth/client_code', $params, $accessToken);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:206:        $data = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:226:        $response = $this->sendRequestWithClientParams('/oauth/access_token', $params);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:227:        $data = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:243:            // See: https://developers.facebook.com/docs/facebook-login/access-tokens#long-via-code
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:263:        $params += $this->getClientParams();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:265:        $accessToken = $accessToken ?: $this->app->getAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:267:        $this->lastRequest = new FacebookRequest(
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:268:            $this->app,
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:274:            $this->graphVersion
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:277:        return $this->client->sendRequest($this->lastRequest);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:288:            'client_id' => $this->app->getId(),
./vendor/facebook/graph-sdk/src/Facebook/Authentication/OAuth2Client.php:289:            'client_secret' => $this->app->getSecret(),
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:55:        $this->value = $accessToken;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:57:            $this->setExpiresAtFromTimeStamp($expiresAt);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:70:        return hash_hmac('sha256', $this->value, $appSecret);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:80:        return $this->expiresAt;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:90:        return strpos($this->value, '|') !== false;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:94:     * Determines whether or not this is a long-lived token.
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:100:        if ($this->expiresAt) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:101:            return $this->expiresAt->getTimestamp() > time() + (60 * 60 * 2);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:104:        if ($this->isAppAccessToken()) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:118:        if ($this->getExpiresAt() instanceof \DateTime) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:119:            return $this->getExpiresAt()->getTimestamp() < time();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:122:        if ($this->isAppAccessToken()) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:136:        return $this->value;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:146:        return $this->getValue();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:157:        $dt->setTimestamp($timeStamp);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessToken.php:158:        $this->expiresAt = $dt;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:34: * @see     https://developers.facebook.com/docs/graph-api/reference/debug_token
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:63:        $this->metadata = $metadata['data'];
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:65:        $this->castTimestampsToDateTime();
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:78:        if (isset($this->metadata[$field])) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:79:            return $this->metadata[$field];
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:98:        return $this->getField($field, $default);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:112:        if (!isset($this->metadata[$parentField])) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:116:        if (!isset($this->metadata[$parentField][$field])) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:120:        return $this->metadata[$parentField][$field];
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:133:        return $this->getChildProperty('error', $field, $default);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:146:        return $this->getChildProperty('metadata', $field, $default);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:156:        return $this->getField('app_id');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:166:        return $this->getField('application');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:177:        return $this->getField('error') !== null;
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:187:        return $this->getErrorProperty('code');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:197:        return $this->getErrorProperty('message');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:207:        return $this->getErrorProperty('subcode');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:217:        return $this->getField('expires_at');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:227:        return $this->getField('is_valid');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:234:     * for short-lived access tokens.
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:236:     * @see https://developers.facebook.com/docs/facebook-login/access-tokens#debug
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:242:        return $this->getField('issued_at');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:253:        return $this->getField('metadata');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:263:        return $this->getMetadataProperty('sso');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:273:        return $this->getMetadataProperty('auth_type');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:283:        return $this->getMetadataProperty('auth_nonce');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:294:        return $this->getField('profile_id');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:305:        return $this->getField('scopes');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:315:        return $this->getField('user_id');
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:328:        if ($this->getAppId() !== $appId) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:343:        if ($this->getUserId() !== $userId) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:355:        if (!$this->getExpiresAt() instanceof \DateTime) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:359:        if ($this->getExpiresAt()->getTimestamp() < time()) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:374:        $dt->setTimestamp($timestamp);
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:385:            if (isset($this->metadata[$key]) && $this->metadata[$key] !== 0) {
./vendor/facebook/graph-sdk/src/Facebook/Authentication/AccessTokenMetadata.php:386:                $this->metadata[$key] = $this->convertTimestampToDateTime($this->metadata[$key]);
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookSDKException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookAuthenticationException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookAuthorizationException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookOtherException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResumableUploadException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookServerException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:53:        $this->response = $response;
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:54:        $this->responseData = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:56:        $errorMessage = $this->get('message', 'Unknown error from Graph.');
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:57:        $errorCode = $this->get('code', -1);
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:71:        $data = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:148:        if (isset($this->responseData['error'][$key])) {
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:149:            return $this->responseData['error'][$key];
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:162:        return $this->response->getHttpStatusCode();
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:166:     * Returns the sub-error code
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:172:        return $this->get('error_subcode', -1);
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:182:        return $this->get('type', '');
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:192:        return $this->response->getBody();
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:202:        return $this->responseData;
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookResponseException.php:212:        return $this->response;
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookThrottleException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Exceptions/FacebookClientException.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:94:     * @var PseudoRandomStringGeneratorInterface|null The cryptographically secure pseudo-random string generator.
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:119:     * Instantiates a new Facebook super-class object.
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:145:        $this->app = new FacebookApp($config['app_id'], $config['app_secret']);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:146:        $this->client = new FacebookClient(
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:150:        $this->pseudoRandomStringGenerator = PseudoRandomStringGeneratorFactory::createPseudoRandomStringGenerator(
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:153:        $this->setUrlDetectionHandler($config['url_detection_handler'] ?: new FacebookUrlDetectionHandler());
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:154:        $this->persistentDataHandler = PersistentDataFactory::createPersistentDataHandler(
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:159:            $this->setDefaultAccessToken($config['default_access_token']);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:163:        $this->defaultGraphVersion = $config['default_graph_version'];
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:173:        return $this->app;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:183:        return $this->client;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:193:        if (!$this->oAuth2Client instanceof OAuth2Client) {
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:194:            $app = $this->getApp();
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:195:            $client = $this->getClient();
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:196:            $this->oAuth2Client = new OAuth2Client($app, $client, $this->defaultGraphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:199:        return $this->oAuth2Client;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:209:        return $this->lastResponse;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:219:        return $this->urlDetectionHandler;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:229:        $this->urlDetectionHandler = $urlDetectionHandler;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:239:        return $this->defaultAccessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:252:            $this->defaultAccessToken = new AccessToken($accessToken);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:258:            $this->defaultAccessToken = $accessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:273:        return $this->defaultGraphVersion;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:284:            $this->getOAuth2Client(),
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:285:            $this->persistentDataHandler,
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:286:            $this->urlDetectionHandler,
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:287:            $this->pseudoRandomStringGenerator
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:298:        return new FacebookJavaScriptHelper($this->app, $this->client, $this->defaultGraphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:308:        return new FacebookCanvasHelper($this->app, $this->client, $this->defaultGraphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:318:        return new FacebookPageTabHelper($this->app, $this->client, $this->defaultGraphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:335:        return $this->sendRequest(
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:360:        return $this->sendRequest(
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:385:        return $this->sendRequest(
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:406:        return $this->getPaginationResults($graphEdge, 'next');
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:420:        return $this->getPaginationResults($graphEdge, 'previous');
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:435:        $paginationRequest = $graphEdge->getPaginationRequest($direction);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:440:        $this->lastResponse = $this->client->sendRequest($paginationRequest);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:443:        $subClassName = $graphEdge->getSubClassName();
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:444:        $graphEdge = $this->lastResponse->getGraphEdge($subClassName, false);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:465:        $accessToken = $accessToken ?: $this->defaultAccessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:466:        $graphVersion = $graphVersion ?: $this->defaultGraphVersion;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:467:        $request = $this->request($method, $endpoint, $params, $accessToken, $eTag, $graphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:469:        return $this->lastResponse = $this->client->sendRequest($request);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:485:        $accessToken = $accessToken ?: $this->defaultAccessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:486:        $graphVersion = $graphVersion ?: $this->defaultGraphVersion;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:488:            $this->app,
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:494:        return $this->lastResponse = $this->client->sendBatchRequest($batchRequest);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:500:     * @param  AccessToken|string|null $accessToken  The top-level access token. Requests with no access token
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:507:        $accessToken = $accessToken ?: $this->defaultAccessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:508:        $graphVersion = $graphVersion ?: $this->defaultGraphVersion;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:511:            $this->app,
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:534:        $accessToken = $accessToken ?: $this->defaultAccessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:535:        $graphVersion = $graphVersion ?: $this->defaultGraphVersion;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:538:            $this->app,
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:592:        $accessToken = $accessToken ?: $this->defaultAccessToken;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:593:        $graphVersion = $graphVersion ?: $this->defaultGraphVersion;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:595:        $uploader = new FacebookResumableUploader($this->app, $this->client, $accessToken, $graphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:597:        $file = $this->videoToUpload($pathToFile);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:598:        $chunk = $uploader->start($endpoint, $file);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:601:            $chunk = $this->maxTriesTransfer($uploader, $endpoint, $chunk, $maxTransferTries);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:602:        } while (!$chunk->isLastChunk());
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:605:          'video_id' => $chunk->getVideoId(),
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:606:          'success' => $uploader->finish($endpoint, $chunk->getUploadSessionId(), $metadata),
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:624:        $newChunk = $uploader->transfer($endpoint, $chunk, $retryCountdown < 1);
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:630:        $retryCountdown--;
./vendor/facebook/graph-sdk/src/Facebook/Facebook.php:633:        return $this->maxTriesTransfer($uploader, $endpoint, $chunk, $retryCountdown);
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookSessionPersistentDataHandler.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookSessionPersistentDataHandler.php:62:        if (isset($_SESSION[$this->sessionPrefix . $key])) {
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookSessionPersistentDataHandler.php:63:            return $_SESSION[$this->sessionPrefix . $key];
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookSessionPersistentDataHandler.php:74:        $_SESSION[$this->sessionPrefix . $key] = $value;
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookMemoryPersistentDataHandler.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookMemoryPersistentDataHandler.php:43:        return isset($this->sessionData[$key]) ? $this->sessionData[$key] : null;
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/FacebookMemoryPersistentDataHandler.php:51:        $this->sessionData[$key] = $value;
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/PersistentDataInterface.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/PersistentData/PersistentDataFactory.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:55:        $this->batchRequest = $batchRequest;
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:57:        $request = $response->getRequest();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:58:        $body = $response->getBody();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:59:        $httpStatusCode = $response->getHttpStatusCode();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:60:        $headers = $response->getHeaders();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:63:        $responses = $response->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:64:        $this->setResponses($responses);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:74:        return $this->responses;
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:85:        $this->responses = [];
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:88:            $this->addResponse($key, $graphResponse);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:100:        $originalRequestName = isset($this->batchRequest[$key]['name']) ? $this->batchRequest[$key]['name'] : $key;
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:101:        $originalRequest = isset($this->batchRequest[$key]['request']) ? $this->batchRequest[$key]['request'] : null;
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:106:        $httpResponseHeaders = isset($response['headers']) ? $this->normalizeBatchHeaders($response['headers']) : [];
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:108:        $this->responses[$originalRequestName] = new FacebookResponse(
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:121:        return new ArrayIterator($this->responses);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:129:        $this->addResponse($offset, $value);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:137:        return isset($this->responses[$offset]);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:145:        unset($this->responses[$offset]);
./vendor/facebook/graph-sdk/src/Facebook/FacebookBatchResponse.php:153:        return isset($this->responses[$offset]) ? $this->responses[$offset] : null;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookVideo.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:69:        $this->app = $app;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:70:        $this->client = $client;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:71:        $this->accessToken = $accessToken;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:72:        $this->graphVersion = $graphVersion;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:76:     * Upload by chunks - start phase
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:89:            'file_size' => $file->getSize(),
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:91:        $response = $this->sendUploadRequest($endpoint, $params);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:97:     * Upload by chunks - transfer phase
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:111:            'upload_session_id' => $chunk->getUploadSessionId(),
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:112:            'start_offset' => $chunk->getStartOffset(),
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:113:            'video_file_chunk' => $chunk->getPartialFile(),
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:117:            $response = $this->sendUploadRequest($endpoint, $params);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:119:            $preException = $e->getPrevious();
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:128:        return new FacebookTransferChunk($chunk->getFile(), $chunk->getUploadSessionId(), $chunk->getVideoId(), $response['start_offset'], $response['end_offset']);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:132:     * Upload by chunks - finish phase
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:148:        $response = $this->sendUploadRequest($endpoint, $params);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:163:        $request = new FacebookRequest($this->app, $this->accessToken, 'POST', $endpoint, $params, null, $this->graphVersion);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookResumableUploader.php:165:        return $this->client->sendRequest($request)->getDecodedBody();
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:67:        $this->file = $file;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:68:        $this->uploadSessionId = $uploadSessionId;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:69:        $this->videoId = $videoId;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:70:        $this->startOffset = $startOffset;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:71:        $this->endOffset = $endOffset;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:81:        return $this->file;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:91:        $maxLength = $this->endOffset - $this->startOffset;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:93:        return new FacebookFile($this->file->getFilePath(), $maxLength, $this->startOffset);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:103:        return $this->uploadSessionId;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:113:        return $this->startOffset === $this->endOffset;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:121:        return $this->startOffset;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookTransferChunk.php:131:        return $this->videoId;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:41:     * @var int The maximum bytes to read. Defaults to -1 (read all the remaining buffer).
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:64:    public function __construct($filePath, $maxLength = -1, $offset = -1)
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:66:        $this->path = $filePath;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:67:        $this->maxLength = $maxLength;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:68:        $this->offset = $offset;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:69:        $this->open();
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:77:        $this->close();
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:87:        if (!$this->isRemoteFile($this->path) && !is_readable($this->path)) {
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:88:            throw new FacebookSDKException('Failed to create FacebookFile entity. Unable to read resource: ' . $this->path . '.');
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:91:        $this->stream = fopen($this->path, 'r');
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:93:        if (!$this->stream) {
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:94:            throw new FacebookSDKException('Failed to create FacebookFile entity. Unable to open resource: ' . $this->path . '.');
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:103:        if (is_resource($this->stream)) {
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:104:            fclose($this->stream);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:115:        return stream_get_contents($this->stream, $this->maxLength, $this->offset);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:125:        return basename($this->path);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:135:        return $this->path;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:145:        return filesize($this->path);
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/FacebookFile.php:155:        return Mimetypes::getInstance()->fromFilename($this->path) ?: 'text/plain';
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:45:        '7z' => 'application/x-7z-compressed',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:46:        'aab' => 'application/x-authorware-bin',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:47:        'aac' => 'audio/x-aac',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:48:        'aam' => 'application/x-authorware-map',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:49:        'aas' => 'application/x-authorware-seg',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:50:        'abw' => 'application/x-abiword',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:51:        'ac' => 'application/pkix-attr-cert',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:53:        'ace' => 'application/x-ace-compressed',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:58:        'afm' => 'application/x-font-type1',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:62:        'aif' => 'audio/x-aiff',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:63:        'aifc' => 'audio/x-aiff',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:64:        'aiff' => 'audio/x-aiff',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:65:        'air' => 'application/vnd.adobe.air-application-installer-package+zip',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:68:        'apk' => 'application/vnd.android.package-archive',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:69:        'application' => 'application/x-ms-application',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:70:        'apr' => 'application/vnd.lotus-approach',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:72:        'asax' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:73:        'asc' => 'application/pgp-signature',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:75:        'asf' => 'video/x-ms-asf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:77:        'asm' => 'text/x-asm',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:82:        'asx' => 'video/x-ms-asf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:87:        'atx' => 'application/vnd.antix.game-component',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:89:        'avi' => 'video/x-msvideo',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:95:        'bat' => 'application/x-msdownload',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:96:        'bcpio' => 'application/x-bcpio',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:97:        'bdf' => 'application/x-font-bdf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:101:        'bin' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:106:        'boz' => 'application/x-bzip2',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:107:        'bpk' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:109:        'bz' => 'application/x-bzip',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:110:        'bz2' => 'application/x-bzip2',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:111:        'c' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:112:        'c11amc' => 'application/vnd.cluetrust.cartomobile-config',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:113:        'c11amz' => 'application/vnd.cluetrust.cartomobile-config-pkg',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:119:        'cab' => 'application/vnd.ms-cab-compressed',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:121:        'cat' => 'application/vnd.ms-pki.seccat',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:122:        'cc' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:123:        'cct' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:126:        'cdf' => 'application/x-netcdf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:128:        'cdmia' => 'application/cdmi-capability',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:129:        'cdmic' => 'application/cdmi-container',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:130:        'cdmid' => 'application/cdmi-domain',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:131:        'cdmio' => 'application/cdmi-object',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:132:        'cdmiq' => 'application/cdmi-queue',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:133:        'cdx' => 'chemical/x-cdx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:136:        'cer' => 'application/pkix-cert',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:137:        'cfc' => 'application/x-coldfusion',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:138:        'cfm' => 'application/x-coldfusion',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:140:        'chat' => 'application/x-chat',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:141:        'chm' => 'application/vnd.ms-htmlhelp',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:143:        'cif' => 'chemical/x-cif',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:144:        'cii' => 'application/vnd.anser-web-certificate-issue-initiation',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:145:        'cil' => 'application/vnd.ms-artgalry',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:147:        'class' => 'application/java-vm',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:153:        'clp' => 'application/x-msclip',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:155:        'cmdf' => 'chemical/x-cmdf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:156:        'cml' => 'chemical/x-cml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:157:        'cmp' => 'application/vnd.yellowriver-custom-menu',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:158:        'cmx' => 'image/x-cmx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:160:        'com' => 'application/x-msdownload',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:162:        'cpio' => 'application/x-cpio',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:163:        'cpp' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:164:        'cpt' => 'application/mac-compactpro',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:165:        'crd' => 'application/x-mscardfile',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:166:        'crl' => 'application/pkix-crl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:167:        'crt' => 'application/x-x509-ca-cert',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:170:        'csh' => 'application/x-csh',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:171:        'csml' => 'chemical/x-csml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:174:        'cst' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:176:        'cu' => 'application/cu-seeme',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:179:        'cxt' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:180:        'cxx' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:185:        'dcr' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:189:        'deb' => 'application/x-debian-package',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:191:        'deploy' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:192:        'der' => 'application/x-x509-ca-cert',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:194:        'dic' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:195:        'dir' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:197:        'dist' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:198:        'distz' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:201:        'dll' => 'application/x-msdownload',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:202:        'dmg' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:203:        'dms' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:206:        'docm' => 'application/vnd.ms-word.document.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:207:        'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:209:        'dotm' => 'application/vnd.ms-word.template.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:210:        'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:216:        'dtb' => 'application/x-dtbook+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:217:        'dtd' => 'application/xml-dtd',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:220:        'dump' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:221:        'dvi' => 'application/x-dvi',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:226:        'dxr' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:235:        'elc' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:238:        'eol' => 'audio/vnd.digital-winds',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:239:        'eot' => 'application/vnd.ms-fontobject',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:245:        'etx' => 'text/x-setext',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:246:        'exe' => 'application/x-msdownload',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:249:        'ez' => 'application/andrew-inset',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:250:        'ez2' => 'application/vnd.ezpix-album',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:251:        'ez3' => 'application/vnd.ezpix-package',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:252:        'f' => 'text/x-fortran',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:253:        'f4v' => 'video/x-f4v',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:254:        'f77' => 'text/x-fortran',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:255:        'f90' => 'text/x-fortran',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:259:        'fe_launch' => 'application/vnd.denovo.fcselayout-link',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:261:        'fgd' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:262:        'fh' => 'image/x-freehand',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:263:        'fh4' => 'image/x-freehand',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:264:        'fh5' => 'image/x-freehand',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:265:        'fh7' => 'image/x-freehand',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:266:        'fhc' => 'image/x-freehand',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:267:        'fig' => 'application/x-xfig',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:268:        'fli' => 'video/x-fli',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:270:        'flv' => 'video/x-flv',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:276:        'for' => 'text/x-fortran',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:282:        'fti' => 'application/vnd.anser-web-funds-transfer-initiation',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:290:        'gac' => 'application/vnd.groove-account',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:293:        'gex' => 'application/vnd.geometry-explorer',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:296:        'ghf' => 'application/vnd.groove-help',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:298:        'gim' => 'application/vnd.groove-identity-message',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:300:        'gnumeric' => 'application/x-gnumeric',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:305:        'gre' => 'application/vnd.geometry-explorer',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:306:        'grv' => 'application/vnd.groove-injector',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:308:        'gsf' => 'application/x-font-ghostscript',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:309:        'gtar' => 'application/x-gtar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:310:        'gtm' => 'application/vnd.groove-tool-message',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:314:        'h' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:320:        'hdf' => 'application/x-hdf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:321:        'hh' => 'text/x-c',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:323:        'hpgl' => 'application/vnd.hp-hpgl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:324:        'hpid' => 'application/vnd.hp-hpid',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:325:        'hps' => 'application/vnd.hp-hps',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:326:        'hqx' => 'application/mac-binhex40',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:327:        'hta' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:332:        'hvd' => 'application/vnd.yamaha.hv-dic',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:333:        'hvp' => 'application/vnd.yamaha.hv-voice',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:334:        'hvs' => 'application/vnd.yamaha.hv-script',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:337:        'ice' => 'x-conference/x-cooltalk',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:339:        'ico' => 'image/x-icon',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:351:        'ims' => 'application/vnd.ms-ims',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:356:        'irm' => 'application/vnd.ibm.rights-management',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:358:        'iso' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:360:        'ivp' => 'application/vnd.immervision-ivp',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:361:        'ivu' => 'application/vnd.immervision-ivu',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:362:        'jad' => 'text/vnd.sun.j2me.app-descriptor',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:364:        'jar' => 'application/java-archive',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:365:        'java' => 'text/x-java-source',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:367:        'jlt' => 'application/vnd.hp-jlyt',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:368:        'jnlp' => 'application/x-java-jnlp-file',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:369:        'joda' => 'application/vnd.joost.joda-archive',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:382:        'kml' => 'application/vnd.google-earth.kml+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:383:        'kmz' => 'application/vnd.google-earth.kmz',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:396:        'latex' => 'application/x-latex',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:397:        'lbd' => 'application/vnd.llamagraphics.life-balance.desktop',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:398:        'lbe' => 'application/vnd.llamagraphics.life-balance.exchange+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:399:        'les' => 'application/vnd.hhe.lesson-player',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:400:        'lha' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:407:        'lrf' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:408:        'lrm' => 'application/vnd.ms-lrm',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:411:        'lwp' => 'application/vnd.lotus-wordpro',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:412:        'lzh' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:413:        'm13' => 'application/x-msmediaview',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:414:        'm14' => 'application/x-msmediaview',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:420:        'm3u' => 'audio/x-mpegurl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:437:        'mdb' => 'application/x-msaccess',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:438:        'mdi' => 'image/vnd.ms-modi',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:453:        'mmd' => 'application/vnd.chipnuts.karaoke-mmd',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:455:        'mmr' => 'image/vnd.fujixerox.edmics-mmr',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:456:        'mny' => 'application/x-msmoney',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:457:        'mobi' => 'application/x-mobipocket-ebook',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:460:        'movie' => 'video/x-sgi-movie',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:478:        'mpp' => 'application/vnd.ms-project',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:479:        'mpt' => 'application/vnd.ms-project',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:490:        'msi' => 'application/x-msdownload',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:496:        'mvb' => 'application/x-msmediaview',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:503:        'n-gage' => 'application/vnd.nokia.n-gage.symbian.install',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:507:        'nc' => 'application/x-netcdf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:508:        'ncx' => 'application/x-dtbncx+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:509:        'ngdat' => 'application/vnd.nokia.n-gage.data',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:512:        'nnd' => 'application/vnd.noblenet-directory',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:513:        'nns' => 'application/vnd.noblenet-sealer',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:514:        'nnw' => 'application/vnd.noblenet-web',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:515:        'npx' => 'image/vnd.net-fpx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:516:        'nsf' => 'application/vnd.lotus-notes',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:520:        'obd' => 'application/x-msbinder',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:525:        'odft' => 'application/vnd.oasis.opendocument.formula-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:528:        'odm' => 'application/vnd.oasis.opendocument.text-master',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:540:        'opf' => 'application/oebps-package+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:542:        'org' => 'application/vnd.lotus-organizer',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:545:        'otc' => 'application/vnd.oasis.opendocument.chart-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:546:        'otf' => 'application/x-font-otf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:547:        'otg' => 'application/vnd.oasis.opendocument.graphics-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:548:        'oth' => 'application/vnd.oasis.opendocument.text-web',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:549:        'oti' => 'application/vnd.oasis.opendocument.image-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:550:        'otp' => 'application/vnd.oasis.opendocument.presentation-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:551:        'ots' => 'application/vnd.oasis.opendocument.spreadsheet-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:552:        'ott' => 'application/vnd.oasis.opendocument.text-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:554:        'p' => 'text/x-pascal',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:556:        'p12' => 'application/x-pkcs12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:557:        'p7b' => 'application/x-pkcs7-certificates',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:558:        'p7c' => 'application/pkcs7-mime',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:559:        'p7m' => 'application/pkcs7-mime',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:560:        'p7r' => 'application/x-pkcs7-certreqresp',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:561:        'p7s' => 'application/pkcs7-signature',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:563:        'pas' => 'text/x-pascal',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:566:        'pbm' => 'image/x-portable-bitmap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:567:        'pcf' => 'application/x-font-pcf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:568:        'pcl' => 'application/vnd.hp-pcl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:569:        'pclxl' => 'application/vnd.hp-pclxl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:570:        'pct' => 'image/x-pict',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:572:        'pcx' => 'image/x-pcx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:575:        'pfa' => 'application/x-font-type1',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:576:        'pfb' => 'application/x-font-type1',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:577:        'pfm' => 'application/x-font-type1',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:578:        'pfr' => 'application/font-tdpfr',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:579:        'pfx' => 'application/x-pkcs12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:580:        'pgm' => 'image/x-portable-graymap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:581:        'pgn' => 'application/x-chess-pgn',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:582:        'pgp' => 'application/pgp-encrypted',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:583:        'php' => 'text/x-php',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:584:        'phps' => 'application/x-httpd-phps',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:585:        'pic' => 'image/x-pict',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:586:        'pkg' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:588:        'pkipath' => 'application/pkix-pkipath',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:589:        'plb' => 'application/vnd.3gpp.pic-bw-large',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:593:        'pml' => 'application/vnd.ctc-posml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:595:        'pnm' => 'image/x-portable-anymap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:597:        'pot' => 'application/vnd.ms-powerpoint',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:598:        'potm' => 'application/vnd.ms-powerpoint.template.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:599:        'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:600:        'ppam' => 'application/vnd.ms-powerpoint.addin.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:601:        'ppd' => 'application/vnd.cups-ppd',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:602:        'ppm' => 'image/x-portable-pixmap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:603:        'pps' => 'application/vnd.ms-powerpoint',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:604:        'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:605:        'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:606:        'ppt' => 'application/vnd.ms-powerpoint',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:607:        'pptm' => 'application/vnd.ms-powerpoint.presentation.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:608:        'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:610:        'prc' => 'application/x-mobipocket-ebook',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:611:        'pre' => 'application/vnd.lotus-freelance',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:612:        'prf' => 'application/pics-rules',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:614:        'psb' => 'application/vnd.3gpp.pic-bw-small',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:616:        'psf' => 'application/x-font-linux-psf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:619:        'pub' => 'application/x-mspublisher',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:620:        'pvb' => 'application/vnd.3gpp.pic-bw-var',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:621:        'pwn' => 'application/vnd.3m.post-it-notes',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:622:        'pya' => 'audio/vnd.ms-playready.media.pya',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:623:        'pyv' => 'video/vnd.ms-playready.media.pyv',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:627:        'qps' => 'application/vnd.publishare-delta-tree',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:635:        'ra' => 'audio/x-pn-realaudio',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:636:        'ram' => 'audio/x-pn-realaudio',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:637:        'rar' => 'application/x-rar-compressed',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:638:        'ras' => 'image/x-cmu-raster',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:642:        'rdz' => 'application/vnd.data-vision.rdz',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:644:        'res' => 'application/x-dtbresource+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:646:        'rgb' => 'image/x-rgb',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:649:        'rl' => 'application/resource-lists+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:650:        'rlc' => 'image/vnd.fujixerox.edmics-rlc',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:651:        'rld' => 'application/resource-lists-diff+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:652:        'rm' => 'application/vnd.rn-realmedia',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:654:        'rmp' => 'audio/x-pn-realaudio-plugin',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:655:        'rms' => 'application/vnd.jcp.javame.midlet-rms',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:656:        'rnc' => 'application/relax-ng-compact-syntax',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:659:        'rpss' => 'application/vnd.nokia.radio-presets',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:660:        'rpst' => 'application/vnd.nokia.radio-preset',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:661:        'rq' => 'application/sparql-query',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:662:        'rs' => 'application/rls-services+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:667:        's' => 'text/x-asm',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:668:        'saf' => 'application/vnd.yamaha.smaf-audio',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:670:        'sc' => 'application/vnd.ibm.secure-container',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:671:        'scd' => 'application/x-msschedule',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:672:        'scm' => 'application/vnd.lotus-screencam',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:673:        'scq' => 'application/scvp-cv-request',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:674:        'scs' => 'application/scvp-cv-response',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:688:        'ser' => 'application/java-serialized-object',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:689:        'setpay' => 'application/set-payment-initiation',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:690:        'setreg' => 'application/set-registration-initiation',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:691:        'sfd-hdstx' => 'application/vnd.hydrostatix.sof-data',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:693:        'sgl' => 'application/vnd.stardivision.writer-global',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:696:        'sh' => 'application/x-sh',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:697:        'shar' => 'application/x-shar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:699:        'sig' => 'application/pgp-signature',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:703:        'sit' => 'application/x-stuffit',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:704:        'sitx' => 'application/x-stuffitx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:709:        'sldm' => 'application/vnd.ms-powerpoint.slide.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:710:        'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:717:        'snf' => 'application/x-font-snf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:718:        'so' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:719:        'spc' => 'application/x-pkcs7-certificates',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:720:        'spf' => 'application/vnd.yamaha.smaf-phrase',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:721:        'spl' => 'application/x-futuresplash',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:723:        'spp' => 'application/scvp-vp-response',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:724:        'spq' => 'application/scvp-vp-request',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:726:        'src' => 'application/x-wais-source',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:727:        'srt' => 'application/octet-stream',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:729:        'srx' => 'application/sparql-results+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:730:        'sse' => 'application/vnd.kodak-descriptor',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:739:        'stl' => 'application/vnd.ms-pki.stl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:743:        'sus' => 'application/vnd.sus-calendar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:744:        'susp' => 'application/vnd.sus-calendar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:745:        'sv4cpio' => 'application/x-sv4cpio',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:746:        'sv4crc' => 'application/x-sv4crc',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:751:        'swa' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:752:        'swf' => 'application/x-shockwave-flash',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:761:        'tao' => 'application/vnd.tao.intent-module-archive',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:762:        'tar' => 'application/x-tar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:764:        'tcl' => 'application/x-tcl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:768:        'tex' => 'application/x-tex',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:769:        'texi' => 'application/x-texinfo',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:770:        'texinfo' => 'application/x-texinfo',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:773:        'tfm' => 'application/x-tex-tfm',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:774:        'thmx' => 'application/vnd.ms-officetheme',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:777:        'tmo' => 'application/vnd.tmobile-livetv',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:778:        'torrent' => 'application/x-bittorrent',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:779:        'tpl' => 'application/vnd.groove-tool-template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:783:        'trm' => 'application/x-msterminal',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:784:        'tsd' => 'application/timestamped-data',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:785:        'tsv' => 'text/tab-separated-values',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:786:        'ttc' => 'application/x-font-ttf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:787:        'ttf' => 'application/x-font-ttf',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:789:        'twd' => 'application/vnd.simtech-mindmapper',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:790:        'twds' => 'application/vnd.simtech-mindmapper',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:794:        'u32' => 'application/x-authorware-bin',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:795:        'udeb' => 'application/x-debian-package',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:801:        'uri' => 'text/uri-list',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:802:        'uris' => 'text/uri-list',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:803:        'urls' => 'text/uri-list',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:804:        'ustar' => 'application/x-ustar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:806:        'uu' => 'text/x-uuencode',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:833:        'vcd' => 'application/x-cdlink',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:834:        'vcf' => 'text/x-vcard',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:835:        'vcg' => 'application/vnd.groove-vcard',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:836:        'vcs' => 'text/x-vcalendar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:841:        'vox' => 'application/x-authorware-bin',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:850:        'w3d' => 'application/x-director',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:851:        'wad' => 'application/x-doom',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:852:        'wav' => 'audio/x-wav',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:853:        'wax' => 'audio/x-ms-wax',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:857:        'wcm' => 'application/vnd.ms-works',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:858:        'wdb' => 'application/vnd.ms-works',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:864:        'wks' => 'application/vnd.ms-works',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:865:        'wm' => 'video/x-ms-wm',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:866:        'wma' => 'audio/x-ms-wma',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:867:        'wmd' => 'application/x-ms-wmd',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:868:        'wmf' => 'application/x-msmetafile',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:873:        'wmv' => 'video/x-ms-wmv',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:874:        'wmx' => 'video/x-ms-wmx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:875:        'wmz' => 'application/x-ms-wmz',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:876:        'woff' => 'application/x-font-woff',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:878:        'wpl' => 'application/vnd.ms-wpl',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:879:        'wps' => 'application/vnd.ms-works',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:881:        'wri' => 'application/x-mswrite',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:886:        'wvx' => 'video/x-ms-wvx',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:887:        'x32' => 'application/x-authorware-bin',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:888:        'x3d' => 'application/vnd.hzn-3d-crossword',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:889:        'xap' => 'application/x-silverlight-app',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:891:        'xbap' => 'application/x-ms-xbap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:893:        'xbm' => 'image/x-xbitmap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:894:        'xdf' => 'application/xcap-diff+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:900:        'xer' => 'application/patch-ops-error+xml',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:907:        'xla' => 'application/vnd.ms-excel',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:908:        'xlam' => 'application/vnd.ms-excel.addin.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:909:        'xlc' => 'application/vnd.ms-excel',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:910:        'xlm' => 'application/vnd.ms-excel',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:911:        'xls' => 'application/vnd.ms-excel',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:912:        'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:913:        'xlsm' => 'application/vnd.ms-excel.sheet.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:914:        'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:915:        'xlt' => 'application/vnd.ms-excel',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:916:        'xltm' => 'application/vnd.ms-excel.template.macroenabled.12',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:917:        'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:918:        'xlw' => 'application/vnd.ms-excel',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:920:        'xo' => 'application/vnd.olpc-sugar',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:922:        'xpi' => 'application/x-xpinstall',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:923:        'xpm' => 'image/x-xpixmap',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:924:        'xpr' => 'application/vnd.is-xpr',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:925:        'xps' => 'application/vnd.ms-xpsdocument',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:935:        'xwd' => 'image/x-xwindowdump',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:936:        'xyz' => 'chemical/x-xyz',
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:945:        'zmm' => 'application/vnd.handheld-entertainment+xml'
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:974:        return isset($this->mimetypes[$extension]) ? $this->mimetypes[$extension] : null;
./vendor/facebook/graph-sdk/src/Facebook/FileUpload/Mimetypes.php:986:        return $this->fromExtension(pathinfo($filename, PATHINFO_EXTENSION));
./vendor/facebook/graph-sdk/src/Facebook/polyfills.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/polyfills.php:26: * @see https://github.com/sarciszewski/php-future/blob/master/src/Security.php#L37-L51
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:38:        return $this->getHttpScheme() . '://' . $this->getHostName() . $this->getServerVar('REQUEST_URI');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:48:        return $this->isBehindSsl() ? 'https' : 'http';
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:59:        $protocol = $this->getHeader('X_FORWARDED_PROTO');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:61:            return $this->protocolWithActiveSsl($protocol);
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:64:        $protocol = $this->getServerVar('HTTPS');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:66:            return $this->protocolWithActiveSsl($protocol);
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:69:        return (string)$this->getServerVar('SERVER_PORT') === '443';
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:98:        $header = $this->getHeader('X_FORWARDED_HOST');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:99:        if ($header && $this->isValidForwardedHost($header)) {
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:101:            $host = $elements[count($elements) - 1];
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:102:        } elseif (!$host = $this->getHeader('HOST')) {
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:103:            if (!$host = $this->getServerVar('SERVER_NAME')) {
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:104:                $host = $this->getServerVar('SERVER_ADDR');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:113:        $scheme = $this->getHttpScheme();
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:114:        $port = $this->getCurrentPort();
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:128:        $port = $this->getHeader('X_FORWARDED_PORT');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:133:        $protocol = (string)$this->getHeader('X_FORWARDED_PROTO');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:138:        return (string)$this->getServerVar('SERVER_PORT');
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:162:        return $this->getServerVar('HTTP_' . $key);
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:176:        $host = $elements[count($elements) - 1];
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlDetectionHandler.php:178:        return preg_match("/^([a-z\d](-*[a-z\d])*)(\.([a-z\d](-*[a-z\d])*))*$/i", $host) //valid chars check
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlManipulator.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Url/FacebookUrlManipulator.php:132:        // Nothing new to add, return as-is
./vendor/facebook/graph-sdk/src/Facebook/Url/UrlDetectionInterface.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookCanvasHelper.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookCanvasHelper.php:40:        return $this->signedRequest ? $this->signedRequest->get('app_data') : null;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookCanvasHelper.php:50:        return $this->getRawSignedRequestFromPost() ?: null;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookJavaScriptHelper.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookJavaScriptHelper.php:40:        return $this->getRawSignedRequestFromCookie();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:52:        if (!$this->signedRequest) {
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:56:        $this->pageData = $this->signedRequest->get('page');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:69:        if (isset($this->pageData[$key])) {
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:70:            return $this->pageData[$key];
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:83:        return $this->getPageData('admin') === true;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookPageTabHelper.php:93:        return $this->getPageData('id');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:64:        $this->app = $app;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:66:        $this->oAuth2Client = new OAuth2Client($this->app, $client, $graphVersion);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:68:        $this->instantiateSignedRequest();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:78:        $rawSignedRequest = $rawSignedRequest ?: $this->getRawSignedRequest();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:84:        $this->signedRequest = new SignedRequest($this->app, $rawSignedRequest);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:96:        if ($this->signedRequest && $this->signedRequest->hasOAuthData()) {
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:97:            $code = $this->signedRequest->get('code');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:98:            $accessToken = $this->signedRequest->get('oauth_token');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:101:                return $this->oAuth2Client->getAccessTokenFromCode($code);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:104:            $expiresAt = $this->signedRequest->get('expires', 0);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:119:        return $this->signedRequest;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:129:        return $this->signedRequest ? $this->signedRequest->getUserId() : null;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:160:        if (isset($_COOKIE['fbsr_' . $this->app->getId()])) {
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookSignedRequestFromInputHelper.php:161:            return $_COOKIE['fbsr_' . $this->app->getId()];
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:65:     * @var PseudoRandomStringGeneratorInterface The cryptographically secure pseudo-random string generator.
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:73:     * @param PseudoRandomStringGeneratorInterface|null $prsg                  The cryptographically secure pseudo-random string generator.
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:77:        $this->oAuth2Client = $oAuth2Client;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:78:        $this->persistentDataHandler = $persistentDataHandler ?: new FacebookSessionPersistentDataHandler();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:79:        $this->urlDetectionHandler = $urlHandler ?: new FacebookUrlDetectionHandler();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:80:        $this->pseudoRandomStringGenerator = PseudoRandomStringGeneratorFactory::createPseudoRandomStringGenerator($prsg);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:90:        return $this->persistentDataHandler;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:100:        return $this->urlDetectionHandler;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:104:     * Returns the cryptographically secure pseudo-random string generator.
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:110:        return $this->pseudoRandomStringGenerator;
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:125:        $state = $this->persistentDataHandler->get('state') ?: $this->pseudoRandomStringGenerator->getPseudoRandomString(static::CSRF_LENGTH);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:126:        $this->persistentDataHandler->set('state', $state);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:128:        return $this->oAuth2Client->getAuthorizationUrl($redirectUrl, $state, $scope, $params, $separator);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:142:        return $this->makeUrl($redirectUrl, $scope, [], $separator);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:162:        if ($accessToken->isAppAccessToken()) {
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:168:            'access_token' => $accessToken->getValue(),
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:175:     * Returns the URL to send the user in order to login to Facebook with permission(s) to be re-asked.
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:187:        return $this->makeUrl($redirectUrl, $scope, $params, $separator);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:191:     * Returns the URL to send the user in order to login to Facebook with user to be re-authenticated.
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:203:        return $this->makeUrl($redirectUrl, $scope, $params, $separator);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:217:        if (!$code = $this->getCode()) {
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:221:        $this->validateCsrf();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:222:        $this->resetCsrf();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:224:        $redirectUrl = $redirectUrl ?: $this->urlDetectionHandler->getCurrentUrl();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:228:        return $this->oAuth2Client->getAccessTokenFromCode($code, $redirectUrl);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:232:     * Validate the request against a cross-site request forgery.
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:238:        $state = $this->getState();
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:240:            throw new FacebookSDKException('Cross-site request forgery validation failed. Required GET param "state" missing.');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:242:        $savedState = $this->persistentDataHandler->get('state');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:244:            throw new FacebookSDKException('Cross-site request forgery validation failed. Required param "state" missing from persistent data.');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:251:        throw new FacebookSDKException('Cross-site request forgery validation failed. The "state" param from the URL and session do not match.');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:259:        $this->persistentDataHandler->set('state', null);
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:269:        return $this->getInput('code');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:279:        return $this->getInput('state');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:289:        return $this->getInput('error_code');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:299:        return $this->getInput('error');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:309:        return $this->getInput('error_reason');
./vendor/facebook/graph-sdk/src/Facebook/Helpers/FacebookRedirectLoginHelper.php:319:        return $this->getInput('error_description');
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:99:        $this->setApp($app);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:100:        $this->setAccessToken($accessToken);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:101:        $this->setMethod($method);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:102:        $this->setEndpoint($endpoint);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:103:        $this->setParams($params);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:104:        $this->setETag($eTag);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:105:        $this->graphVersion = $graphVersion ?: Facebook::DEFAULT_GRAPH_VERSION;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:117:        $this->accessToken = $accessToken;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:119:            $this->accessToken = $accessToken->getValue();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:136:        $existingAccessToken = $this->getAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:138:            $this->setAccessToken($accessToken);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:153:        return $this->accessToken;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:163:        return $this->accessToken ? new AccessToken($this->accessToken) : null;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:173:        $this->app = $app;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:183:        return $this->app;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:193:        if (!$accessTokenEntity = $this->getAccessTokenEntity()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:197:        return $accessTokenEntity->getAppSecretProof($this->app->getSecret());
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:207:        $accessToken = $this->getAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:220:        $this->method = strtoupper($method);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:230:        return $this->method;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:240:        if (!$this->method) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:244:        if (!in_array($this->method, ['GET', 'POST', 'DELETE'])) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:263:            $this->setAccessTokenFromParams($params['access_token']);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:268:        $this->endpoint = FacebookUrlManipulator::removeParamsFromUrl($endpoint, $filterParams);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:281:        return $this->endpoint;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:293:        if ($this->eTag) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:294:            $headers['If-None-Match'] = $this->eTag;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:297:        return array_merge($this->headers, $headers);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:307:        $this->headers = array_merge($this->headers, $headers);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:317:        $this->eTag = $eTag;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:332:            $this->setAccessTokenFromParams($params['access_token']);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:339:        //$params = $this->sanitizeAuthenticationParams($params);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:340:        $params = $this->sanitizeFileParams($params);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:341:        $this->dangerouslySetParams($params);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:355:        $this->params = array_merge($this->params, $params);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:371:                $this->addFile($key, $value);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:387:        $this->files[$key] = $file;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:395:        $this->files = [];
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:405:        return $this->files;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:415:        return !empty($this->files);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:425:        foreach ($this->files as $file) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:435:     * Returns the body of the request as multipart/form-data.
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:441:        $params = $this->getPostParams();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:443:        return new RequestBodyMultipart($params, $this->files);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:447:     * Returns the body of the request as URL-encoded.
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:453:        $params = $this->getPostParams();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:465:        $params = $this->params;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:467:        $accessToken = $this->getAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:470:            $params['appsecret_proof'] = $this->getAppSecretProof();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:483:        if ($this->getMethod() === 'POST') {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:484:            return $this->getParams();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:497:        return $this->graphVersion;
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:507:        $this->validateMethod();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:509:        $graphVersion = FacebookUrlManipulator::forceSlashPrefix($this->graphVersion);
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:510:        $endpoint = FacebookUrlManipulator::forceSlashPrefix($this->getEndpoint());
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:514:        if ($this->getMethod() !== 'POST') {
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:515:            $params = $this->getParams();
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:530:            'User-Agent' => 'fb-php-' . Facebook::VERSION,
./vendor/facebook/graph-sdk/src/Facebook/FacebookRequest.php:531:            'Accept-Encoding' => '*',
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:54:        // We cast as a string in case a valid int was set on a 64-bit system and this is unserialised on a 32-bit system
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:55:        $this->id = (string) $id;
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:56:        $this->secret = $secret;
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:66:        return $this->id;
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:76:        return $this->secret;
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:86:        return new AccessToken($this->id . '|' . $this->secret);
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:96:        return implode('|', [$this->id, $this->secret]);
./vendor/facebook/graph-sdk/src/Facebook/FacebookApp.php:108:        $this->__construct($id, $secret);
./vendor/facebook/graph-sdk/src/Facebook/autoload.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/autoload.php:40: * Based off the official PSR-4 autoloader example found here:
./vendor/facebook/graph-sdk/src/Facebook/autoload.php:41: * https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader-examples.md
./vendor/facebook/graph-sdk/src/Facebook/autoload.php:43: * @param string $class The fully-qualified class name.
./vendor/facebook/graph-sdk/src/Facebook/autoload.php:48:    // project-specific namespace prefix
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:77:        $this->request = $request;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:78:        $this->body = $body;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:79:        $this->httpStatusCode = $httpStatusCode;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:80:        $this->headers = $headers;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:82:        $this->decodeBody();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:92:        return $this->request;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:102:        return $this->request->getApp();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:112:        return $this->request->getAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:122:        return $this->httpStatusCode;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:132:        return $this->headers;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:142:        return $this->body;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:152:        return $this->decodedBody;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:162:        return $this->request->getAppSecretProof();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:172:        return isset($this->headers['ETag']) ? $this->headers['ETag'] : null;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:182:        return isset($this->headers['Facebook-API-Version']) ? $this->headers['Facebook-API-Version'] : null;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:192:        return isset($this->decodedBody['error']);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:202:        throw $this->thrownException;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:210:        $this->thrownException = FacebookResponseException::create($this);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:220:        return $this->thrownException;
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:227:     * - JSON(P)
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:229:     * - application/x-www-form-urlencoded key/value pairs
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:231:     *    a short-lived access token for a long-lived access token
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:232:     * - And sometimes nothing :/ but that'd be a bug.
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:236:        $this->decodedBody = json_decode($this->body, true);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:238:        if ($this->decodedBody === null) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:239:            $this->decodedBody = [];
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:240:            parse_str($this->body, $this->decodedBody);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:241:        } elseif (is_bool($this->decodedBody)) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:245:            $this->decodedBody = ['success' => $this->decodedBody];
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:246:        } elseif (is_numeric($this->decodedBody)) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:247:            $this->decodedBody = ['id' => $this->decodedBody];
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:250:        if (!is_array($this->decodedBody)) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:251:            $this->decodedBody = [];
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:254:        if ($this->isError()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:255:            $this->makeException();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:273:        return $this->getGraphNode($subclassName);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:289:        return $factory->makeGraphNode($subclassName);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:303:        return $factory->makeGraphAlbum();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:317:        return $factory->makeGraphPage();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:331:        return $factory->makeGraphSessionInfo();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:345:        return $factory->makeGraphUser();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:359:        return $factory->makeGraphEvent();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:373:        return $factory->makeGraphGroup();
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:380:     * @param boolean     $auto_prefix  Toggle to auto-prefix the subclass name.
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:391:        return $this->getGraphEdge($subclassName, $auto_prefix);
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:398:     * @param boolean     $auto_prefix  Toggle to auto-prefix the subclass name.
./vendor/facebook/graph-sdk/src/Facebook/FacebookResponse.php:408:        return $factory->makeGraphEdge($subclassName, $auto_prefix);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:58:        $this->app = $facebookApp;
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:64:        $this->rawSignedRequest = $rawSignedRequest;
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:66:        $this->parse();
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:76:        return $this->rawSignedRequest;
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:86:        return $this->payload;
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:99:        if (isset($this->payload[$key])) {
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:100:            return $this->payload[$key];
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:113:        return $this->get('user_id');
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:123:        return $this->get('oauth_token') || $this->get('code');
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:135:        $payload['algorithm'] = isset($payload['algorithm']) ? $payload['algorithm'] : 'HMAC-SHA256';
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:137:        $encodedPayload = $this->base64UrlEncode(json_encode($payload));
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:139:        $hashedSig = $this->hashSignature($encodedPayload);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:140:        $encodedSig = $this->base64UrlEncode($hashedSig);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:151:        list($encodedSig, $encodedPayload) = $this->split();
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:154:        $sig = $this->decodeSignature($encodedSig);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:155:        $hashedSig = $this->hashSignature($encodedPayload);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:156:        $this->validateSignature($hashedSig, $sig);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:158:        $this->payload = $this->decodePayload($encodedPayload);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:161:        $this->validateAlgorithm();
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:173:        if (strpos($this->rawSignedRequest, '.') === false) {
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:177:        return explode('.', $this->rawSignedRequest, 2);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:191:        $sig = $this->base64UrlDecode($encodedSig);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:211:        $payload = $this->base64UrlDecode($encodedPayload);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:231:        if ($this->get('algorithm') !== 'HMAC-SHA256') {
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:250:            $this->app->getSecret(),
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:280:     *   + instead of -
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:291:        $urlDecodedBase64 = strtr($input, '-_', '+/');
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:292:        $this->validateBase64($urlDecodedBase64);
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:299:     *   + instead of -
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:310:        return strtr(base64_encode($input), '+/', '-_');
./vendor/facebook/graph-sdk/src/Facebook/SignedRequest.php:322:        if (!preg_match('/^[a-zA-Z0-9\/\r\n+]*={0,2}$/', $input)) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:46:    const BASE_GRAPH_VIDEO_URL = 'https://graph-video.facebook.com';
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:56:    const BASE_GRAPH_VIDEO_URL_BETA = 'https://graph-video.beta.facebook.com';
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:96:        $this->httpClientHandler = $httpClientHandler ?: $this->detectHttpClientHandler();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:97:        $this->enableBetaMode = $enableBeta;
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:107:        $this->httpClientHandler = $httpClientHandler;
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:117:        return $this->httpClientHandler;
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:137:        $this->enableBetaMode = $betaMode;
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:150:            return $this->enableBetaMode ? static::BASE_GRAPH_VIDEO_URL_BETA : static::BASE_GRAPH_VIDEO_URL;
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:153:        return $this->enableBetaMode ? static::BASE_GRAPH_URL_BETA : static::BASE_GRAPH_URL;
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:165:        $postToVideoUrl = $request->containsVideoUploads();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:166:        $url = $this->getBaseGraphUrl($postToVideoUrl) . $request->getUrl();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:168:        // If we're sending files they should be sent as multipart/form-data
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:169:        if ($request->containsFileUploads()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:170:            $requestBody = $request->getMultipartBody();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:171:            $request->setHeaders([
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:172:                'Content-Type' => 'multipart/form-data; boundary=' . $requestBody->getBoundary(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:175:            $requestBody = $request->getUrlEncodedBody();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:176:            $request->setHeaders([
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:177:                'Content-Type' => 'application/x-www-form-urlencoded',
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:183:            $request->getMethod(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:184:            $request->getHeaders(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:185:            $requestBody->getBody(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:201:            $request->validateAccessToken();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:204:        list($url, $method, $headers, $body) = $this->prepareRequestMessage($request);
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:208:        if ($request->containsFileUploads()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:210:        } elseif ($request->containsVideoUploads()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:216:        $rawResponse = $this->httpClientHandler->send($url, $method, $body, $headers, $timeOut);
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:222:            $rawResponse->getBody(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:223:            $rawResponse->getHttpResponseCode(),
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:224:            $rawResponse->getHeaders()
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:227:        if ($returnResponse->isError()) {
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:228:            throw $returnResponse->getThrownException();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:245:        $request->prepareRequestsForBatch();
./vendor/facebook/graph-sdk/src/Facebook/FacebookClient.php:246:        $facebookResponse = $this->sendRequest($request);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:41:        $this->facebookStream = $facebookStream ?: new FacebookStream();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:52:                'header' => $this->compileHeader($headers),
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:60:                'allow_self_signed' => true, // All root certificates are self-signed
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:65:        $this->facebookStream->streamContextCreate($options);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:66:        $rawBody = $this->facebookStream->fileGetContents($url);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStreamHttpClient.php:67:        $rawHeaders = $this->facebookStream->getResponseHeaders();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookHttpClientInterface.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:46:        $this->guzzleClient = $guzzleClient ?: new Client();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:61:        $request = $this->guzzleClient->createRequest($method, $url, $options);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:64:            $rawResponse = $this->guzzleClient->send($request);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:66:            $rawResponse = $e->getResponse();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:68:            if ($e->getPrevious() instanceof RingException || !$rawResponse instanceof ResponseInterface) {
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:69:                throw new FacebookSDKException($e->getMessage(), $e->getCode());
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:73:        $rawHeaders = $this->getHeadersAsString($rawResponse);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:74:        $rawBody = $rawResponse->getBody();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:75:        $httpStatusCode = $rawResponse->getStatusCode();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookGuzzleHttpClient.php:89:        $headers = $response->getHeaders();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/certs/DigiCertHighAssuranceEVRootCA.pem:1:-----BEGIN CERTIFICATE-----
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/certs/DigiCertHighAssuranceEVRootCA.pem:23:-----END CERTIFICATE-----
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/HttpClientsFactory.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:46:        $this->curl = curl_init();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:57:        curl_setopt($this->curl, $key, $value);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:67:        curl_setopt_array($this->curl, $options);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:77:        return curl_exec($this->curl);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:87:        return curl_errno($this->curl);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:97:        return curl_error($this->curl);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:109:        return curl_getinfo($this->curl, $type);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurl.php:127:        curl_close($this->curl);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:61:        $this->facebookCurl = $facebookCurl ?: new FacebookCurl();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:69:        $this->openConnection($url, $method, $body, $headers, $timeOut);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:70:        $this->sendRequest();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:72:        if ($curlErrorCode = $this->facebookCurl->errno()) {
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:73:            throw new FacebookSDKException($this->facebookCurl->error(), $curlErrorCode);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:77:        list($rawHeaders, $rawBody) = $this->extractResponseHeadersAndBody();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:79:        $this->closeConnection();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:97:            CURLOPT_HTTPHEADER => $this->compileRequestHeaders($headers),
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:112:        $this->facebookCurl->init();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:113:        $this->facebookCurl->setoptArray($options);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:121:        $this->facebookCurl->close();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:129:        $this->rawResponse = $this->facebookCurl->exec();
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:133:     * Compiles the request headers into a curl-friendly format.
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:151:     * Extracts the headers and the body into a two-part array
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookCurlHttpClient.php:157:        $parts = explode("\r\n\r\n", $this->rawResponse);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStream.php:5: * You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStream.php:53:        $this->stream = stream_context_create($options);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStream.php:63:        return $this->responseHeaders;
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStream.php:75:        $rawResponse = file_get_contents($url, false, $this->stream);
./vendor/facebook/graph-sdk/src/Facebook/HttpClients/FacebookStream.php:76:        $this->responseHeaders = $http_response_header ?: [];
./vendor/facebook/graph-sdk/composer.json:2:    "name": "facebook/graph-sdk",
./vendor/facebook/graph-sdk/composer.json:6:    "homepage": "https://github.com/facebook/php-graph-sdk",
./vendor/facebook/graph-sdk/composer.json:11:            "homepage": "https://github.com/facebook/php-graph-sdk/contributors"
./vendor/facebook/graph-sdk/composer.json:17:    "require-dev": {
./vendor/facebook/graph-sdk/composer.json:27:        "psr-4": {
./vendor/facebook/graph-sdk/composer.json:32:    "autoload-dev": {
./vendor/facebook/graph-sdk/composer.json:33:        "psr-4": {
./vendor/facebook/graph-sdk/composer.json:38:        "branch-alias": {
./vendor/facebook/graph-sdk/composer.json:39:            "dev-master": "5.x-dev"
./vendor/facebook/graph-sdk/LICENSE:3:You are hereby granted a non-exclusive, worldwide, royalty-free license to
./vendor/phpmailer/phpmailer/src/SMTP.php:12: * @copyright 2012 - 2017 Marcus Bointon
./vendor/phpmailer/phpmailer/src/SMTP.php:13: * @copyright 2010 - 2012 Jim Jagielski
./vendor/phpmailer/phpmailer/src/SMTP.php:14: * @copyright 2004 - 2009 Andy Prevost
./vendor/phpmailer/phpmailer/src/SMTP.php:16: * @note      This program is distributed in the hope that it will be useful - WITHOUT
./vendor/phpmailer/phpmailer/src/SMTP.php:66:     * Debug level to show client -> server messages.
./vendor/phpmailer/phpmailer/src/SMTP.php:71:     * Debug level to show client -> server and server -> client messages.
./vendor/phpmailer/phpmailer/src/SMTP.php:76:     * Debug level to show connection status, client -> server and server -> client messages.
./vendor/phpmailer/phpmailer/src/SMTP.php:92:     * * self::DEBUG_LOWLEVEL (`4`) Low-level data output, all messages.
./vendor/phpmailer/phpmailer/src/SMTP.php:101:     * * `echo` Output plain-text as-is, appropriate for CLI
./vendor/phpmailer/phpmailer/src/SMTP.php:107:     * $smtp->Debugoutput = function($str, $level) {echo "debug level $level; message: $str";};
./vendor/phpmailer/phpmailer/src/SMTP.php:110:     * Alternatively, you can pass in an instance of a PSR-3 compatible logger, though only `debug`
./vendor/phpmailer/phpmailer/src/SMTP.php:114:     * $mail->Debugoutput = new myPsr3Logger;
./vendor/phpmailer/phpmailer/src/SMTP.php:134:     * This needs to be quite high to function correctly with hosts using greetdelay as an anti-spam measure.
./vendor/phpmailer/phpmailer/src/SMTP.php:136:     * @see http://tools.ietf.org/html/rfc2821#section-4.5.3.2
./vendor/phpmailer/phpmailer/src/SMTP.php:158:        'exim' => '/[0-9]{3} OK id=(.*)/',
./vendor/phpmailer/phpmailer/src/SMTP.php:159:        'sendmail' => '/[0-9]{3} 2.0.0 (.*) Message/',
./vendor/phpmailer/phpmailer/src/SMTP.php:160:        'postfix' => '/[0-9]{3} 2.0.0 Ok: queued as (.*)/',
./vendor/phpmailer/phpmailer/src/SMTP.php:161:        'Microsoft_ESMTP' => '/[0-9]{3} 2.[0-9].0 (.*)@(?:.*) Queued mail for delivery/',
./vendor/phpmailer/phpmailer/src/SMTP.php:162:        'Amazon_SES' => '/[0-9]{3} Ok (.*)/',
./vendor/phpmailer/phpmailer/src/SMTP.php:163:        'SendGrid' => '/[0-9]{3} Ok: queued as (.*)/',
./vendor/phpmailer/phpmailer/src/SMTP.php:221:     * Output debugging info via a user-selected method.
./vendor/phpmailer/phpmailer/src/SMTP.php:231:        if ($level > $this->do_debug) {
./vendor/phpmailer/phpmailer/src/SMTP.php:234:        //Is this a PSR-3 logger?
./vendor/phpmailer/phpmailer/src/SMTP.php:235:        if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) {
./vendor/phpmailer/phpmailer/src/SMTP.php:236:            $this->Debugoutput->debug($str);
./vendor/phpmailer/phpmailer/src/SMTP.php:240:        //Avoid clash with built-in function names
./vendor/phpmailer/phpmailer/src/SMTP.php:241:        if (!in_array($this->Debugoutput, ['error_log', 'html', 'echo']) and is_callable($this->Debugoutput)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:242:            call_user_func($this->Debugoutput, $str, $level);
./vendor/phpmailer/phpmailer/src/SMTP.php:246:        switch ($this->Debugoutput) {
./vendor/phpmailer/phpmailer/src/SMTP.php:252:                //Cleans up output a bit for a better looking, HTML-safe output
./vendor/phpmailer/phpmailer/src/SMTP.php:253:                echo gmdate('Y-m-d H:i:s'), ' ', htmlentities(
./vendor/phpmailer/phpmailer/src/SMTP.php:256:                    'UTF-8'
./vendor/phpmailer/phpmailer/src/SMTP.php:263:                echo gmdate('Y-m-d H:i:s'),
./vendor/phpmailer/phpmailer/src/SMTP.php:297:        $this->setError('');
./vendor/phpmailer/phpmailer/src/SMTP.php:299:        if ($this->connected()) {
./vendor/phpmailer/phpmailer/src/SMTP.php:301:            $this->setError('Already connected to a server');
./vendor/phpmailer/phpmailer/src/SMTP.php:309:        $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:319:            $this->smtp_conn = stream_socket_client(
./vendor/phpmailer/phpmailer/src/SMTP.php:330:            $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:335:            $this->smtp_conn = fsockopen(
./vendor/phpmailer/phpmailer/src/SMTP.php:345:        if (!is_resource($this->smtp_conn)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:346:            $this->setError(
./vendor/phpmailer/phpmailer/src/SMTP.php:352:            $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:353:                'SMTP ERROR: ' . $this->error['error']
./vendor/phpmailer/phpmailer/src/SMTP.php:360:        $this->edebug('Connection: opened', self::DEBUG_CONNECTION);
./vendor/phpmailer/phpmailer/src/SMTP.php:369:            stream_set_timeout($this->smtp_conn, $timeout, 0);
./vendor/phpmailer/phpmailer/src/SMTP.php:372:        $announce = $this->get_lines();
./vendor/phpmailer/phpmailer/src/SMTP.php:373:        $this->edebug('SERVER -> CLIENT: ' . $announce, self::DEBUG_SERVER);
./vendor/phpmailer/phpmailer/src/SMTP.php:385:        if (!$this->sendCommand('STARTTLS', 'STARTTLS', 220)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:402:            $this->smtp_conn,
./vendor/phpmailer/phpmailer/src/SMTP.php:419:     * @param string $authtype The auth type (CRAM-MD5, PLAIN, LOGIN, XOAUTH2)
./vendor/phpmailer/phpmailer/src/SMTP.php:430:        if (!$this->server_caps) {
./vendor/phpmailer/phpmailer/src/SMTP.php:431:            $this->setError('Authentication is not allowed before HELO/EHLO');
./vendor/phpmailer/phpmailer/src/SMTP.php:436:        if (array_key_exists('EHLO', $this->server_caps)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:438:            if (!array_key_exists('AUTH', $this->server_caps)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:439:                $this->setError('Authentication is not allowed at this stage');
./vendor/phpmailer/phpmailer/src/SMTP.php:446:            $this->edebug('Auth method requested: ' . ($authtype ? $authtype : 'UNKNOWN'), self::DEBUG_LOWLEVEL);
./vendor/phpmailer/phpmailer/src/SMTP.php:447:            $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:448:                'Auth methods available on the server: ' . implode(',', $this->server_caps['AUTH']),
./vendor/phpmailer/phpmailer/src/SMTP.php:453:            if (!in_array($authtype, $this->server_caps['AUTH'])) {
./vendor/phpmailer/phpmailer/src/SMTP.php:454:                $this->edebug('Requested auth method not available: ' . $authtype, self::DEBUG_LOWLEVEL);
./vendor/phpmailer/phpmailer/src/SMTP.php:460:                //Try CRAM-MD5 first as it's more secure than the others
./vendor/phpmailer/phpmailer/src/SMTP.php:461:                foreach (['CRAM-MD5', 'LOGIN', 'PLAIN', 'XOAUTH2'] as $method) {
./vendor/phpmailer/phpmailer/src/SMTP.php:462:                    if (in_array($method, $this->server_caps['AUTH'])) {
./vendor/phpmailer/phpmailer/src/SMTP.php:468:                    $this->setError('No supported authentication methods found');
./vendor/phpmailer/phpmailer/src/SMTP.php:475:            if (!in_array($authtype, $this->server_caps['AUTH'])) {
./vendor/phpmailer/phpmailer/src/SMTP.php:476:                $this->setError("The requested authentication method \"$authtype\" is not supported by the server");
./vendor/phpmailer/phpmailer/src/SMTP.php:486:                if (!$this->sendCommand('AUTH', 'AUTH PLAIN', 334)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:490:                if (!$this->sendCommand(
./vendor/phpmailer/phpmailer/src/SMTP.php:501:                if (!$this->sendCommand('AUTH', 'AUTH LOGIN', 334)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:504:                if (!$this->sendCommand('Username', base64_encode($username), 334)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:507:                if (!$this->sendCommand('Password', base64_encode($password), 235)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:511:            case 'CRAM-MD5':
./vendor/phpmailer/phpmailer/src/SMTP.php:513:                if (!$this->sendCommand('AUTH CRAM-MD5', 'AUTH CRAM-MD5', 334)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:517:                $challenge = base64_decode(substr($this->last_reply, 4));
./vendor/phpmailer/phpmailer/src/SMTP.php:520:                $response = $username . ' ' . $this->hmac($challenge, $password);
./vendor/phpmailer/phpmailer/src/SMTP.php:523:                return $this->sendCommand('Username', base64_encode($response), 235);
./vendor/phpmailer/phpmailer/src/SMTP.php:529:                $oauth = $OAuth->getOauth64();
./vendor/phpmailer/phpmailer/src/SMTP.php:532:                if (!$this->sendCommand('AUTH', 'AUTH XOAUTH2 ' . $oauth, 235)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:537:                $this->setError("Authentication method \"$authtype\" is not supported");
./vendor/phpmailer/phpmailer/src/SMTP.php:589:        if (is_resource($this->smtp_conn)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:590:            $sock_status = stream_get_meta_data($this->smtp_conn);
./vendor/phpmailer/phpmailer/src/SMTP.php:593:                $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:597:                $this->close();
./vendor/phpmailer/phpmailer/src/SMTP.php:616:        $this->setError('');
./vendor/phpmailer/phpmailer/src/SMTP.php:617:        $this->server_caps = null;
./vendor/phpmailer/phpmailer/src/SMTP.php:618:        $this->helo_rply = null;
./vendor/phpmailer/phpmailer/src/SMTP.php:619:        if (is_resource($this->smtp_conn)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:621:            fclose($this->smtp_conn);
./vendor/phpmailer/phpmailer/src/SMTP.php:622:            $this->smtp_conn = null; //Makes for cleaner serialization
./vendor/phpmailer/phpmailer/src/SMTP.php:623:            $this->edebug('Connection: closed', self::DEBUG_CONNECTION);
./vendor/phpmailer/phpmailer/src/SMTP.php:643:        if (!$this->sendCommand('DATA', 'DATA', 354)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:652:         * NOTE: this does not count towards line-length limit.
./vendor/phpmailer/phpmailer/src/SMTP.php:675:            //Micro-optimisation: isset($str[$len]) is faster than (strlen($str) > $len),
./vendor/phpmailer/phpmailer/src/SMTP.php:683:                    $pos = self::MAX_LINE_LENGTH - 1;
./vendor/phpmailer/phpmailer/src/SMTP.php:692:                //If processing headers add a LWSP-char to the front of new line RFC822 section 3.1.1
./vendor/phpmailer/phpmailer/src/SMTP.php:705:                $this->client_send($line_out . static::LE, 'DATA');
./vendor/phpmailer/phpmailer/src/SMTP.php:711:        $savetimelimit = $this->Timelimit;
./vendor/phpmailer/phpmailer/src/SMTP.php:712:        $this->Timelimit = $this->Timelimit * 2;
./vendor/phpmailer/phpmailer/src/SMTP.php:713:        $result = $this->sendCommand('DATA END', '.', 250);
./vendor/phpmailer/phpmailer/src/SMTP.php:714:        $this->recordLastTransactionID();
./vendor/phpmailer/phpmailer/src/SMTP.php:716:        $this->Timelimit = $savetimelimit;
./vendor/phpmailer/phpmailer/src/SMTP.php:735:        return (bool) ($this->sendHello('EHLO', $host) or $this->sendHello('HELO', $host));
./vendor/phpmailer/phpmailer/src/SMTP.php:740:     * Low-level implementation used by hello().
./vendor/phpmailer/phpmailer/src/SMTP.php:751:        $noerror = $this->sendCommand($hello, $hello . ' ' . $host, 250);
./vendor/phpmailer/phpmailer/src/SMTP.php:752:        $this->helo_rply = $this->last_reply;
./vendor/phpmailer/phpmailer/src/SMTP.php:754:            $this->parseHelloFields($hello);
./vendor/phpmailer/phpmailer/src/SMTP.php:756:            $this->server_caps = null;
./vendor/phpmailer/phpmailer/src/SMTP.php:770:        $this->server_caps = [];
./vendor/phpmailer/phpmailer/src/SMTP.php:771:        $lines = explode("\n", $this->helo_rply);
./vendor/phpmailer/phpmailer/src/SMTP.php:774:            //First 4 chars contain response code followed by - or space
./vendor/phpmailer/phpmailer/src/SMTP.php:799:                $this->server_caps[$name] = $fields;
./vendor/phpmailer/phpmailer/src/SMTP.php:810:     * Implements RFC 821: MAIL <SP> FROM:<reverse-path> <CRLF>.
./vendor/phpmailer/phpmailer/src/SMTP.php:818:        $useVerp = ($this->do_verp ? ' XVERP' : '');
./vendor/phpmailer/phpmailer/src/SMTP.php:820:        return $this->sendCommand(
./vendor/phpmailer/phpmailer/src/SMTP.php:838:        $noerror = $this->sendCommand('QUIT', 'QUIT', 221);
./vendor/phpmailer/phpmailer/src/SMTP.php:839:        $err = $this->error; //Save any error
./vendor/phpmailer/phpmailer/src/SMTP.php:841:            $this->close();
./vendor/phpmailer/phpmailer/src/SMTP.php:842:            $this->error = $err; //Restore any error from the quit command
./vendor/phpmailer/phpmailer/src/SMTP.php:852:     * Implements from RFC 821: RCPT <SP> TO:<forward-path> <CRLF>.
./vendor/phpmailer/phpmailer/src/SMTP.php:860:        return $this->sendCommand(
./vendor/phpmailer/phpmailer/src/SMTP.php:876:        return $this->sendCommand('RSET', 'RSET', 250);
./vendor/phpmailer/phpmailer/src/SMTP.php:882:     * @param string    $command       The command name - not sent to the server
./vendor/phpmailer/phpmailer/src/SMTP.php:890:        if (!$this->connected()) {
./vendor/phpmailer/phpmailer/src/SMTP.php:891:            $this->setError("Called $command without being connected");
./vendor/phpmailer/phpmailer/src/SMTP.php:897:            $this->setError("Command '$command' contained line breaks");
./vendor/phpmailer/phpmailer/src/SMTP.php:901:        $this->client_send($commandstring . static::LE, $command);
./vendor/phpmailer/phpmailer/src/SMTP.php:903:        $this->last_reply = $this->get_lines();
./vendor/phpmailer/phpmailer/src/SMTP.php:906:        if (preg_match('/^([0-9]{3})[ -](?:([0-9]\\.[0-9]\\.[0-9]) )?/', $this->last_reply, $matches)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:911:                "/{$code}[ -]" .
./vendor/phpmailer/phpmailer/src/SMTP.php:914:                $this->last_reply
./vendor/phpmailer/phpmailer/src/SMTP.php:918:            $code = substr($this->last_reply, 0, 3);
./vendor/phpmailer/phpmailer/src/SMTP.php:920:            $detail = substr($this->last_reply, 4);
./vendor/phpmailer/phpmailer/src/SMTP.php:923:        $this->edebug('SERVER -> CLIENT: ' . $this->last_reply, self::DEBUG_SERVER);
./vendor/phpmailer/phpmailer/src/SMTP.php:926:            $this->setError(
./vendor/phpmailer/phpmailer/src/SMTP.php:932:            $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:933:                'SMTP ERROR: ' . $this->error['error'] . ': ' . $this->last_reply,
./vendor/phpmailer/phpmailer/src/SMTP.php:940:        $this->setError('');
./vendor/phpmailer/phpmailer/src/SMTP.php:953:     * Implements RFC 821: SAML <SP> FROM:<reverse-path> <CRLF>.
./vendor/phpmailer/phpmailer/src/SMTP.php:961:        return $this->sendCommand('SAML', "SAML FROM:$from", 250);
./vendor/phpmailer/phpmailer/src/SMTP.php:973:        return $this->sendCommand('VRFY', "VRFY $name", [250, 251]);
./vendor/phpmailer/phpmailer/src/SMTP.php:978:     * Used to keep keep-alives alive, doesn't actually do anything.
./vendor/phpmailer/phpmailer/src/SMTP.php:984:        return $this->sendCommand('NOOP', 'NOOP', 250);
./vendor/phpmailer/phpmailer/src/SMTP.php:998:        $this->setError('The SMTP TURN command is not implemented');
./vendor/phpmailer/phpmailer/src/SMTP.php:999:        $this->edebug('SMTP NOTICE: ' . $this->error['error'], self::DEBUG_CLIENT);
./vendor/phpmailer/phpmailer/src/SMTP.php:1016:        if (self::DEBUG_LOWLEVEL > $this->do_debug and
./vendor/phpmailer/phpmailer/src/SMTP.php:1018:            $this->edebug('CLIENT -> SERVER: <credentials hidden>', self::DEBUG_CLIENT);
./vendor/phpmailer/phpmailer/src/SMTP.php:1020:            $this->edebug('CLIENT -> SERVER: ' . $data, self::DEBUG_CLIENT);
./vendor/phpmailer/phpmailer/src/SMTP.php:1023:        $result = fwrite($this->smtp_conn, $data);
./vendor/phpmailer/phpmailer/src/SMTP.php:1036:        return $this->error;
./vendor/phpmailer/phpmailer/src/SMTP.php:1046:        return $this->server_caps;
./vendor/phpmailer/phpmailer/src/SMTP.php:1052:     *   1. HELO/EHLO has not been sent - returns null and populates $this->error.
./vendor/phpmailer/phpmailer/src/SMTP.php:1053:     *   2. HELO has been sent -
./vendor/phpmailer/phpmailer/src/SMTP.php:1056:     *     $name == any other string: returns null and populates $this->error
./vendor/phpmailer/phpmailer/src/SMTP.php:1057:     *   3. EHLO has been sent -
./vendor/phpmailer/phpmailer/src/SMTP.php:1068:        if (!$this->server_caps) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1069:            $this->setError('No HELO/EHLO was sent');
./vendor/phpmailer/phpmailer/src/SMTP.php:1074:        if (!array_key_exists($name, $this->server_caps)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1076:                return $this->server_caps['EHLO'];
./vendor/phpmailer/phpmailer/src/SMTP.php:1078:            if ('EHLO' == $name || array_key_exists('EHLO', $this->server_caps)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1081:            $this->setError('HELO handshake was used; No information about server extensions available');
./vendor/phpmailer/phpmailer/src/SMTP.php:1086:        return $this->server_caps[$name];
./vendor/phpmailer/phpmailer/src/SMTP.php:1096:        return $this->last_reply;
./vendor/phpmailer/phpmailer/src/SMTP.php:1103:     * 4th character is '-' symbol. If it is a space then we don't
./vendor/phpmailer/phpmailer/src/SMTP.php:1111:        if (!is_resource($this->smtp_conn)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1116:        stream_set_timeout($this->smtp_conn, $this->Timeout);
./vendor/phpmailer/phpmailer/src/SMTP.php:1117:        if ($this->Timelimit > 0) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1118:            $endtime = time() + $this->Timelimit;
./vendor/phpmailer/phpmailer/src/SMTP.php:1120:        $selR = [$this->smtp_conn];
./vendor/phpmailer/phpmailer/src/SMTP.php:1122:        while (is_resource($this->smtp_conn) and !feof($this->smtp_conn)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1124:            if (!stream_select($selR, $selW, $selW, $this->Timelimit)) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1125:                $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:1126:                    'SMTP -> get_lines(): timed-out (' . $this->Timeout . ' sec)',
./vendor/phpmailer/phpmailer/src/SMTP.php:1131:            //Deliberate noise suppression - errors are handled afterwards
./vendor/phpmailer/phpmailer/src/SMTP.php:1132:            $str = @fgets($this->smtp_conn, 515);
./vendor/phpmailer/phpmailer/src/SMTP.php:1133:            $this->edebug('SMTP INBOUND: "' . trim($str) . '"', self::DEBUG_LOWLEVEL);
./vendor/phpmailer/phpmailer/src/SMTP.php:1137:            // string array access is a micro-optimisation over strlen
./vendor/phpmailer/phpmailer/src/SMTP.php:1141:            // Timed-out? Log and break
./vendor/phpmailer/phpmailer/src/SMTP.php:1142:            $info = stream_get_meta_data($this->smtp_conn);
./vendor/phpmailer/phpmailer/src/SMTP.php:1144:                $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:1145:                    'SMTP -> get_lines(): timed-out (' . $this->Timeout . ' sec)',
./vendor/phpmailer/phpmailer/src/SMTP.php:1152:                $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:1153:                    'SMTP -> get_lines(): timelimit reached (' .
./vendor/phpmailer/phpmailer/src/SMTP.php:1154:                    $this->Timelimit . ' sec)',
./vendor/phpmailer/phpmailer/src/SMTP.php:1171:        $this->do_verp = $enabled;
./vendor/phpmailer/phpmailer/src/SMTP.php:1181:        return $this->do_verp;
./vendor/phpmailer/phpmailer/src/SMTP.php:1194:        $this->error = [
./vendor/phpmailer/phpmailer/src/SMTP.php:1209:        $this->Debugoutput = $method;
./vendor/phpmailer/phpmailer/src/SMTP.php:1219:        return $this->Debugoutput;
./vendor/phpmailer/phpmailer/src/SMTP.php:1229:        $this->do_debug = $level;
./vendor/phpmailer/phpmailer/src/SMTP.php:1239:        return $this->do_debug;
./vendor/phpmailer/phpmailer/src/SMTP.php:1249:        $this->Timeout = $timeout;
./vendor/phpmailer/phpmailer/src/SMTP.php:1259:        return $this->Timeout;
./vendor/phpmailer/phpmailer/src/SMTP.php:1273:        $this->setError(
./vendor/phpmailer/phpmailer/src/SMTP.php:1278:        $this->edebug(
./vendor/phpmailer/phpmailer/src/SMTP.php:1295:        $reply = $this->getLastReply();
./vendor/phpmailer/phpmailer/src/SMTP.php:1298:            $this->last_smtp_transaction_id = null;
./vendor/phpmailer/phpmailer/src/SMTP.php:1300:            $this->last_smtp_transaction_id = false;
./vendor/phpmailer/phpmailer/src/SMTP.php:1301:            foreach ($this->smtp_transaction_id_patterns as $smtp_transaction_id_pattern) {
./vendor/phpmailer/phpmailer/src/SMTP.php:1303:                    $this->last_smtp_transaction_id = trim($matches[1]);
./vendor/phpmailer/phpmailer/src/SMTP.php:1309:        return $this->last_smtp_transaction_id;
./vendor/phpmailer/phpmailer/src/SMTP.php:1323:        return $this->last_smtp_transaction_id;
./vendor/phpmailer/phpmailer/src/OAuth.php:3: * PHPMailer - PHP email creation and transport class.
./vendor/phpmailer/phpmailer/src/OAuth.php:12: * @copyright 2012 - 2015 Marcus Bointon
./vendor/phpmailer/phpmailer/src/OAuth.php:13: * @copyright 2010 - 2012 Jim Jagielski
./vendor/phpmailer/phpmailer/src/OAuth.php:14: * @copyright 2004 - 2009 Andy Prevost
./vendor/phpmailer/phpmailer/src/OAuth.php:16: * @note      This program is distributed in the hope that it will be useful - WITHOUT
./vendor/phpmailer/phpmailer/src/OAuth.php:28: * OAuth - OAuth2 authentication wrapper class.
./vendor/phpmailer/phpmailer/src/OAuth.php:29: * Uses the oauth2-client package from the League of Extraordinary Packages.
./vendor/phpmailer/phpmailer/src/OAuth.php:31: * @see     http://oauth2-client.thephpleague.com
./vendor/phpmailer/phpmailer/src/OAuth.php:88:        $this->provider = $options['provider'];
./vendor/phpmailer/phpmailer/src/OAuth.php:89:        $this->oauthUserEmail = $options['userName'];
./vendor/phpmailer/phpmailer/src/OAuth.php:90:        $this->oauthClientSecret = $options['clientSecret'];
./vendor/phpmailer/phpmailer/src/OAuth.php:91:        $this->oauthClientId = $options['clientId'];
./vendor/phpmailer/phpmailer/src/OAuth.php:92:        $this->oauthRefreshToken = $options['refreshToken'];
./vendor/phpmailer/phpmailer/src/OAuth.php:112:        return $this->provider->getAccessToken(
./vendor/phpmailer/phpmailer/src/OAuth.php:113:            $this->getGrant(),
./vendor/phpmailer/phpmailer/src/OAuth.php:114:            ['refresh_token' => $this->oauthRefreshToken]
./vendor/phpmailer/phpmailer/src/OAuth.php:119:     * Generate a base64-encoded OAuth token.
./vendor/phpmailer/phpmailer/src/OAuth.php:126:        if (null === $this->oauthToken or $this->oauthToken->hasExpired()) {
./vendor/phpmailer/phpmailer/src/OAuth.php:127:            $this->oauthToken = $this->getToken();
./vendor/phpmailer/phpmailer/src/OAuth.php:132:            $this->oauthUserEmail .
./vendor/phpmailer/phpmailer/src/OAuth.php:134:            $this->oauthToken .
./vendor/phpmailer/phpmailer/src/POP3.php:3: * PHPMailer POP-Before-SMTP Authentication Class.
./vendor/phpmailer/phpmailer/src/POP3.php:12: * @copyright 2012 - 2017 Marcus Bointon
./vendor/phpmailer/phpmailer/src/POP3.php:13: * @copyright 2010 - 2012 Jim Jagielski
./vendor/phpmailer/phpmailer/src/POP3.php:14: * @copyright 2004 - 2009 Andy Prevost
./vendor/phpmailer/phpmailer/src/POP3.php:16: * @note      This program is distributed in the hope that it will be useful - WITHOUT
./vendor/phpmailer/phpmailer/src/POP3.php:24: * PHPMailer POP-Before-SMTP Authentication Class.
./vendor/phpmailer/phpmailer/src/POP3.php:25: * Specifically for PHPMailer to use for RFC1939 POP-before-SMTP authentication.
./vendor/phpmailer/phpmailer/src/POP3.php:134:     * Simple static wrapper for all-in-one POP before SMTP.
./vendor/phpmailer/phpmailer/src/POP3.php:155:        return $pop->authorise($host, $port, $timeout, $username, $password, $debug_level);
./vendor/phpmailer/phpmailer/src/POP3.php:161:     * appropriate for POP-before SMTP authorisation.
./vendor/phpmailer/phpmailer/src/POP3.php:174:        $this->host = $host;
./vendor/phpmailer/phpmailer/src/POP3.php:177:            $this->port = static::DEFAULT_PORT;
./vendor/phpmailer/phpmailer/src/POP3.php:179:            $this->port = (int) $port;
./vendor/phpmailer/phpmailer/src/POP3.php:183:            $this->tval = static::DEFAULT_TIMEOUT;
./vendor/phpmailer/phpmailer/src/POP3.php:185:            $this->tval = (int) $timeout;
./vendor/phpmailer/phpmailer/src/POP3.php:187:        $this->do_debug = $debug_level;
./vendor/phpmailer/phpmailer/src/POP3.php:188:        $this->username = $username;
./vendor/phpmailer/phpmailer/src/POP3.php:189:        $this->password = $password;
./vendor/phpmailer/phpmailer/src/POP3.php:191:        $this->errors = [];
./vendor/phpmailer/phpmailer/src/POP3.php:193:        $result = $this->connect($this->host, $this->port, $this->tval);
./vendor/phpmailer/phpmailer/src/POP3.php:195:            $login_result = $this->login($this->username, $this->password);
./vendor/phpmailer/phpmailer/src/POP3.php:197:                $this->disconnect();
./vendor/phpmailer/phpmailer/src/POP3.php:203:        $this->disconnect();
./vendor/phpmailer/phpmailer/src/POP3.php:220:        if ($this->connected) {
./vendor/phpmailer/phpmailer/src/POP3.php:233:        $this->pop_conn = fsockopen(
./vendor/phpmailer/phpmailer/src/POP3.php:244:        if (false === $this->pop_conn) {
./vendor/phpmailer/phpmailer/src/POP3.php:246:            $this->setError(
./vendor/phpmailer/phpmailer/src/POP3.php:253:        //  Increase the stream time-out
./vendor/phpmailer/phpmailer/src/POP3.php:254:        stream_set_timeout($this->pop_conn, $tval, 0);
./vendor/phpmailer/phpmailer/src/POP3.php:257:        $pop3_response = $this->getResponse();
./vendor/phpmailer/phpmailer/src/POP3.php:259:        if ($this->checkResponse($pop3_response)) {
./vendor/phpmailer/phpmailer/src/POP3.php:261:            $this->connected = true;
./vendor/phpmailer/phpmailer/src/POP3.php:280:        if (!$this->connected) {
./vendor/phpmailer/phpmailer/src/POP3.php:281:            $this->setError('Not connected to POP3 server');
./vendor/phpmailer/phpmailer/src/POP3.php:284:            $username = $this->username;
./vendor/phpmailer/phpmailer/src/POP3.php:287:            $password = $this->password;
./vendor/phpmailer/phpmailer/src/POP3.php:291:        $this->sendString("USER $username" . static::LE);
./vendor/phpmailer/phpmailer/src/POP3.php:292:        $pop3_response = $this->getResponse();
./vendor/phpmailer/phpmailer/src/POP3.php:293:        if ($this->checkResponse($pop3_response)) {
./vendor/phpmailer/phpmailer/src/POP3.php:295:            $this->sendString("PASS $password" . static::LE);
./vendor/phpmailer/phpmailer/src/POP3.php:296:            $pop3_response = $this->getResponse();
./vendor/phpmailer/phpmailer/src/POP3.php:297:            if ($this->checkResponse($pop3_response)) {
./vendor/phpmailer/phpmailer/src/POP3.php:310:        $this->sendString('QUIT');
./vendor/phpmailer/phpmailer/src/POP3.php:314:            @fclose($this->pop_conn);
./vendor/phpmailer/phpmailer/src/POP3.php:329:        $response = fgets($this->pop_conn, $size);
./vendor/phpmailer/phpmailer/src/POP3.php:330:        if ($this->do_debug >= 1) {
./vendor/phpmailer/phpmailer/src/POP3.php:331:            echo 'Server -> Client: ', $response;
./vendor/phpmailer/phpmailer/src/POP3.php:346:        if ($this->pop_conn) {
./vendor/phpmailer/phpmailer/src/POP3.php:347:            if ($this->do_debug >= 2) { //Show client messages when debug >= 2
./vendor/phpmailer/phpmailer/src/POP3.php:348:                echo 'Client -> Server: ', $string;
./vendor/phpmailer/phpmailer/src/POP3.php:351:            return fwrite($this->pop_conn, $string, strlen($string));
./vendor/phpmailer/phpmailer/src/POP3.php:359:     * Looks for for +OK or -ERR.
./vendor/phpmailer/phpmailer/src/POP3.php:368:            $this->setError("Server reported an error: $string");
./vendor/phpmailer/phpmailer/src/POP3.php:384:        $this->errors[] = $error;
./vendor/phpmailer/phpmailer/src/POP3.php:385:        if ($this->do_debug >= 1) {
./vendor/phpmailer/phpmailer/src/POP3.php:387:            foreach ($this->errors as $e) {
./vendor/phpmailer/phpmailer/src/POP3.php:401:        return $this->errors;
./vendor/phpmailer/phpmailer/src/POP3.php:414:        $this->setError(
./vendor/phpmailer/phpmailer/src/Exception.php:12: * @copyright 2012 - 2017 Marcus Bointon
./vendor/phpmailer/phpmailer/src/Exception.php:13: * @copyright 2010 - 2012 Jim Jagielski
./vendor/phpmailer/phpmailer/src/Exception.php:14: * @copyright 2004 - 2009 Andy Prevost
./vendor/phpmailer/phpmailer/src/Exception.php:16: * @note      This program is distributed in the hope that it will be useful - WITHOUT
./vendor/phpmailer/phpmailer/src/Exception.php:37:        return '<strong>' . htmlspecialchars($this->getMessage()) . "</strong><br />\n";
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3: * PHPMailer - PHP email creation and transport class.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:12: * @copyright 2012 - 2017 Marcus Bointon
./vendor/phpmailer/phpmailer/src/PHPMailer.php:13: * @copyright 2010 - 2012 Jim Jagielski
./vendor/phpmailer/phpmailer/src/PHPMailer.php:14: * @copyright 2004 - 2009 Andy Prevost
./vendor/phpmailer/phpmailer/src/PHPMailer.php:16: * @note      This program is distributed in the hope that it will be useful - WITHOUT
./vendor/phpmailer/phpmailer/src/PHPMailer.php:24: * PHPMailer - PHP email creation and transport class.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:47:    public $CharSet = 'iso-8859-1';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:50:     * The MIME Content-type of the message.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:58:     * Options: "8bit", "7bit", "binary", "base64", and "quoted-printable".
./vendor/phpmailer/phpmailer/src/PHPMailer.php:87:     * This will usually be turned into a Return-Path header by the receiver,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:89:     * If not empty, will be passed via `-f` to sendmail or as the 'MAIL FROM' value over SMTP.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:111:     * The plain-text message body.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:125:     * @see http://sprain.ch/blog/downloads/php-class-easypeasyics-create-ical-files-with-php/
./vendor/phpmailer/phpmailer/src/PHPMailer.php:154:     * Word-wrap the message body to this number of chars.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:179:     * Whether mail() uses a fully sendmail-compatible MTA.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:180:     * One which supports sendmail's "-oi -f" options.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:194:     * The hostname to use in the Message-ID header and as default HELO string.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:204:     * An ID to be used in the Message-ID header.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:209:     * @see https://tools.ietf.org/html/rfc5322#section-3.6.4
./vendor/phpmailer/phpmailer/src/PHPMailer.php:225:     * Either a single hostname or multiple semicolon-delimited hostnames.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:306:     * Options are CRAM-MD5, LOGIN, PLAIN, XOAUTH2, attempted in that order if not specified.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:335:     * * `4` Low-level data output.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:346:     * * `echo` Output plain-text as-is, appropriate for CLI
./vendor/phpmailer/phpmailer/src/PHPMailer.php:349:     * By default PHPMailer will use `echo` if run from a `cli` or `cli-server` SAPI, `html` otherwise.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:353:     * $mail->Debugoutput = function($str, $level) {echo "debug level $level; message: $str";};
./vendor/phpmailer/phpmailer/src/PHPMailer.php:356:     * Alternatively, you can pass in an instance of a PSR-3 compatible logger, though only `debug`
./vendor/phpmailer/phpmailer/src/PHPMailer.php:360:     * $mail->Debugoutput = new myPsr3Logger;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:484:     * What to put in the X-Mailer header.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:493:     * May be a callable to inject your own validator, but there are several built-in validators.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:531:     * The array of reply-to names and addresses.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:565:     * An array of reply-to names and addresses queued for validation.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:590:     * The most recent Message-ID (including angular brackets).
./vendor/phpmailer/phpmailer/src/PHPMailer.php:727:            $this->exceptions = (bool) $exceptions;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:730:        $this->Debugoutput = (strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:739:        $this->smtpClose();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:743:     * Call mail() in a safe_mode-aware fashion.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:758:        //Check overloading of mail function to avoid double-encoding
./vendor/phpmailer/phpmailer/src/PHPMailer.php:760:            $subject = $this->secureHeader($subject);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:762:            $subject = $this->encodeHeader($this->secureHeader($subject));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:765:        if (!$this->UseSendmailOptions or null === $params) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:775:     * Output debugging info via user-defined method.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:785:        if ($this->SMTPDebug <= 0) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:788:        //Is this a PSR-3 logger?
./vendor/phpmailer/phpmailer/src/PHPMailer.php:789:        if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:790:            $this->Debugoutput->debug($str);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:794:        //Avoid clash with built-in function names
./vendor/phpmailer/phpmailer/src/PHPMailer.php:795:        if (!in_array($this->Debugoutput, ['error_log', 'html', 'echo']) and is_callable($this->Debugoutput)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:796:            call_user_func($this->Debugoutput, $str, $this->SMTPDebug);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:800:        switch ($this->Debugoutput) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:806:                //Cleans up output a bit for a better looking, HTML-safe output
./vendor/phpmailer/phpmailer/src/PHPMailer.php:810:                    'UTF-8'
./vendor/phpmailer/phpmailer/src/PHPMailer.php:817:                echo gmdate('Y-m-d H:i:s'),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:840:            $this->ContentType = 'text/html';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:842:            $this->ContentType = 'text/plain';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:851:        $this->Mailer = 'smtp';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:859:        $this->Mailer = 'mail';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:870:            $this->Sendmail = '/usr/sbin/sendmail';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:872:            $this->Sendmail = $ini_sendmail_path;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:874:        $this->Mailer = 'sendmail';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:885:            $this->Sendmail = '/var/qmail/bin/qmail-inject';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:887:            $this->Sendmail = $ini_sendmail_path;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:889:        $this->Mailer = 'qmail';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:902:        return $this->addOrEnqueueAnAddress('to', $address, $name);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:915:        return $this->addOrEnqueueAnAddress('cc', $address, $name);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:928:        return $this->addOrEnqueueAnAddress('bcc', $address, $name);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:932:     * Add a "Reply-To" address.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:941:        return $this->addOrEnqueueAnAddress('Reply-To', $address, $name);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:964:            // At-sign is missing.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:966:                $this->lang('invalid_address'),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:969:            $this->setError($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:970:            $this->edebug($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:971:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:979:        if ($this->has8bitChars(substr($address, ++$pos)) and static::idnSupported()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:980:            if ('Reply-To' != $kind) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:981:                if (!array_key_exists($address, $this->RecipientsQueue)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:982:                    $this->RecipientsQueue[$address] = $params;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:987:                if (!array_key_exists($address, $this->ReplyToQueue)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:988:                    $this->ReplyToQueue[$address] = $params;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1015:        if (!in_array($kind, ['to', 'cc', 'bcc', 'Reply-To'])) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1017:                $this->lang('Invalid recipient kind'),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1019:            $this->setError($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1020:            $this->edebug($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1021:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1029:                $this->lang('invalid_address'),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1032:            $this->setError($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1033:            $this->edebug($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1034:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1040:        if ('Reply-To' != $kind) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1041:            if (!array_key_exists(strtolower($address), $this->all_recipients)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1042:                $this->{$kind}[] = [$address, $name];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1043:                $this->all_recipients[strtolower($address)] = true;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1048:            if (!array_key_exists(strtolower($address), $this->ReplyTo)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1049:                $this->ReplyTo[strtolower($address)] = [$address, $name];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1059:     * Parse and validate a string containing one or more RFC822-style comma-separated email addresses
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1075:            //Use this built-in parser if it's available
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1078:                if ('.SYNTAX-ERROR.' != $address->host) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1079:                    if (static::validateAddress($address->mailbox . '@' . $address->host)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1081:                            'name' => (property_exists($address, 'personal') ? $address->personal : ''),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1082:                            'address' => $address->mailbox . '@' . $address->host,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1135:            (!$this->has8bitChars(substr($address, ++$pos)) or !static::idnSupported()) and
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1138:                $this->lang('invalid_address'),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1140:            $this->setError($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1141:            $this->edebug($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1142:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1148:        $this->From = $address;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1149:        $this->FromName = $name;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1151:            if (empty($this->Sender)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1152:                $this->Sender = $address;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1160:     * Return the Message-ID header of the last email.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1169:        return $this->lastMessageID;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1178:     * * `php` Use PHP built-in FILTER_VALIDATE_EMAIL;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1189:     * You can also set the PHPMailer::$validator static to a callable, allowing built-in methods to use your validator.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1223:                 * @see       http://squiloople.com/2009/12/20/email-address-validation/
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1224:                 * @copyright 2009-2010 Michael Rushton
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1228:                    '/^(?!(?>(?1)"?(?>\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\[ -~]|[^"])"?(?1)){65,}@)' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1230:                    '(?>[\x01-\x08\x0B\x0C\x0E-\'*-\[\]-\x7F]|\\\[\x00-\x7F]|(?3)))*(?2)\)))+(?2))|(?2))?)' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1231:                    '([!#-\'*+\/-9=?^-~-]+|"(?>(?2)(?>[\x01-\x08\x0B\x0C\x0E-!#-\[\]-\x7F]|\\\[\x00-\x7F]))*' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1232:                    '(?2)")(?>(?1)\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1233:                    '(?>(?1)\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1234:                    '|(?!(?:.*[a-f0-9][:\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1235:                    '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1236:                    '|[1-9]?[0-9])(?>\.(?9)){3}))\])(?1)$/isD',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1243:                 * @see http://www.whatwg.org/specs/web-apps/current-work/#e-mail-state-(type=email)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1246:                    '/^[a-zA-Z0-9.!#$%&\'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1247:                    '[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1271:     * - No conversion is necessary (i.e. domain name is not an IDN, or is already in ASCII form)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1272:     * - Conversion to punycode is impossible (e.g. required PHP functions are not available)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1283:        // Verify we have required functions, CharSet, and at-sign.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1286:            !empty($this->CharSet) and
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1291:            if ($this->has8bitChars($domain) and @mb_check_encoding($domain, $this->CharSet)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1292:                $domain = mb_convert_encoding($domain, 'UTF-8', $this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1293:                //Ignore IDE complaints about this line - method signature changed in PHP 5.4
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1311:     * @return bool false on error - See the ErrorInfo property for details of the error
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1316:            if (!$this->preSend()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1320:            return $this->postSend();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1322:            $this->mailHeader = '';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1323:            $this->setError($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1324:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1341:        if ('smtp' == $this->Mailer or
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1342:            ('mail' == $this->Mailer and stripos(PHP_OS, 'WIN') === 0)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1344:            //SMTP mandates RFC-compliant line endings
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1353:            and 'mail' == $this->Mailer
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1369:            $this->error_count = 0; // Reset errors
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1370:            $this->mailHeader = '';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1372:            // Dequeue recipient and Reply-To addresses with IDN
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1373:            foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $params) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1374:                $params[1] = $this->punyencodeAddress($params[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1377:            if (count($this->to) + count($this->cc) + count($this->bcc) < 1) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1378:                throw new Exception($this->lang('provide_address'), self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1383:                $this->$address_kind = trim($this->$address_kind);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1384:                if (empty($this->$address_kind)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1387:                $this->$address_kind = $this->punyencodeAddress($this->$address_kind);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1388:                if (!static::validateAddress($this->$address_kind)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1390:                        $this->lang('invalid_address'),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1392:                        $this->$address_kind);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1393:                    $this->setError($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1394:                    $this->edebug($error_message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1395:                    if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1404:            if ($this->alternativeExists()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1405:                $this->ContentType = 'multipart/alternative';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1408:            $this->setMessageType();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1410:            if (!$this->AllowEmpty and empty($this->Body)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1411:                throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1415:            $this->Subject = trim($this->Subject);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1417:            $this->MIMEHeader = '';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1418:            $this->MIMEBody = $this->createBody();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1420:            $tempheaders = $this->MIMEHeader;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1421:            $this->MIMEHeader = $this->createHeader();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1422:            $this->MIMEHeader .= $tempheaders;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1426:            if ('mail' == $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1427:                if (count($this->to) > 0) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1428:                    $this->mailHeader .= $this->addrAppend('To', $this->to);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1430:                    $this->mailHeader .= $this->headerLine('To', 'undisclosed-recipients:;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1432:                $this->mailHeader .= $this->headerLine(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1434:                    $this->encodeHeader($this->secureHeader($this->Subject))
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1439:            if (!empty($this->DKIM_domain)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1440:                and !empty($this->DKIM_selector)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1441:                and (!empty($this->DKIM_private_string)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1442:                    or (!empty($this->DKIM_private) and file_exists($this->DKIM_private))
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1445:                $header_dkim = $this->DKIM_Add(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1446:                    $this->MIMEHeader . $this->mailHeader,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1447:                    $this->encodeHeader($this->secureHeader($this->Subject)),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1448:                    $this->MIMEBody
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1450:                $this->MIMEHeader = rtrim($this->MIMEHeader, "\r\n ") . static::$LE .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1456:            $this->setError($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1457:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1476:            switch ($this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1479:                    return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1481:                    return $this->smtpSend($this->MIMEHeader, $this->MIMEBody);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1483:                    return $this->mailSend($this->MIMEHeader, $this->MIMEBody);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1485:                    $sendMethod = $this->Mailer . 'Send';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1487:                        return $this->$sendMethod($this->MIMEHeader, $this->MIMEBody);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1490:                    return $this->mailSend($this->MIMEHeader, $this->MIMEBody);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1493:            $this->setError($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1494:            $this->edebug($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1495:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1517:        // CVE-2016-10033, CVE-2016-10045: Don't pass -f if characters will be escaped.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1518:        if (!empty($this->Sender) and self::isShellSafe($this->Sender)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1519:            if ('qmail' == $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1520:                $sendmailFmt = '%s -f%s';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1522:                $sendmailFmt = '%s -oi -f%s -t';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1525:            if ('qmail' == $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1528:                $sendmailFmt = '%s -oi -t';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1532:        $sendmail = sprintf($sendmailFmt, escapeshellcmd($this->Sendmail), $this->Sender);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1534:        if ($this->SingleTo) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1535:            foreach ($this->SingleToArray as $toAddr) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1538:                    throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1544:                $this->doCallback(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1547:                    $this->cc,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1548:                    $this->bcc,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1549:                    $this->Subject,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1551:                    $this->From,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1555:                    throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1561:                throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1566:            $this->doCallback(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1568:                $this->to,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1569:                $this->cc,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1570:                $this->bcc,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1571:                $this->Subject,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1573:                $this->From,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1577:                throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1585:     * Fix CVE-2016-10033 and CVE-2016-10045 by disallowing potentially unsafe shell characters.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1588:     * @see https://github.com/PHPMailer/PHPMailer/issues/924 CVE-2016-10045 bug report
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1596:        // Future-proof
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1610:            // Note that this does permit non-Latin alphanumeric characters based on the current locale.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1611:            if (!ctype_alnum($c) && strpos('@_-.', $c) === false) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1634:        foreach ($this->to as $toaddr) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1635:            $toArr[] = $this->addrFormat($toaddr);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1640:        //This sets the SMTP envelope sender which gets turned into a return-path header by the receiver
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1641:        if (!empty($this->Sender) and static::validateAddress($this->Sender)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1642:            //A space after `-f` is optional, but there is a long history of its presence
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1644:            //Exim docs: http://www.exim.org/exim-html-current/doc/html/spec_html/ch-the_exim_command_line.html
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1646:            //Qmail docs: http://www.qmail.org/man/man8/qmail-inject.html
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1648:            // CVE-2016-10033, CVE-2016-10045: Don't pass -f if characters will be escaped.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1649:            if (self::isShellSafe($this->Sender)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1650:                $params = sprintf('-f%s', $this->Sender);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1653:        if (!empty($this->Sender) and static::validateAddress($this->Sender)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1655:            ini_set('sendmail_from', $this->Sender);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1658:        if ($this->SingleTo and count($toArr) > 1) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1660:                $result = $this->mailPassthru($toAddr, $this->Subject, $body, $header, $params);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1661:                $this->doCallback($result, [$toAddr], $this->cc, $this->bcc, $this->Subject, $body, $this->From, []);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1664:            $result = $this->mailPassthru($to, $this->Subject, $body, $header, $params);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1665:            $this->doCallback($result, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From, []);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1671:            throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1686:        if (!is_object($this->smtp)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1687:            $this->smtp = new SMTP();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1690:        return $this->smtp;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1702:        $this->smtp = $smtp;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1704:        return $this->smtp;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1725:        if (!$this->smtpConnect($this->SMTPOptions)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1726:            throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1729:        if ('' == $this->Sender) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1730:            $smtp_from = $this->From;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1732:            $smtp_from = $this->Sender;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1734:        if (!$this->smtp->mail($smtp_from)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1735:            $this->setError($this->lang('from_failed') . $smtp_from . ' : ' . implode(',', $this->smtp->getError()));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1736:            throw new Exception($this->ErrorInfo, self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1741:        foreach ([$this->to, $this->cc, $this->bcc] as $togroup) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1743:                if (!$this->smtp->recipient($to[0])) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1744:                    $error = $this->smtp->getError();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1756:        if ((count($this->all_recipients) > count($bad_rcpt)) and !$this->smtp->data($header . $body)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1757:            throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1760:        $smtp_transaction_id = $this->smtp->getLastTransactionID();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1762:        if ($this->SMTPKeepAlive) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1763:            $this->smtp->reset();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1765:            $this->smtp->quit();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1766:            $this->smtp->close();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1770:            $this->doCallback(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1775:                $this->Subject,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1777:                $this->From,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1789:                $this->lang('recipients_failed') . $errstr,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1811:        if (null === $this->smtp) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1812:            $this->smtp = $this->getSMTPInstance();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1817:            $options = $this->SMTPOptions;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1821:        if ($this->smtp->connected()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1825:        $this->smtp->setTimeout($this->Timeout);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1826:        $this->smtp->setDebugLevel($this->SMTPDebug);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1827:        $this->smtp->setDebugOutput($this->Debugoutput);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1828:        $this->smtp->setVerp($this->do_verp);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1829:        $hosts = explode(';', $this->Host);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1835:                '/^((ssl|tls):\/\/)*([a-zA-Z0-9\.-]*|\[[a-fA-F0-9:]+\]):?([0-9]*)$/',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1839:                static::edebug($this->lang('connect_host') . ' ' . $hostentry);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1851:                static::edebug($this->lang('connect_host') . ' ' . $hostentry);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1855:            $secure = $this->SMTPSecure;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1856:            $tls = ('tls' == $this->SMTPSecure);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1857:            if ('ssl' == $hostinfo[2] or ('' == $hostinfo[2] and 'ssl' == $this->SMTPSecure)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1871:                    throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1875:            $port = $this->Port;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1880:            if ($this->smtp->connect($prefix . $host, $port, $this->Timeout, $options)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1882:                    if ($this->Helo) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1883:                        $hello = $this->Helo;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1885:                        $hello = $this->serverHostname();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1887:                    $this->smtp->hello($hello);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1893:                    if ($this->SMTPAutoTLS and $sslext and 'ssl' != $secure and $this->smtp->getServerExt('STARTTLS')) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1897:                        if (!$this->smtp->startTLS()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1898:                            throw new Exception($this->lang('connect_host'));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1901:                        $this->smtp->hello($hello);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1903:                    if ($this->SMTPAuth) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1904:                        if (!$this->smtp->authenticate(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1905:                            $this->Username,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1906:                            $this->Password,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1907:                            $this->AuthType,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1908:                            $this->oauth
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1911:                            throw new Exception($this->lang('authenticate'));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1918:                    $this->edebug($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1920:                    $this->smtp->quit();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1925:        $this->smtp->close();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1927:        if ($this->exceptions and null !== $lastexception) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1939:        if (null !== $this->smtp) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1940:            if ($this->smtp->connected()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1941:                $this->smtp->quit();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1942:                $this->smtp->close();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:1952:     * @param string $langcode  ISO 639-1 2-character language code (e.g. French is "fr")
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2000:        if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?$/', $langcode)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2004:        $lang_file = $lang_path . 'phpmailer.lang-' . $langcode . '.php';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2011:                // Overwrite language-specific strings.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2016:        $this->language = $PHPMAILER_LANG;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2028:        return $this->language;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2036:     *                     where each recipient is a 2-element indexed array with element 0 containing an address
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2046:            $addresses[] = $this->addrFormat($address);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2055:     * @param array $addr A 2-element indexed array, element 0 containing an address, element 1 containing a name like
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2063:            return $this->secureHeader($addr[0]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2066:        return $this->encodeHeader($this->secureHeader($addr[1]), 'phrase') . ' <' . $this->secureHeader(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2072:     * Word-wrap message.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2074:     * and for quoted-printable encoded messages.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2079:     * @param bool   $qp_mode Whether to run in Quoted-Printable mode
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2090:        // If utf-8 encoding is used, we will need to make sure we don't
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2092:        $is_utf8 = 'utf-8' == strtolower($this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2098:        if (substr($message, -$lelen) == static::$LE) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2099:            $message = substr($message, 0, -$lelen);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2112:                    $space_left = $length - strlen($buf) - $crlflen;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2117:                                $len = $this->utf8CharBoundary($word, $len);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2118:                            } elseif ('=' == substr($word, $len - 1, 1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2119:                                --$len;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2120:                            } elseif ('=' == substr($word, $len - 2, 1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2121:                                $len -= 2;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2138:                            $len = $this->utf8CharBoundary($word, $len);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2139:                        } elseif ('=' == substr($word, $len - 1, 1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2140:                            --$len;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2141:                        } elseif ('=' == substr($word, $len - 2, 1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2142:                            $len -= 2;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2174:     * Find the last character boundary prior to $maxLength in a utf-8
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2175:     * quoted-printable encoded string.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2178:     * @param string $encodedText utf-8 QP text
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2188:            $lastChunk = substr($encodedText, $maxLength - $lookBack, $lookBack);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2193:                $hex = substr($encodedText, $maxLength - $lookBack + $encodedCharPos + 1, 2);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2200:                        $maxLength -= $lookBack - $encodedCharPos;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2206:                    $maxLength -= $lookBack - $encodedCharPos;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2224:     * You should only do this to plain-text bodies as wrapping HTML tags may break them.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2229:        if ($this->WordWrap < 1) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2233:        switch ($this->message_type) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2238:                $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2241:                $this->Body = $this->wrapText($this->Body, $this->WordWrap);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2255:        $result .= $this->headerLine('Date', '' == $this->MessageDate ? self::rfcDate() : $this->MessageDate);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2258:        if ($this->SingleTo) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2259:            if ('mail' != $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2260:                foreach ($this->to as $toaddr) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2261:                    $this->SingleToArray[] = $this->addrFormat($toaddr);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2265:            if (count($this->to) > 0) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2266:                if ('mail' != $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2267:                    $result .= $this->addrAppend('To', $this->to);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2269:            } elseif (count($this->cc) == 0) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2270:                $result .= $this->headerLine('To', 'undisclosed-recipients:;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2274:        $result .= $this->addrAppend('From', [[trim($this->From), $this->FromName]]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2277:        if (count($this->cc) > 0) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2278:            $result .= $this->addrAppend('Cc', $this->cc);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2283:                'sendmail' == $this->Mailer or 'qmail' == $this->Mailer or 'mail' == $this->Mailer
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2285:            and count($this->bcc) > 0
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2287:            $result .= $this->addrAppend('Bcc', $this->bcc);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2290:        if (count($this->ReplyTo) > 0) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2291:            $result .= $this->addrAppend('Reply-To', $this->ReplyTo);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2295:        if ('mail' != $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2296:            $result .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject)));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2300:        // https://tools.ietf.org/html/rfc5322#section-3.6.4
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2301:        if ('' != $this->MessageID and preg_match('/^<.*@.*>$/', $this->MessageID)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2302:            $this->lastMessageID = $this->MessageID;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2304:            $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2306:        $result .= $this->headerLine('Message-ID', $this->lastMessageID);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2307:        if (null !== $this->Priority) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2308:            $result .= $this->headerLine('X-Priority', $this->Priority);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2310:        if ('' == $this->XMailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2311:            $result .= $this->headerLine(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2312:                'X-Mailer',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2316:            $myXmailer = trim($this->XMailer);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2318:                $result .= $this->headerLine('X-Mailer', $myXmailer);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2322:        if ('' != $this->ConfirmReadingTo) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2323:            $result .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2327:        foreach ($this->CustomHeader as $header) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2328:            $result .= $this->headerLine(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2330:                $this->encodeHeader(trim($header[1]))
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2333:        if (!$this->sign_key_file) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2334:            $result .= $this->headerLine('MIME-Version', '1.0');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2335:            $result .= $this->getMailMIME();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2350:        switch ($this->message_type) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2352:                $result .= $this->headerLine('Content-Type', 'multipart/related;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2353:                $result .= $this->textLine("\tboundary=\"" . $this->boundary[1] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2359:                $result .= $this->headerLine('Content-Type', 'multipart/mixed;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2360:                $result .= $this->textLine("\tboundary=\"" . $this->boundary[1] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2364:                $result .= $this->headerLine('Content-Type', 'multipart/alternative;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2365:                $result .= $this->textLine("\tboundary=\"" . $this->boundary[1] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2369:                $result .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2374:        if ('7bit' != $this->Encoding) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2377:                if ('8bit' == $this->Encoding) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2378:                    $result .= $this->headerLine('Content-Transfer-Encoding', '8bit');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2380:                // The only remaining alternatives are quoted-printable and base64, which are both 7bit compatible
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2382:                $result .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2386:        if ('mail' != $this->Mailer) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2404:        return rtrim($this->MIMEHeader . $this->mailHeader, "\n\r") . static::$LE . static::$LE . $this->MIMEBody;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2440:        $this->uniqueid = $this->generateId();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2441:        $this->boundary[1] = 'b1_' . $this->uniqueid;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2442:        $this->boundary[2] = 'b2_' . $this->uniqueid;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2443:        $this->boundary[3] = 'b3_' . $this->uniqueid;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2445:        if ($this->sign_key_file) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2446:            $body .= $this->getMailMIME() . static::$LE;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2449:        $this->setWordWrap();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2451:        $bodyEncoding = $this->Encoding;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2452:        $bodyCharSet = $this->CharSet;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2453:        //Can we do a 7-bit downgrade?
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2454:        if ('8bit' == $bodyEncoding and !$this->has8bitChars($this->Body)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2456:            //All ISO 8859, Windows codepage and UTF-8 charsets are ascii compatible up to 7-bit
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2457:            $bodyCharSet = 'us-ascii';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2460:        //change to quoted-printable transfer encoding for the body part only
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2461:        if ('base64' != $this->Encoding and static::hasLineLongerThanMax($this->Body)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2462:            $bodyEncoding = 'quoted-printable';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2465:        $altBodyEncoding = $this->Encoding;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2466:        $altBodyCharSet = $this->CharSet;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2467:        //Can we do a 7-bit downgrade?
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2468:        if ('8bit' == $altBodyEncoding and !$this->has8bitChars($this->AltBody)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2470:            //All ISO 8859, Windows codepage and UTF-8 charsets are ascii compatible up to 7-bit
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2471:            $altBodyCharSet = 'us-ascii';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2474:        //change to quoted-printable transfer encoding for the alt body part only
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2475:        if ('base64' != $altBodyEncoding and static::hasLineLongerThanMax($this->AltBody)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2476:            $altBodyEncoding = 'quoted-printable';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2479:        $mimepre = 'This is a multi-part message in MIME format.' . static::$LE;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2480:        switch ($this->message_type) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2483:                $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2484:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2486:                $body .= $this->attachAll('inline', $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2490:                $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2491:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2493:                $body .= $this->attachAll('attachment', $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2497:                $body .= $this->textLine('--' . $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2498:                $body .= $this->headerLine('Content-Type', 'multipart/related;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2499:                $body .= $this->textLine("\tboundary=\"" . $this->boundary[2] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2501:                $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, '', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2502:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2504:                $body .= $this->attachAll('inline', $this->boundary[2]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2506:                $body .= $this->attachAll('attachment', $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2510:                $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, 'text/plain', $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2511:                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2513:                $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, 'text/html', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2514:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2516:                if (!empty($this->Ical)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2517:                    $body .= $this->getBoundary($this->boundary[1], '', 'text/calendar; method=REQUEST', '');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2518:                    $body .= $this->encodeString($this->Ical, $this->Encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2521:                $body .= $this->endBoundary($this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2525:                $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, 'text/plain', $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2526:                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2528:                $body .= $this->textLine('--' . $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2529:                $body .= $this->headerLine('Content-Type', 'multipart/related;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2530:                $body .= $this->textLine("\tboundary=\"" . $this->boundary[2] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2532:                $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, 'text/html', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2533:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2535:                $body .= $this->attachAll('inline', $this->boundary[2]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2537:                $body .= $this->endBoundary($this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2541:                $body .= $this->textLine('--' . $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2542:                $body .= $this->headerLine('Content-Type', 'multipart/alternative;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2543:                $body .= $this->textLine("\tboundary=\"" . $this->boundary[2] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2545:                $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, 'text/plain', $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2546:                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2548:                $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, 'text/html', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2549:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2551:                if (!empty($this->Ical)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2552:                    $body .= $this->getBoundary($this->boundary[2], '', 'text/calendar; method=REQUEST', '');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2553:                    $body .= $this->encodeString($this->Ical, $this->Encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2555:                $body .= $this->endBoundary($this->boundary[2]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2557:                $body .= $this->attachAll('attachment', $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2561:                $body .= $this->textLine('--' . $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2562:                $body .= $this->headerLine('Content-Type', 'multipart/alternative;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2563:                $body .= $this->textLine("\tboundary=\"" . $this->boundary[2] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2565:                $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, 'text/plain', $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2566:                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2568:                $body .= $this->textLine('--' . $this->boundary[2]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2569:                $body .= $this->headerLine('Content-Type', 'multipart/related;');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2570:                $body .= $this->textLine("\tboundary=\"" . $this->boundary[3] . '"');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2572:                $body .= $this->getBoundary($this->boundary[3], $bodyCharSet, 'text/html', $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2573:                $body .= $this->encodeString($this->Body, $bodyEncoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2575:                $body .= $this->attachAll('inline', $this->boundary[3]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2577:                $body .= $this->endBoundary($this->boundary[2]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2579:                $body .= $this->attachAll('attachment', $this->boundary[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2584:                $this->Encoding = $bodyEncoding;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2585:                $body .= $this->encodeString($this->Body, $this->Encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2589:        if ($this->isError()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2591:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2592:                throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2594:        } elseif ($this->sign_key_file) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2597:                    throw new Exception($this->lang('extension_missing') . 'openssl');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2602:                    throw new Exception($this->lang('signing') . ' Could not write temp file');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2606:                if (empty($this->sign_extracerts_file)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2610:                        'file://' . realpath($this->sign_cert_file),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2611:                        ['file://' . realpath($this->sign_key_file), $this->sign_key_pass],
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2618:                        'file://' . realpath($this->sign_cert_file),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2619:                        ['file://' . realpath($this->sign_key_file), $this->sign_key_pass],
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2622:                        $this->sign_extracerts_file
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2631:                    $this->MIMEHeader .= $parts[0] . static::$LE . static::$LE;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2635:                    throw new Exception($this->lang('signing') . openssl_error_string());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2639:                if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2662:            $charSet = $this->CharSet;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2665:            $contentType = $this->ContentType;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2668:            $encoding = $this->Encoding;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2670:        $result .= $this->textLine('--' . $boundary);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2671:        $result .= sprintf('Content-Type: %s; charset=%s', $contentType, $charSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2675:            $result .= $this->headerLine('Content-Transfer-Encoding', $encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2691:        return static::$LE . '--' . $boundary . '--' . static::$LE;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2701:        if ($this->alternativeExists()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2704:        if ($this->inlineImageExists()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2707:        if ($this->attachmentExists()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2710:        $this->message_type = implode('_', $type);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2711:        if ('' == $this->message_type) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2712:            //The 'plain' message_type refers to the message having a single body element, not that it is plain-text
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2713:            $this->message_type = 'plain';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2744:     * Never use a user-supplied path to a file!
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2761:                throw new Exception($this->lang('file_access') . $path, self::STOP_CONTINUE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2774:            $this->attachment[] = [
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2785:            $this->setError($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2786:            $this->edebug($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2787:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2804:        return $this->attachment;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2824:        foreach ($this->attachment as $attachment) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2852:                $mime[] = sprintf('--%s%s', $boundary, static::$LE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2856:                        'Content-Type: %s; name="%s"%s',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2858:                        $this->encodeHeader($this->secureHeader($name)),
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2863:                        'Content-Type: %s%s',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2870:                    $mime[] = sprintf('Content-Transfer-Encoding: %s%s', $encoding, static::$LE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2874:                    $mime[] = sprintf('Content-ID: <%s>%s', $cid, static::$LE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2880:                // Allow for bypassing the Content-Disposition header totally
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2882:                    $encoded_name = $this->encodeHeader($this->secureHeader($name));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2885:                            'Content-Disposition: %s; filename="%s"%s',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2893:                                'Content-Disposition: %s; filename=%s%s',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2900:                                'Content-Disposition: %s%s',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2912:                    $mime[] = $this->encodeString($string, $encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2914:                    $mime[] = $this->encodeFile($path, $encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2916:                if ($this->isError()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2923:        $mime[] = sprintf('--%s--%s', $boundary, static::$LE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2933:     * @param string $encoding The encoding to use; one of 'base64', '7bit', '8bit', 'binary', 'quoted-printable'
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2943:                throw new Exception($this->lang('file_open') . $path, self::STOP_CONTINUE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2947:                throw new Exception($this->lang('file_open') . $path, self::STOP_CONTINUE);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2949:            $file_buffer = $this->encodeString($file_buffer, $encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2953:            $this->setError($exc->getMessage());
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2964:     * @param string $encoding The encoding to use; one of 'base64', '7bit', '8bit', 'binary', 'quoted-printable
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2983:                if (substr($encoded, -(strlen(static::$LE))) != static::$LE) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2990:            case 'quoted-printable':
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2991:                $encoded = $this->encodeQP($str);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:2994:                $this->setError($this->lang('encoding') . $encoding);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3016:                if (!preg_match('/[\200-\377]/', $str)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3019:                    if (($str == $encoded) and !preg_match('/[^A-Za-z0-9!#$%&\'*+\/=?^_`{|}~ -]/', $str)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3025:                $matchcount = preg_match_all('/[^\040\041\043-\133\135-\176]/', $str, $matches);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3033:                $matchcount += preg_match_all('/[\000-\010\013\014\016-\037\177-\377]/', $str, $matches);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3039:        $lengthsub = 'mail' == $this->Mailer ? 13 : 0;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3040:        $maxlen = static::STD_LINE_LENGTH - $lengthsub;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3047:            // - shorten to avoid mail() corruption
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3048:            // - Q/B encoding char overhead ("` =?<charset>?[QB]?<content>?=`")
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3049:            // - charset name length
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3050:            $maxlen = static::STD_LINE_LENGTH - $lengthsub - 8 - strlen($this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3051:            if ($this->hasMultiBytes($str)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3054:                $encoded = $this->base64EncodeWrapMB($str, "\n");
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3057:                $maxlen -= $maxlen % 4;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3060:            $encoded = preg_replace('/^(.*)$/m', ' =?' . $this->CharSet . "?$encoding?\\1?=", $encoded);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3062:            //1 or more chars need encoding, use Q-encode
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3064:            //Recalc max line length for Q encoding - see comments on B encode
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3065:            $maxlen = static::STD_LINE_LENGTH - $lengthsub - 8 - strlen($this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3066:            $encoded = $this->encodeQ($str, $position);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3067:            $encoded = $this->wrapText($encoded, $maxlen, true);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3069:            $encoded = preg_replace('/^(.*)$/m', ' =?' . $this->CharSet . "?$encoding?\\1?=", $encoded);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3072:            $encoded = trim($this->wrapText($str, $maxlen, false));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3088:     * Check if a string contains multi-byte characters.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3090:     * @param string $str multi-byte text to wrap encode
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3097:            return strlen($str) > mb_strlen($str, $this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3105:     * Does a string contain any 8-bit chars (in any charset)?
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3113:        return (bool) preg_match('/[\x80-\xFF]/', $text);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3121:     * @see http://www.php.net/manual/en/function.mb-encode-mimeheader.php#60283
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3123:     * @param string $str       multi-byte text to wrap encode
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3124:     * @param string $linebreak string to use as linefeed/end-of-line
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3130:        $start = '=?' . $this->CharSet . '?B?';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3137:        $mb_length = mb_strlen($str, $this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3139:        $length = 75 - strlen($start) - strlen($end);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3140:        // Average multi-byte ratio
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3148:                $offset = $avgLength - $lookBack;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3149:                $chunk = mb_substr($str, $i, $offset, $this->CharSet);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3157:        return substr($encoded, 0, -strlen($linebreak));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3161:     * Encode a string in quoted-printable format.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3176:     * @see http://tools.ietf.org/html/rfc2047#section-4.2
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3191:                $pattern = '^A-Za-z0-9!*+\/ -';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3206:                $pattern = '\000-\011\013\014\016-\037\075\077\137\177-\377' . $pattern;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3212:            // so as to avoid double-encoding
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3228:     * Add a string or binary attachment (non-filesystem).
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3250:        $this->attachment[] = [
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3269:     * Never use a user-supplied path to a file!
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3284:            $this->setError($this->lang('file_access') . $path);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3300:        $this->attachment[] = [
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3326:     * @param string $type        MIME type - will be used in preference to any automatically derived type
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3345:        $this->attachment[] = [
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3368:        foreach ($this->attachment as $attachment) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3384:        foreach ($this->attachment as $attachment) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3394:     * Check if an attachment (non-inline) is present.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3400:        foreach ($this->attachment as $attachment) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3416:        return !empty($this->AltBody);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3426:        $this->RecipientsQueue = array_filter(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3427:            $this->RecipientsQueue,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3439:        foreach ($this->to as $to) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3440:            unset($this->all_recipients[strtolower($to[0])]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3442:        $this->to = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3443:        $this->clearQueuedAddresses('to');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3451:        foreach ($this->cc as $cc) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3452:            unset($this->all_recipients[strtolower($cc[0])]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3454:        $this->cc = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3455:        $this->clearQueuedAddresses('cc');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3463:        foreach ($this->bcc as $bcc) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3464:            unset($this->all_recipients[strtolower($bcc[0])]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3466:        $this->bcc = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3467:        $this->clearQueuedAddresses('bcc');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3475:        $this->ReplyTo = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3476:        $this->ReplyToQueue = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3484:        $this->to = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3485:        $this->cc = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3486:        $this->bcc = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3487:        $this->all_recipients = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3488:        $this->RecipientsQueue = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3496:        $this->attachment = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3504:        $this->CustomHeader = [];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3514:        ++$this->error_count;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3515:        if ('smtp' == $this->Mailer and null !== $this->smtp) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3516:            $lasterror = $this->smtp->getError();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3518:                $msg .= $this->lang('smtp_error') . $lasterror['error'];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3530:        $this->ErrorInfo = $msg;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3556:        if (!empty($this->Hostname)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3557:            $result = $this->Hostname;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3616:        if (count($this->language) < 1) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3617:            $this->setLanguage('en'); // set the default language
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3620:        if (array_key_exists($key, $this->language)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3625:                return $this->language[$key] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3628:            return $this->language[$key];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3642:        return $this->error_count > 0;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3657:            $this->CustomHeader[] = explode(':', $name, 2);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3659:            $this->CustomHeader[] = [$name, $value];
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3670:        return $this->CustomHeader;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3675:     * Automatically inlines images and creates a plain-text version by converting the HTML,
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3681:     * Converts data-uri images into embedded attachments.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3695:            if (strlen($basedir) > 1 && '/' != substr($basedir, -1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3711:                    //Hash the decoded data, not the URL so that the same data-URI image used in multiple places
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3715:                    if (!$this->cidExists($cid)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3716:                        $this->addStringEmbeddedImage($data, $cid, 'embed' . $imgindex, 'base64', $match[1]);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3732:                    and !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', $url)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3740:                    if (strlen($basedir) > 1 and '/' != substr($basedir, -1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3743:                    if (strlen($directory) > 1 and '/' != substr($directory, -1)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3746:                    if ($this->addEmbeddedImage(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3763:        $this->isHTML(true);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3764:        // Convert all message body line breaks to LE, makes quoted-printable encoding work much better
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3765:        $this->Body = static::normalizeBreaks($message);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3766:        $this->AltBody = static::normalizeBreaks($this->html2text($message, $advanced));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3767:        if (!$this->alternativeExists()) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3768:            $this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.'
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3772:        return $this->Body;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3778:     * Note - older versions of this function used a bundled advanced converter
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3784:     * $plain = $mail->html2text($html);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3786:     * $plain = $mail->html2text($html, function($html) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3788:     *     return $converter->get_text();
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3807:            $this->CharSet
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3823:            'hqx' => 'application/mac-binhex40',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3824:            'cpt' => 'application/mac-compactpro',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3828:            'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3829:            'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3830:            'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3831:            'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3832:            'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3833:            'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3834:            'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3835:            'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3836:            'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3837:            'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3838:            'class' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3839:            'dll' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3840:            'dms' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3841:            'exe' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3842:            'lha' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3843:            'lzh' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3844:            'psd' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3845:            'sea' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3846:            'so' => 'application/octet-stream',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3855:            'xls' => 'application/vnd.ms-excel',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3856:            'ppt' => 'application/vnd.ms-powerpoint',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3859:            'dcr' => 'application/x-director',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3860:            'dir' => 'application/x-director',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3861:            'dxr' => 'application/x-director',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3862:            'dvi' => 'application/x-dvi',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3863:            'gtar' => 'application/x-gtar',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3864:            'php3' => 'application/x-httpd-php',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3865:            'php4' => 'application/x-httpd-php',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3866:            'php' => 'application/x-httpd-php',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3867:            'phtml' => 'application/x-httpd-php',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3868:            'phps' => 'application/x-httpd-php-source',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3869:            'swf' => 'application/x-shockwave-flash',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3870:            'sit' => 'application/x-stuffit',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3871:            'tar' => 'application/x-tar',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3872:            'tgz' => 'application/x-tar',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3881:            'aif' => 'audio/x-aiff',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3882:            'aifc' => 'audio/x-aiff',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3883:            'aiff' => 'audio/x-aiff',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3884:            'ram' => 'audio/x-pn-realaudio',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3885:            'rm' => 'audio/x-pn-realaudio',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3886:            'rpm' => 'audio/x-pn-realaudio-plugin',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3887:            'ra' => 'audio/x-realaudio',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3888:            'wav' => 'audio/x-wav',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3917:            'rv' => 'video/vnd.rn-realvideo',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3918:            'avi' => 'video/x-msvideo',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3919:            'movie' => 'video/x-sgi-movie',
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3926:        return 'application/octet-stream';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3931:     * Defaults to 'application/octet-stream', i.e.. arbitrary binary data.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3950:     * Multi-byte-safe pathinfo replacement.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3951:     * Drop-in replacement for pathinfo(), but multibyte- and cross-platform-safe.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:3999:     * You should avoid this function - it's more verbose, less efficient, more error-prone and
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4002:     * `$mail->set('SMTPSecure', 'tls');`
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4004:     * `$mail->SMTPSecure = 'tls';`.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4014:            $this->$name = $value;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4018:        $this->setError($this->lang('variable_set') . $name);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4090:        $this->sign_cert_file = $cert_filename;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4091:        $this->sign_key_file = $key_filename;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4092:        $this->sign_key_pass = $key_pass;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4093:        $this->sign_extracerts_file = $extracerts_filename;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4097:     * Quoted-Printable-encode a DKIM header.
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4131:            if ($this->exceptions) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4132:                throw new Exception($this->lang('extension_missing') . 'openssl');
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4137:        $privKeyStr = !empty($this->DKIM_private_string) ?
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4138:            $this->DKIM_private_string :
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4139:            file_get_contents($this->DKIM_private);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4140:        if ('' != $this->DKIM_passphrase) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4141:            $privKey = openssl_pkey_get_private($privKeyStr, $this->DKIM_passphrase);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4160:     * @see    https://tools.ietf.org/html/rfc6376#section-3.4.2
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4171:        //@see https://tools.ietf.org/html/rfc5322#section-2.2
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4183:            //Lower-case header name
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4187:            //RFC6376 is slightly unclear here - it says to delete space at the *end* of each value
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4202:     * @see    https://tools.ietf.org/html/rfc6376#section-3.4.3
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4231:        $DKIMsignatureType = 'rsa-sha256'; // Signature & hash algorithms
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4234:        $DKIMtime = time(); // Signature Timestamp = seconds since 00:00:00 - Jan 1, 1970 (UTC time zone)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4259:        $from = str_replace('|', '=7C', $this->DKIM_QP($from_header));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4260:        $to = str_replace('|', '=7C', $this->DKIM_QP($to_header));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4261:        $date = str_replace('|', '=7C', $this->DKIM_QP($date_header));
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4265:            $this->DKIM_QP($subject_header)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4266:        ); // Copied header fields (dkim-quoted-printable)
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4267:        $body = $this->DKIM_BodyC($body);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4269:        $DKIMb64 = base64_encode(pack('H*', hash('sha256', $body))); // Base64 of packed binary SHA-256 hash of body
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4270:        if ('' == $this->DKIM_identity) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4273:            $ident = ' i=' . $this->DKIM_identity . ';';
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4275:        $dkimhdrs = 'DKIM-Signature: v=1; a=' .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4279:            $this->DKIM_selector .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4283:            "\td=" . $this->DKIM_domain . ';' . $ident . "\r\n" .
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4290:        $toSign = $this->DKIM_HeaderC(
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4297:        $signed = $this->DKIM_Sign($toSign);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4323:        return $this->to;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4334:        return $this->cc;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4345:        return $this->bcc;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4356:        return $this->ReplyTo;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4367:        return $this->all_recipients;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4384:        if (!empty($this->action_function) and is_callable($this->action_function)) {
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4385:            call_user_func($this->action_function, $isSent, $to, $cc, $bcc, $subject, $body, $from, $extra);
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4396:        return $this->oauth;
./vendor/phpmailer/phpmailer/src/PHPMailer.php:4406:        $this->oauth = $oauth;
./vendor/phpmailer/phpmailer/language/phpmailer.lang-be.php:9:$PHPMAILER_LANG['connect_host']         = 'Памылка SMTP: нельга ўстанавіць сувязь з SMTP-серверам.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-be.php:20:$PHPMAILER_LANG['mailer_not_supported'] = ' - паштовы сервер не падтрымліваецца.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-be.php:23:$PHPMAILER_LANG['smtp_connect_failed']  = 'Памылка сувязі з SMTP-серверам.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fi.php:8:$PHPMAILER_LANG['authenticate']         = 'SMTP-virhe: käyttäjätunnistus epäonnistui.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fi.php:9:$PHPMAILER_LANG['connect_host']         = 'SMTP-virhe: yhteys palvelimeen ei onnistu.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fi.php:10:$PHPMAILER_LANG['data_not_accepted']    = 'SMTP-virhe: data on virheellinen.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fi.php:17:$PHPMAILER_LANG['instantiate']          = 'mail-funktion luonti epäonnistui.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fi.php:21:$PHPMAILER_LANG['recipients_failed']    = 'SMTP-virhe: seuraava vastaanottaja osoite on virheellinen.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ka.php:17:$PHPMAILER_LANG['provide_address']      = 'გთხოვთ მიუთითოთ ერთი ადრესატის e-mail მისამართი მაინც.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ka.php:18:$PHPMAILER_LANG['mailer_not_supported'] = ' - საფოსტო სერვერის მხარდაჭერა არ არის.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ka.php:21:$PHPMAILER_LANG['invalid_address']      = 'არ გაიგზავნა, e-mail მისამართის არასწორი ფორმატი: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-gl.php:18:$PHPMAILER_LANG['invalid_address']      = 'Non puido envia-lo correo: dirección de email inválida: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:7:$PHPMAILER_LANG['authenticate']         = 'SMTP-Fehler: Authentifizierung fehlgeschlagen.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:8:$PHPMAILER_LANG['connect_host']         = 'SMTP-Fehler: Konnte keine Verbindung zum SMTP-Host herstellen.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:9:$PHPMAILER_LANG['data_not_accepted']    = 'SMTP-Fehler: Daten werden nicht akzeptiert.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:10:$PHPMAILER_LANG['empty_message']        = 'E-Mail-Inhalt ist leer.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:16:$PHPMAILER_LANG['instantiate']          = 'Mail-Funktion konnte nicht initialisiert werden.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:20:$PHPMAILER_LANG['recipients_failed']    = 'SMTP-Fehler: Die folgenden Empfänger sind nicht korrekt: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:22:$PHPMAILER_LANG['smtp_connect_failed']  = 'Verbindung zum SMTP-Server fehlgeschlagen.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-de.php:23:$PHPMAILER_LANG['smtp_error']           = 'Fehler vom SMTP-Server: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-bg.php:19:$PHPMAILER_LANG['mailer_not_supported'] = ' - пощенски сървър не се поддържа.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-uk.php:18:$PHPMAILER_LANG['provide_address']      = 'Будь-ласка, введіть хоча б одну адресу e-mail отримувача.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-uk.php:19:$PHPMAILER_LANG['mailer_not_supported'] = ' - поштовий сервер не підтримується.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-uk.php:22:$PHPMAILER_LANG['invalid_address']      = 'Не відправлено, невірний формат адреси e-mail: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-uk.php:24:$PHPMAILER_LANG['smtp_connect_failed']  = 'Помилка з\'єднання із SMTP-сервером';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-uk.php:25:$PHPMAILER_LANG['smtp_error']           = 'Помилка SMTP-сервера: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-el.php:8:$PHPMAILER_LANG['connect_host']         = 'SMTP Σφάλμα: Αδυναμία σύνδεσης στον SMTP-Host.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-el.php:10:$PHPMAILER_LANG['empty_message']        = 'Το E-Mail δεν έχει περιεχόμενο .';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-el.php:11:$PHPMAILER_LANG['encoding']             = 'Αγνωστο Encoding-Format: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-el.php:19:$PHPMAILER_LANG['provide_address']      = 'Παρακαλούμε δώστε τουλάχιστον μια e-mail διεύθυνση παραλήπτη.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sv.php:9:$PHPMAILER_LANG['connect_host']         = 'SMTP fel: Kunde inte ansluta till SMTP-server.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sv.php:12:$PHPMAILER_LANG['encoding']             = 'Okänt encode-format: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sv.php:17:$PHPMAILER_LANG['instantiate']          = 'Kunde inte initiera e-postfunktion.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sv.php:19:$PHPMAILER_LANG['provide_address']      = 'Du måste ange minst en mottagares e-postadress.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ms.php:16:$PHPMAILER_LANG['from_failed']          = 'Berikut merupakan ralat dari alamat e-mel: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ms.php:17:$PHPMAILER_LANG['instantiate']          = 'Tidak dapat memberi contoh fungsi e-mel.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ms.php:20:$PHPMAILER_LANG['provide_address']      = 'Anda perlu menyediakan sekurang-kurangnya satu alamat e-mel penerima.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ms.php:21:$PHPMAILER_LANG['recipients_failed']    = 'Ralat SMTP: Penerima e-mel berikut telah gagal: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fo.php:5: * @author Dávur Sørensen <http://www.profo-webdesign.dk>
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fo.php:20:$PHPMAILER_LANG['provide_address']      = 'Tú skal uppgeva minst móttakara-emailadressu(r).';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-fr.php:5: * Some French punctuation requires a thin non-breaking space (U+202F) character before it,
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ru.php:18:$PHPMAILER_LANG['provide_address']      = 'Пожалуйста, введите хотя бы один адрес e-mail получателя.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ru.php:24:$PHPMAILER_LANG['smtp_connect_failed']  = 'Ошибка соединения с SMTP-сервером';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ru.php:25:$PHPMAILER_LANG['smtp_error']           = 'Ошибка SMTP-сервера: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-am.php:8:$PHPMAILER_LANG['authenticate']         = 'SMTP -ի սխալ: չհաջողվեց ստուգել իսկությունը.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-am.php:9:$PHPMAILER_LANG['connect_host']         = 'SMTP -ի սխալ: չհաջողվեց կապ հաստատել SMTP սերվերի հետ.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-am.php:10:$PHPMAILER_LANG['data_not_accepted']    = 'SMTP -ի սխալ: տվյալները ընդունված չեն.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-am.php:20:$PHPMAILER_LANG['provide_address']      = 'Անհրաժեշտ է տրամադրել գոնե մեկ ստացողի e-mail հասցե.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-am.php:21:$PHPMAILER_LANG['recipients_failed']    = 'SMTP -ի սխալ: չի հաջողվել ուղարկել հետևյալ ստացողների հասցեներին: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-am.php:23:$PHPMAILER_LANG['smtp_connect_failed']  = 'SMTP -ի connect() ֆունկցիան չի հաջողվել';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-nl.php:8:$PHPMAILER_LANG['authenticate']         = 'SMTP-fout: authenticatie mislukt.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-nl.php:9:$PHPMAILER_LANG['connect_host']         = 'SMTP-fout: kon niet verbinden met SMTP-host.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-nl.php:10:$PHPMAILER_LANG['data_not_accepted']    = 'SMTP-fout: data niet geaccepteerd.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-nl.php:21:$PHPMAILER_LANG['recipients_failed']    = 'SMTP-fout: de volgende ontvangers zijn mislukt: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-nl.php:24:$PHPMAILER_LANG['smtp_error']           = 'SMTP-serverfout: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-az.php:12:$PHPMAILER_LANG['encoding']             = 'Qeyri-müəyyən kodlaşdırma: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-az.php:18:$PHPMAILER_LANG['invalid_address']      = 'Düzgün olmayan e-mail adresi: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-az.php:19:$PHPMAILER_LANG['mailer_not_supported'] = ' - e-mail kitabxanası dəstəklənmir.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-az.php:20:$PHPMAILER_LANG['provide_address']      = 'Ən azı bir e-mail adresi daxil edilməlidir.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-et.php:17:$PHPMAILER_LANG['from_failed']          = 'Järgnev saatja e-posti aadress on vigane: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-et.php:19:$PHPMAILER_LANG['invalid_address']      = 'Saatmine peatatud, e-posti address vigane: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-et.php:20:$PHPMAILER_LANG['provide_address']      = 'Te peate määrama vähemalt ühe saaja e-posti aadressi.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-et.php:22:$PHPMAILER_LANG['recipients_failed']    = 'SMTP Viga: Järgnevate saajate e-posti aadressid on vigased: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-tr.php:21:$PHPMAILER_LANG['instantiate']          = 'Örnek e-posta fonksiyonu oluşturulamadı.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-tr.php:22:$PHPMAILER_LANG['invalid_address']      = 'Geçersiz e-posta adresi: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-tr.php:23:$PHPMAILER_LANG['mailer_not_supported'] = ' e-posta kütüphanesi desteklenmiyor.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-tr.php:24:$PHPMAILER_LANG['provide_address']      = 'En az bir alıcı e-posta adresi belirtmelisiniz.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hu.php:5: * @author @dominicus-75
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hu.php:9:$PHPMAILER_LANG['connect_host']         = 'SMTP hiba: nem lehet kapcsolódni az SMTP-szerverhez.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hu.php:19:$PHPMAILER_LANG['mailer_not_supported'] = ' a mailer-osztály nem támogatott.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hu.php:23:$PHPMAILER_LANG['smtp_connect_failed']  = 'Hiba az SMTP-kapcsolatban.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hu.php:24:$PHPMAILER_LANG['smtp_error']           = 'SMTP-szerver hiba: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-da.php:12:$PHPMAILER_LANG['encoding']             = 'Ukendt encode-format: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hr.php:16:$PHPMAILER_LANG['from_failed']          = 'SMTP Greška: Slanje s navedenih e-mail adresa nije uspjelo: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hr.php:17:$PHPMAILER_LANG['recipients_failed']    = 'SMTP Greška: Slanje na navedenih e-mail adresa nije uspjelo: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-hr.php:19:$PHPMAILER_LANG['invalid_address']      = 'E-mail nije poslan. Neispravna e-mail adresa: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sl.php:11:$PHPMAILER_LANG['empty_message']        = 'E-poštno sporočilo nima vsebine.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sl.php:16:$PHPMAILER_LANG['from_failed']          = 'Neveljaven e-naslov pošiljatelja: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-sl.php:18:$PHPMAILER_LANG['invalid_address']      = 'E-poštno sporočilo ni bilo poslano. E-naslov je neveljaven: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-pt_br.php:21:$PHPMAILER_LANG['invalid_address']      = 'Endereço de e-mail inválido: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-pt.php:11:$PHPMAILER_LANG['empty_message']        = 'A mensagem no e-mail está vazia.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-pt.php:18:$PHPMAILER_LANG['invalid_address']      = 'Não foi enviado nenhum e-mail para o endereço de e-mail inválido: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-pt.php:20:$PHPMAILER_LANG['provide_address']      = 'Tem de fornecer pelo menos um endereço como destinatário do e-mail.';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ba.php:16:$PHPMAILER_LANG['from_failed']          = 'SMTP Greška: Slanje sa navedenih e-mail adresa nije uspjelo: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ba.php:17:$PHPMAILER_LANG['recipients_failed']    = 'SMTP Greška: Slanje na navedene e-mail adrese nije uspjelo: ';
./vendor/phpmailer/phpmailer/language/phpmailer.lang-ba.php:19:$PHPMAILER_LANG['invalid_address']      = 'E-mail nije poslan. Neispravna e-mail adresa: ';
./vendor/phpmailer/phpmailer/SECURITY.md:3:Please disclose any vulnerabilities found responsibly - report any security problems found to the maintainers privately.
./vendor/phpmailer/phpmailer/SECURITY.md:5:PHPMailer versions prior to 5.2.24 (released July 26th 2017) have an XSS vulnerability in one of the code examples, [CVE-2017-11503](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-11503). The `code_generator.phps` example did not filter user input prior to output. This file is distributed with a `.phps` extension, so it it not normally executable unless it is explicitly renamed, so it is safe by default. There was also an undisclosed potential XSS vulnerability in the default exception handler (unused by default). Patches for both issues kindly provided by Patrick Monnerat of the Fedora Project.
./vendor/phpmailer/phpmailer/SECURITY.md:7:PHPMailer versions prior to 5.2.22 (released January 9th 2017) have a local file disclosure vulnerability, [CVE-2017-5223](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5223). If content passed into `msgHTML()` is sourced from unfiltered user input, relative paths can map to absolute local file paths and added as attachments. Also note that `addAttachment` (just like `file_get_contents`, `passthru`, `unlink`, etc) should not be passed user-sourced params either! Reported by Yongxiang Li of Asiasecurity.
./vendor/phpmailer/phpmailer/SECURITY.md:9:PHPMailer versions prior to 5.2.20 (released December 28th 2016) are vulnerable to [CVE-2016-10045](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10045) a remote code execution vulnerability, responsibly reported by [Dawid Golunski](https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10045-Vuln-Patch-Bypass.html), and patched by Paul Buonopane (@Zenexer).
./vendor/phpmailer/phpmailer/SECURITY.md:11:PHPMailer versions prior to 5.2.18 (released December 2016) are vulnerable to [CVE-2016-10033](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033) a remote code execution vulnerability, responsibly reported by [Dawid Golunski](http://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html).
./vendor/phpmailer/phpmailer/SECURITY.md:13:PHPMailer versions prior to 5.2.14 (released November 2015) are vulnerable to [CVE-2015-8476](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8476) an SMTP CRLF injection bug permitting arbitrary message sending.
./vendor/phpmailer/phpmailer/SECURITY.md:15:PHPMailer versions prior to 5.2.10 (released May 2015) are vulnerable to [CVE-2008-5619](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-5619), a remote code execution vulnerability in the bundled html2text library. This file was removed in 5.2.10, so if you are using a version prior to that and make use of the html2text function, it's vitally important that you upgrade and remove this file.
./vendor/phpmailer/phpmailer/SECURITY.md:17:PHPMailer versions prior to 2.0.7 and 2.2.1 are vulnerable to [CVE-2012-0796](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0796), an email header injection attack.
./vendor/phpmailer/phpmailer/SECURITY.md:19:Joomla 1.6.0 uses PHPMailer in an unsafe way, allowing it to reveal local file paths, reported in [CVE-2011-3747](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3747).
./vendor/phpmailer/phpmailer/SECURITY.md:21:PHPMailer didn't sanitise the `$lang_path` parameter in `SetLanguage`. This wasn't a problem in itself, but some apps (PHPClassifieds, ATutor) also failed to sanitise user-provided parameters passed to it, permitting semi-arbitrary local file inclusion, reported in [CVE-2010-4914](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4914), [CVE-2007-2021](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-2021) and [CVE-2006-5734](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2006-5734).
./vendor/phpmailer/phpmailer/SECURITY.md:23:PHPMailer 1.7.2 and earlier contained a possible DDoS vulnerability reported in [CVE-2005-1807](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2005-1807).
./vendor/phpmailer/phpmailer/SECURITY.md:25:PHPMailer 1.7 and earlier (June 2003) have a possible vulnerability in the `SendmailSend` method where shell commands may not be sanitised. Reported in [CVE-2007-3215](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-3215).
./vendor/phpmailer/phpmailer/README.md:3:# PHPMailer - A full-featured email creation and transfer class for PHP
./vendor/phpmailer/phpmailer/README.md:5:Build status: [![Build Status](https://travis-ci.org/PHPMailer/PHPMailer.svg)](https://travis-ci.org/PHPMailer/PHPMailer)
./vendor/phpmailer/phpmailer/README.md:6:[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/PHPMailer/PHPMailer/badges/quality-score.png?s=3758e21d279becdf847a557a56a3ed16dfec9d5d)](https://scrutinizer-ci.com/g/PHPMailer/PHPMailer/)
./vendor/phpmailer/phpmailer/README.md:7:[![Code Coverage](https://scrutinizer-ci.com/g/PHPMailer/PHPMailer/badges/coverage.png?s=3fe6ca5fe8cd2cdf96285756e42932f7ca256962)](https://scrutinizer-ci.com/g/PHPMailer/PHPMailer/)
./vendor/phpmailer/phpmailer/README.md:12:- Probably the world's most popular code for sending email from PHP!
./vendor/phpmailer/phpmailer/README.md:13:- Used by many open-source projects: WordPress, Drupal, 1CRM, SugarCRM, Yii, Joomla! and many more
./vendor/phpmailer/phpmailer/README.md:14:- Integrated SMTP support - send without a local mail server
./vendor/phpmailer/phpmailer/README.md:15:- Send emails with multiple To, CC, BCC and Reply-to addresses
./vendor/phpmailer/phpmailer/README.md:16:- Multipart/alternative emails for mail clients that do not read HTML email
./vendor/phpmailer/phpmailer/README.md:17:- Add attachments, including inline
./vendor/phpmailer/phpmailer/README.md:18:- Support for UTF-8 content and 8bit, base64, binary, and quoted-printable encodings
./vendor/phpmailer/phpmailer/README.md:19:- SMTP authentication with LOGIN, PLAIN, CRAM-MD5 and XOAUTH2 mechanisms over SSL and SMTP+STARTTLS transports
./vendor/phpmailer/phpmailer/README.md:20:- Validates email addresses automatically
./vendor/phpmailer/phpmailer/README.md:21:- Protect against header injection attacks
./vendor/phpmailer/phpmailer/README.md:22:- Error messages in 47 languages!
./vendor/phpmailer/phpmailer/README.md:23:- DKIM and S/MIME signing support
./vendor/phpmailer/phpmailer/README.md:24:- Compatible with PHP 5.5 and later
./vendor/phpmailer/phpmailer/README.md:25:- Namespaced to prevent name clashes
./vendor/phpmailer/phpmailer/README.md:26:- Much more!
./vendor/phpmailer/phpmailer/README.md:29:Many PHP developers utilize email in their code. The only PHP function that supports this is the `mail()` function. However, it does not provide any assistance for making use of popular features such as HTML-based emails and attachments.
./vendor/phpmailer/phpmailer/README.md:31:Formatting email correctly is surprisingly difficult. There are myriad overlapping RFCs, requiring tight adherence to horribly complicated formatting and encoding rules - the vast majority of code that you'll find online that uses the `mail()` function directly is just plain wrong!
./vendor/phpmailer/phpmailer/README.md:32:*Please* don't be tempted to do it yourself - if you don't use PHPMailer, there are many other excellent libraries that you should look at before rolling your own - try SwiftMailer, Zend_Mail, eZcomponents etc.
./vendor/phpmailer/phpmailer/README.md:37:This software is distributed under the [LGPL 2.1](http://www.gnu.org/licenses/lgpl-2.1.html) license. Please read LICENSE for information on the
./vendor/phpmailer/phpmailer/README.md:55:If you want to use the Gmail XOAUTH2 authentication class, you will also need to add a dependency on the `league/oauth2-client` package in your `composer.json`.
./vendor/phpmailer/phpmailer/README.md:77:PHPMailer 5.2 (which is compatible with PHP 5.0 - 7.0) is no longer being supported for feature updates, and will only be receiving security updates from now on. You will find the latest version of 5.2 in the [5.2-stable branch](https://github.com/PHPMailer/PHPMailer/tree/5.2-stable), and future versions of 5.2 will be tagged with 5.2.x version numbers, so existing composer configs should remain working. If you're using PHP 5.5 or later, we recommend you make the necessary changes to switch to the 6.0 release.
./vendor/phpmailer/phpmailer/README.md:80:While installing the entire package manually or with composer is simple, convenient and reliable, you may want to include only vital files in your project. At the very least you will need [src/PHPMailer.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/PHPMailer.php). If you're using SMTP, you'll need [src/SMTP.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/SMTP.php), and if you're using POP-before SMTP, you'll need [src/POP3.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/POP3.php). You can skip the [language](https://github.com/PHPMailer/PHPMailer/tree/master/language/) folder if you're not showing errors to users and can make do with English-only errors. If you're using XOAUTH2 you will need [src/OAuth.php](https://github.com/PHPMailer/PHPMailer/tree/master/src/OAuth.php) as well as the composer dependencies for the services you wish to authenticate with. Really, it's much easier to use composer!
./vendor/phpmailer/phpmailer/README.md:97:    $mail->SMTPDebug = 2;                                 // Enable verbose debug output
./vendor/phpmailer/phpmailer/README.md:98:    $mail->isSMTP();                                      // Set mailer to use SMTP
./vendor/phpmailer/phpmailer/README.md:99:    $mail->Host = 'smtp1.example.com;smtp2.example.com';  // Specify main and backup SMTP servers
./vendor/phpmailer/phpmailer/README.md:100:    $mail->SMTPAuth = true;                               // Enable SMTP authentication
./vendor/phpmailer/phpmailer/README.md:101:    $mail->Username = 'user@example.com';                 // SMTP username
./vendor/phpmailer/phpmailer/README.md:102:    $mail->Password = 'secret';                           // SMTP password
./vendor/phpmailer/phpmailer/README.md:103:    $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
./vendor/phpmailer/phpmailer/README.md:104:    $mail->Port = 587;                                    // TCP port to connect to
./vendor/phpmailer/phpmailer/README.md:107:    $mail->setFrom('from@example.com', 'Mailer');
./vendor/phpmailer/phpmailer/README.md:108:    $mail->addAddress('joe@example.net', 'Joe User');     // Add a recipient
./vendor/phpmailer/phpmailer/README.md:109:    $mail->addAddress('ellen@example.com');               // Name is optional
./vendor/phpmailer/phpmailer/README.md:110:    $mail->addReplyTo('info@example.com', 'Information');
./vendor/phpmailer/phpmailer/README.md:111:    $mail->addCC('cc@example.com');
./vendor/phpmailer/phpmailer/README.md:112:    $mail->addBCC('bcc@example.com');
./vendor/phpmailer/phpmailer/README.md:115:    $mail->addAttachment('/var/tmp/file.tar.gz');         // Add attachments
./vendor/phpmailer/phpmailer/README.md:116:    $mail->addAttachment('/tmp/image.jpg', 'new.jpg');    // Optional name
./vendor/phpmailer/phpmailer/README.md:119:    $mail->isHTML(true);                                  // Set email format to HTML
./vendor/phpmailer/phpmailer/README.md:120:    $mail->Subject = 'Here is the subject';
./vendor/phpmailer/phpmailer/README.md:121:    $mail->Body    = 'This is the HTML message body <b>in bold!</b>';
./vendor/phpmailer/phpmailer/README.md:122:    $mail->AltBody = 'This is the body in plain text for non-HTML mail clients';
./vendor/phpmailer/phpmailer/README.md:124:    $mail->send();
./vendor/phpmailer/phpmailer/README.md:128:    echo 'Mailer Error: ' . $mail->ErrorInfo;
./vendor/phpmailer/phpmailer/README.md:137:PHPMailer defaults to English, but in the [language](https://github.com/PHPMailer/PHPMailer/tree/master/language/) folder you'll find numerous (46 at the time of writing!) translations for PHPMailer error messages that you may encounter. Their filenames contain [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the translations, for example `fr` for French. To specify a language, you need to tell PHPMailer which one to use, like this:
./vendor/phpmailer/phpmailer/README.md:141:$mail->setLanguage('fr', '/optional/path/to/language/directory/');
./vendor/phpmailer/phpmailer/README.md:144:We welcome corrections and new languages - if you're looking for corrections to do, run the [PHPMailerLangTest.php](https://github.com/PHPMailer/PHPMailer/tree/master/test/PHPMailerLangTest.php) script in the tests folder and it will show any missing translations.
./vendor/phpmailer/phpmailer/README.md:155:You can generate complete API-level documentation by running `phpdoc` in the top-level folder, and documentation will appear in teh `docs` folder, though you'll need to have [PHPDocumentor](http://www.phpdoc.org) installed. You may find [the unit tests](https://github.com/PHPMailer/PHPMailer/tree/master/test/phpmailerTest.php) a good source of how to do various operations such as encryption.
./vendor/phpmailer/phpmailer/README.md:160:There is a PHPUnit test script in the [test](https://github.com/PHPMailer/PHPMailer/tree/master/test/) folder. PHPMailer uses PHPUnit 4.8 - we would use 5.x but we need to run on PHP 5.5.
./vendor/phpmailer/phpmailer/README.md:162:Build status: [![Build Status](https://travis-ci.org/PHPMailer/PHPMailer.svg)](https://travis-ci.org/PHPMailer/PHPMailer)
./vendor/phpmailer/phpmailer/README.md:168:Please disclose any vulnerabilities found responsibly - report any security problems found to the maintainers privately.
./vendor/phpmailer/phpmailer/README.md:170:PHPMailer versions prior to 5.2.22 (released January 9th 2017) have a local file disclosure vulnerability, [CVE-2017-5223](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5223). If content passed into `msgHTML()` is sourced from unfiltered user input, relative paths can map to absolute local file paths and added as attachments. Also note that `addAttachment` (just like `file_get_contents`, `passthru`, `unlink`, etc) should not be passed user-sourced params either! Reported by Yongxiang Li of Asiasecurity.
./vendor/phpmailer/phpmailer/README.md:172:PHPMailer versions prior to 5.2.20 (released December 28th 2016) are vulnerable to [CVE-2016-10045](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10045) a remote code execution vulnerability, responsibly reported by [Dawid Golunski](https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10045-Vuln-Patch-Bypass.html), and patched by Paul Buonopane (@Zenexer).
./vendor/phpmailer/phpmailer/README.md:174:PHPMailer versions prior to 5.2.18 (released December 2016) are vulnerable to [CVE-2016-10033](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-10033) a critical remote code execution vulnerability, responsibly reported by [Dawid Golunski](http://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html).
./vendor/phpmailer/phpmailer/README.md:181:We're particularly interested in fixing edge-cases, expanding test coverage and updating translations.
./vendor/phpmailer/phpmailer/README.md:183:If you found a mistake in the docs, or want to add something, go ahead and amend the wiki - anyone can edit it.
./vendor/phpmailer/phpmailer/README.md:188:git remote set-url upstream https://github.com/PHPMailer/PHPMailer.git
./vendor/phpmailer/phpmailer/README.md:196:<a href="https://info.smartmessages.net/"><img src="https://www.smartmessages.net/img/smartmessages-logo.svg" width="250" height="28" alt="Smartmessages email marketing"></a>
./vendor/phpmailer/phpmailer/README.md:198:Other contributions are gladly received, whether in beer 🍺, T-shirts 👕, Amazon wishlist raids, or cold, hard cash 💰. If you'd like to donate to say "thank you" to maintainers or contributors, please contact them through individual profile pages via [the contributors page](https://github.com/PHPMailer/PHPMailer/graphs/contributors).
./vendor/phpmailer/phpmailer/README.md:204:- PHPMailer was originally written in 2001 by Brent R. Matzelle as a [SourceForge project](http://sourceforge.net/projects/phpmailer/).
./vendor/phpmailer/phpmailer/README.md:205:- Marcus Bointon (coolbru on SF) and Andy Prevost (codeworxtech) took over the project in 2004.
./vendor/phpmailer/phpmailer/README.md:206:- Became an Apache incubator project on Google Code in 2010, managed by Jim Jagielski.
./vendor/phpmailer/phpmailer/README.md:207:- Marcus created his fork on [GitHub](https://github.com/Synchro/PHPMailer) in 2008.
./vendor/phpmailer/phpmailer/README.md:208:- Jim and Marcus decide to join forces and use GitHub as the canonical and official repo for PHPMailer in 2013.
./vendor/phpmailer/phpmailer/README.md:209:- PHPMailer moves to the [PHPMailer organisation](https://github.com/PHPMailer) on GitHub in 2013.
./vendor/phpmailer/phpmailer/README.md:212:- Official successor to the SourceForge and Google Code projects.
./vendor/phpmailer/phpmailer/README.md:213:- Test suite.
./vendor/phpmailer/phpmailer/README.md:214:- Continuous integration with Travis-CI.
./vendor/phpmailer/phpmailer/README.md:215:- Composer support.
./vendor/phpmailer/phpmailer/README.md:216:- Public development.
./vendor/phpmailer/phpmailer/README.md:217:- Additional languages and language strings.
./vendor/phpmailer/phpmailer/README.md:218:- CRAM-MD5 authentication support.
./vendor/phpmailer/phpmailer/README.md:219:- Preserves full repo history of authors, commits and branches from the original SourceForge project.
./vendor/phpmailer/phpmailer/get_oauth_token.php:3: * PHPMailer - PHP email creation and transport class.
./vendor/phpmailer/phpmailer/get_oauth_token.php:11: * @copyright 2012 - 2017 Marcus Bointon
./vendor/phpmailer/phpmailer/get_oauth_token.php:12: * @copyright 2010 - 2012 Jim Jagielski
./vendor/phpmailer/phpmailer/get_oauth_token.php:13: * @copyright 2004 - 2009 Andy Prevost
./vendor/phpmailer/phpmailer/get_oauth_token.php:15: * @note This program is distributed in the hope that it will be useful - WITHOUT
./vendor/phpmailer/phpmailer/get_oauth_token.php:37: * @see http://oauth2-client.thephpleague.com/providers/thirdparty/
./vendor/phpmailer/phpmailer/get_oauth_token.php:39:// @see https://github.com/thephpleague/oauth2-google
./vendor/phpmailer/phpmailer/get_oauth_token.php:41:// @see https://packagist.org/packages/hayageek/oauth2-yahoo
./vendor/phpmailer/phpmailer/get_oauth_token.php:43:// @see https://github.com/stevenmaguire/oauth2-microsoft
./vendor/phpmailer/phpmailer/get_oauth_token.php:77:$clientId = 'RANDOMCHARS-----duv1n2.apps.googleusercontent.com';
./vendor/phpmailer/phpmailer/get_oauth_token.php:78:$clientSecret = 'RANDOMCHARS-----lGyjPcRtvP';
./vendor/phpmailer/phpmailer/get_oauth_token.php:123:    $authUrl = $provider->getAuthorizationUrl($options);
./vendor/phpmailer/phpmailer/get_oauth_token.php:124:    $_SESSION['oauth2state'] = $provider->getState();
./vendor/phpmailer/phpmailer/get_oauth_token.php:135:    $token = $provider->getAccessToken(
./vendor/phpmailer/phpmailer/get_oauth_token.php:143:    echo 'Refresh Token: ', $token->getRefreshToken();
./vendor/phpmailer/phpmailer/LICENSE:5: 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
./vendor/phpmailer/phpmailer/LICENSE:18:free software--to make sure the software is free for all its users.
./vendor/phpmailer/phpmailer/LICENSE:21:specially designated software packages--typically libraries--of the
./vendor/phpmailer/phpmailer/LICENSE:48:  We protect your rights with a two-step method: (1) we copyright the
./vendor/phpmailer/phpmailer/LICENSE:71:libraries into non-free programs.
./vendor/phpmailer/phpmailer/LICENSE:84:of an advantage over competing non-free programs.  These disadvantages
./vendor/phpmailer/phpmailer/LICENSE:91:a de-facto standard.  To achieve this, non-free programs must be
./vendor/phpmailer/phpmailer/LICENSE:93:library does the same job as widely used non-free libraries.  In this
./vendor/phpmailer/phpmailer/LICENSE:97:  In other cases, permission to use a particular library in non-free
./vendor/phpmailer/phpmailer/LICENSE:100:non-free programs enables many more people to use the whole GNU
./vendor/phpmailer/phpmailer/LICENSE:184:    a purpose that is entirely well-defined independent of the
./vendor/phpmailer/phpmailer/LICENSE:186:    application-supplied function or table used by this function must
./vendor/phpmailer/phpmailer/LICENSE:230:it with the complete corresponding machine-readable source code, which
./vendor/phpmailer/phpmailer/LICENSE:287:    machine-readable source code for the Library including whatever
./vendor/phpmailer/phpmailer/LICENSE:290:    with the Library, with the complete machine-readable "work that
./vendor/phpmailer/phpmailer/LICENSE:304:    interface-compatible with the version that the work was made with.
./vendor/phpmailer/phpmailer/LICENSE:334:Library side-by-side in a single library together with other library
./vendor/phpmailer/phpmailer/LICENSE:382:license would not permit royalty-free redistribution of the Library by
./vendor/phpmailer/phpmailer/LICENSE:488:    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
./vendor/composer/autoload_static.php:10:        'c65d09b6820da036953a371c8c73a9b1' => __DIR__ . '/..' . '/facebook/graph-sdk/src/Facebook/polyfills.php',
./vendor/composer/autoload_static.php:39:            0 => __DIR__ . '/..' . '/plasticbrain/php-flash-messages/src',
./vendor/composer/autoload_static.php:55:            0 => __DIR__ . '/..' . '/facebook/graph-sdk/src/Facebook',
./vendor/composer/autoload_static.php:80:            $loader->prefixLengthsPsr4 = ComposerStaticInitc5def8e125934d84f4c9f999eeeaddf7::$prefixLengthsPsr4;
./vendor/composer/autoload_static.php:81:            $loader->prefixDirsPsr4 = ComposerStaticInitc5def8e125934d84f4c9f999eeeaddf7::$prefixDirsPsr4;
./vendor/composer/autoload_static.php:82:            $loader->classMap = ComposerStaticInitc5def8e125934d84f4c9f999eeeaddf7::$classMap;
./vendor/composer/autoload_psr4.php:10:    'Plasticbrain\\FlashMessages\\' => array($vendorDir . '/plasticbrain/php-flash-messages/src'),
./vendor/composer/autoload_psr4.php:14:    'Facebook\\' => array($vendorDir . '/facebook/graph-sdk/src/Facebook'),
./vendor/composer/autoload_files.php:9:    'c65d09b6820da036953a371c8c73a9b1' => $vendorDir . '/facebook/graph-sdk/src/Facebook/polyfills.php',
./vendor/composer/ClassLoader.php:16: * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
./vendor/composer/ClassLoader.php:21: *     $loader->add('Symfony\Component', __DIR__.'/component');
./vendor/composer/ClassLoader.php:22: *     $loader->add('Symfony',           __DIR__.'/framework');
./vendor/composer/ClassLoader.php:25: *     $loader->register();
./vendor/composer/ClassLoader.php:28: *     $loader->setUseIncludePath(true);
./vendor/composer/ClassLoader.php:40: * @see    http://www.php-fig.org/psr/psr-0/
./vendor/composer/ClassLoader.php:41: * @see    http://www.php-fig.org/psr/psr-4/
./vendor/composer/ClassLoader.php:45:    // PSR-4
./vendor/composer/ClassLoader.php:50:    // PSR-0
./vendor/composer/ClassLoader.php:62:        if (!empty($this->prefixesPsr0)) {
./vendor/composer/ClassLoader.php:63:            return call_user_func_array('array_merge', $this->prefixesPsr0);
./vendor/composer/ClassLoader.php:71:        return $this->prefixDirsPsr4;
./vendor/composer/ClassLoader.php:76:        return $this->fallbackDirsPsr0;
./vendor/composer/ClassLoader.php:81:        return $this->fallbackDirsPsr4;
./vendor/composer/ClassLoader.php:86:        return $this->classMap;
./vendor/composer/ClassLoader.php:94:        if ($this->classMap) {
./vendor/composer/ClassLoader.php:95:            $this->classMap = array_merge($this->classMap, $classMap);
./vendor/composer/ClassLoader.php:97:            $this->classMap = $classMap;
./vendor/composer/ClassLoader.php:102:     * Registers a set of PSR-0 directories for a given prefix, either
./vendor/composer/ClassLoader.php:106:     * @param array|string $paths   The PSR-0 root directories
./vendor/composer/ClassLoader.php:113:                $this->fallbackDirsPsr0 = array_merge(
./vendor/composer/ClassLoader.php:115:                    $this->fallbackDirsPsr0
./vendor/composer/ClassLoader.php:118:                $this->fallbackDirsPsr0 = array_merge(
./vendor/composer/ClassLoader.php:119:                    $this->fallbackDirsPsr0,
./vendor/composer/ClassLoader.php:128:        if (!isset($this->prefixesPsr0[$first][$prefix])) {
./vendor/composer/ClassLoader.php:129:            $this->prefixesPsr0[$first][$prefix] = (array) $paths;
./vendor/composer/ClassLoader.php:134:            $this->prefixesPsr0[$first][$prefix] = array_merge(
./vendor/composer/ClassLoader.php:136:                $this->prefixesPsr0[$first][$prefix]
./vendor/composer/ClassLoader.php:139:            $this->prefixesPsr0[$first][$prefix] = array_merge(
./vendor/composer/ClassLoader.php:140:                $this->prefixesPsr0[$first][$prefix],
./vendor/composer/ClassLoader.php:147:     * Registers a set of PSR-4 directories for a given namespace, either
./vendor/composer/ClassLoader.php:151:     * @param array|string $paths   The PSR-4 base directories
./vendor/composer/ClassLoader.php:161:                $this->fallbackDirsPsr4 = array_merge(
./vendor/composer/ClassLoader.php:163:                    $this->fallbackDirsPsr4
./vendor/composer/ClassLoader.php:166:                $this->fallbackDirsPsr4 = array_merge(
./vendor/composer/ClassLoader.php:167:                    $this->fallbackDirsPsr4,
./vendor/composer/ClassLoader.php:171:        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {
./vendor/composer/ClassLoader.php:174:            if ('\\' !== $prefix[$length - 1]) {
./vendor/composer/ClassLoader.php:175:                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
./vendor/composer/ClassLoader.php:177:            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
./vendor/composer/ClassLoader.php:178:            $this->prefixDirsPsr4[$prefix] = (array) $paths;
./vendor/composer/ClassLoader.php:181:            $this->prefixDirsPsr4[$prefix] = array_merge(
./vendor/composer/ClassLoader.php:183:                $this->prefixDirsPsr4[$prefix]
./vendor/composer/ClassLoader.php:187:            $this->prefixDirsPsr4[$prefix] = array_merge(
./vendor/composer/ClassLoader.php:188:                $this->prefixDirsPsr4[$prefix],
./vendor/composer/ClassLoader.php:195:     * Registers a set of PSR-0 directories for a given prefix,
./vendor/composer/ClassLoader.php:199:     * @param array|string $paths  The PSR-0 base directories
./vendor/composer/ClassLoader.php:204:            $this->fallbackDirsPsr0 = (array) $paths;
./vendor/composer/ClassLoader.php:206:            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;
./vendor/composer/ClassLoader.php:211:     * Registers a set of PSR-4 directories for a given namespace,
./vendor/composer/ClassLoader.php:215:     * @param array|string $paths  The PSR-4 base directories
./vendor/composer/ClassLoader.php:222:            $this->fallbackDirsPsr4 = (array) $paths;
./vendor/composer/ClassLoader.php:225:            if ('\\' !== $prefix[$length - 1]) {
./vendor/composer/ClassLoader.php:226:                throw new \InvalidArgumentException("A non-empty PSR-4 prefix must end with a namespace separator.");
./vendor/composer/ClassLoader.php:228:            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;
./vendor/composer/ClassLoader.php:229:            $this->prefixDirsPsr4[$prefix] = (array) $paths;
./vendor/composer/ClassLoader.php:240:        $this->useIncludePath = $useIncludePath;
./vendor/composer/ClassLoader.php:251:        return $this->useIncludePath;
./vendor/composer/ClassLoader.php:262:        $this->classMapAuthoritative = $classMapAuthoritative;
./vendor/composer/ClassLoader.php:272:        return $this->classMapAuthoritative;
./vendor/composer/ClassLoader.php:276:     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
./vendor/composer/ClassLoader.php:282:        $this->apcuPrefix = function_exists('apcu_fetch') && ini_get('apc.enabled') ? $apcuPrefix : null;
./vendor/composer/ClassLoader.php:292:        return $this->apcuPrefix;
./vendor/composer/ClassLoader.php:321:        if ($file = $this->findFile($class)) {
./vendor/composer/ClassLoader.php:338:        if (isset($this->classMap[$class])) {
./vendor/composer/ClassLoader.php:339:            return $this->classMap[$class];
./vendor/composer/ClassLoader.php:341:        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
./vendor/composer/ClassLoader.php:344:        if (null !== $this->apcuPrefix) {
./vendor/composer/ClassLoader.php:345:            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
./vendor/composer/ClassLoader.php:351:        $file = $this->findFileWithExtension($class, '.php');
./vendor/composer/ClassLoader.php:355:            $file = $this->findFileWithExtension($class, '.hh');
./vendor/composer/ClassLoader.php:358:        if (null !== $this->apcuPrefix) {
./vendor/composer/ClassLoader.php:359:            apcu_add($this->apcuPrefix.$class, $file);
./vendor/composer/ClassLoader.php:364:            $this->missingClasses[$class] = true;
./vendor/composer/ClassLoader.php:372:        // PSR-4 lookup
./vendor/composer/ClassLoader.php:376:        if (isset($this->prefixLengthsPsr4[$first])) {
./vendor/composer/ClassLoader.php:381:                if (isset($this->prefixDirsPsr4[$search])) {
./vendor/composer/ClassLoader.php:383:                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
./vendor/composer/ClassLoader.php:392:        // PSR-4 fallback dirs
./vendor/composer/ClassLoader.php:393:        foreach ($this->fallbackDirsPsr4 as $dir) {
./vendor/composer/ClassLoader.php:399:        // PSR-0 lookup
./vendor/composer/ClassLoader.php:405:            // PEAR-like class name
./vendor/composer/ClassLoader.php:409:        if (isset($this->prefixesPsr0[$first])) {
./vendor/composer/ClassLoader.php:410:            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {
./vendor/composer/ClassLoader.php:421:        // PSR-0 fallback dirs
./vendor/composer/ClassLoader.php:422:        foreach ($this->fallbackDirsPsr0 as $dir) {
./vendor/composer/ClassLoader.php:428:        // PSR-0 include paths.
./vendor/composer/ClassLoader.php:429:        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
./vendor/composer/autoload_real.php:34:                $loader->set($namespace, $path);
./vendor/composer/autoload_real.php:39:                $loader->setPsr4($namespace, $path);
./vendor/composer/autoload_real.php:44:                $loader->addClassMap($classMap);
./vendor/composer/autoload_real.php:48:        $loader->register(true);
./vendor/composer/installed.json:3:        "name": "facebook/graph-sdk",
./vendor/composer/installed.json:8:            "url": "https://github.com/facebook/php-graph-sdk.git",
./vendor/composer/installed.json:13:            "url": "https://api.github.com/repos/facebook/php-graph-sdk/zipball/2f9639c15ae043911f40ffe44080b32bac2c5280",
./vendor/composer/installed.json:20:        "require-dev": {
./vendor/composer/installed.json:29:        "time": "2017-08-16T17:28:07+00:00",
./vendor/composer/installed.json:32:            "branch-alias": {
./vendor/composer/installed.json:33:                "dev-master": "5.x-dev"
./vendor/composer/installed.json:36:        "installation-source": "dist",
./vendor/composer/installed.json:38:            "psr-4": {
./vendor/composer/installed.json:45:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:52:                "homepage": "https://github.com/facebook/php-graph-sdk/contributors"
./vendor/composer/installed.json:56:        "homepage": "https://github.com/facebook/php-graph-sdk",
./vendor/composer/installed.json:80:        "require-dev": {
./vendor/composer/installed.json:83:        "time": "2017-08-14T05:06:04+00:00",
./vendor/composer/installed.json:85:        "installation-source": "dist",
./vendor/composer/installed.json:87:            "psr-4": {
./vendor/composer/installed.json:91:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:147:            "psr/log-implementation": "1.0.0"
./vendor/composer/installed.json:149:        "require-dev": {
./vendor/composer/installed.json:150:            "aws/aws-sdk-php": "^2.4.9 || ^3.0",
./vendor/composer/installed.json:152:            "graylog2/gelf-php": "~1.0",
./vendor/composer/installed.json:153:            "jakub-onderka/php-parallel-lint": "0.9",
./vendor/composer/installed.json:154:            "php-amqplib/php-amqplib": "~2.4",
./vendor/composer/installed.json:155:            "php-console/php-console": "^3.1.3",
./vendor/composer/installed.json:157:            "phpunit/phpunit-mock-objects": "2.3.0",
./vendor/composer/installed.json:163:            "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
./vendor/composer/installed.json:165:            "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
./vendor/composer/installed.json:166:            "ext-mongo": "Allow sending log messages to a MongoDB server",
./vendor/composer/installed.json:167:            "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
./vendor/composer/installed.json:169:            "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
./vendor/composer/installed.json:170:            "php-console/php-console": "Allow sending log messages to Google Chrome",
./vendor/composer/installed.json:175:        "time": "2017-06-19T01:22:40+00:00",
./vendor/composer/installed.json:178:            "branch-alias": {
./vendor/composer/installed.json:179:                "dev-master": "2.0.x-dev"
./vendor/composer/installed.json:182:        "installation-source": "dist",
./vendor/composer/installed.json:184:            "psr-4": {
./vendor/composer/installed.json:188:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:204:            "psr-3"
./vendor/composer/installed.json:223:            "ext-ctype": "*",
./vendor/composer/installed.json:224:            "ext-filter": "*",
./vendor/composer/installed.json:227:        "require-dev": {
./vendor/composer/installed.json:229:            "friendsofphp/php-cs-fixer": "^2.2",
./vendor/composer/installed.json:232:            "zendframework/zend-eventmanager": "3.0.*",
./vendor/composer/installed.json:233:            "zendframework/zend-i18n": "2.7.3",
./vendor/composer/installed.json:234:            "zendframework/zend-serializer": "2.7.*"
./vendor/composer/installed.json:237:            "ext-mbstring": "Needed to send email in multibyte encoding charset",
./vendor/composer/installed.json:238:            "hayageek/oauth2-yahoo": "Needed for Yahoo XOAUTH2 authentication",
./vendor/composer/installed.json:239:            "league/oauth2-google": "Needed for Google XOAUTH2 authentication",
./vendor/composer/installed.json:240:            "psr/log": "For optional PSR-3 debug logging",
./vendor/composer/installed.json:241:            "stevenmaguire/oauth2-microsoft": "Needed for Microsoft XOAUTH2 authentication",
./vendor/composer/installed.json:242:            "symfony/polyfill-mbstring": "To support UTF-8 if the Mbstring PHP extension is not enabled (^1.2)"
./vendor/composer/installed.json:244:        "time": "2018-01-05T13:19:58+00:00",
./vendor/composer/installed.json:246:        "installation-source": "dist",
./vendor/composer/installed.json:248:            "psr-4": {
./vendor/composer/installed.json:252:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:254:            "LGPL-2.1"
./vendor/composer/installed.json:273:        "description": "PHPMailer is a full-featured email creation and transfer class for PHP"
./vendor/composer/installed.json:276:        "name": "plasticbrain/php-flash-messages",
./vendor/composer/installed.json:293:        "time": "2016-04-01T08:39:38+00:00",
./vendor/composer/installed.json:295:        "installation-source": "dist",
./vendor/composer/installed.json:297:            "psr-4": {
./vendor/composer/installed.json:301:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:311:        "description": "A modern take on PHP session-based flash messages",
./vendor/composer/installed.json:325:            "url": "https://github.com/php-fig/log.git",
./vendor/composer/installed.json:330:            "url": "https://api.github.com/repos/php-fig/log/zipball/4ebe3a8bf773a19edfe0a84b6585ba3d401b724d",
./vendor/composer/installed.json:337:        "time": "2016-10-10T12:19:37+00:00",
./vendor/composer/installed.json:340:            "branch-alias": {
./vendor/composer/installed.json:341:                "dev-master": "1.0.x-dev"
./vendor/composer/installed.json:344:        "installation-source": "dist",
./vendor/composer/installed.json:346:            "psr-4": {
./vendor/composer/installed.json:350:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:356:                "name": "PHP-FIG",
./vendor/composer/installed.json:357:                "homepage": "http://www.php-fig.org/"
./vendor/composer/installed.json:361:        "homepage": "https://github.com/php-fig/log",
./vendor/composer/installed.json:365:            "psr-3"
./vendor/composer/installed.json:383:        "time": "2017-08-04T16:37:43+00:00",
./vendor/composer/installed.json:385:        "installation-source": "dist",
./vendor/composer/installed.json:391:        "notification-url": "https://packagist.org/downloads/",
./vendor/composer/installed.json:405:        "description": "A fast, extensible & stand-alone PHP input validation class that allows you to validate any data",
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:45:        $this->logger = $logger;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:61:        //Forces the autoloader to run for LogLevel. Fixes an autoload issue at compile-time on PHP5.3. See https://github.com/Seldaek/monolog/pull/929
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:66:            $handler->registerErrorHandler($errorLevelMap);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:69:            $handler->registerExceptionHandler($exceptionLevel);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:72:            $handler->registerFatalHandler($fatalLevel);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:81:        $this->uncaughtExceptionLevel = $level;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:83:            $this->previousExceptionHandler = $prev;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:87:    public function registerErrorHandler(array $levelMap = array(), $callPrevious = true, $errorTypes = -1, $handleOnlyReportedErrors = true)
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:90:        $this->errorLevelMap = array_replace($this->defaultErrorLevelMap(), $levelMap);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:92:            $this->previousErrorHandler = $prev ?: true;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:95:        $this->handleOnlyReportedErrors = $handleOnlyReportedErrors;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:102:        $this->reservedMemory = str_repeat(' ', 1024 * $reservedMemorySize);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:103:        $this->fatalLevel = $level;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:104:        $this->hasFatalErrorHandler = true;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:133:        $this->logger->log(
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:134:            $this->uncaughtExceptionLevel === null ? LogLevel::ERROR : $this->uncaughtExceptionLevel,
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:135:            sprintf('Uncaught Exception %s: "%s" at %s line %s', get_class($e), $e->getMessage(), $e->getFile(), $e->getLine()),
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:139:        if ($this->previousExceptionHandler) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:140:            call_user_func($this->previousExceptionHandler, $e);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:151:        if ($this->handleOnlyReportedErrors && !(error_reporting() & $code)) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:156:        if (!$this->hasFatalErrorHandler || !in_array($code, self::$fatalErrors, true)) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:157:            $level = isset($this->errorLevelMap[$code]) ? $this->errorLevelMap[$code] : LogLevel::CRITICAL;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:158:            $this->logger->log($level, self::codeToString($code).': '.$message, array('code' => $code, 'message' => $message, 'file' => $file, 'line' => $line));
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:161:        if ($this->previousErrorHandler === true) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:163:        } elseif ($this->previousErrorHandler) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:164:            return call_user_func($this->previousErrorHandler, $code, $message, $file, $line, $context);
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:173:        $this->reservedMemory = null;
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:177:            $this->logger->log(
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:178:                $this->fatalLevel === null ? LogLevel::ALERT : $this->fatalLevel,
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:183:            if ($this->logger instanceof Logger) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:184:                foreach ($this->logger->getHandlers() as $handler) {
./vendor/monolog/monolog/src/Monolog/ErrorHandler.php:186:                        $handler->close();
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:65:        $this->systemName = $systemName ?: gethostname();
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:67:        $this->extraPrefix = $extraPrefix;
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:68:        $this->contextPrefix = $contextPrefix;
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:69:        $this->maxLength = is_null($maxLength) ? self::DEFAULT_MAX_LENGTH : $maxLength;
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:85:            ->setTimestamp($record['datetime'])
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:86:            ->setShortMessage((string) $record['message'])
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:87:            ->setHost($this->systemName)
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:88:            ->setLevel($this->logLevels[$record['level']]);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:91:        $len = 200 + strlen((string) $record['message']) + strlen($this->systemName);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:93:        if ($len > $this->maxLength) {
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:94:            $message->setShortMessage(substr($record['message'], 0, $this->maxLength));
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:98:            $message->setFacility($record['channel']);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:101:            $message->setLine($record['extra']['line']);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:105:            $message->setFile($record['extra']['file']);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:110:            $val = is_scalar($val) || null === $val ? $val : $this->toJson($val);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:111:            $len = strlen($this->extraPrefix . $key . $val);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:112:            if ($len > $this->maxLength) {
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:113:                $message->setAdditional($this->extraPrefix . $key, substr($val, 0, $this->maxLength));
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:116:            $message->setAdditional($this->extraPrefix . $key, $val);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:120:            $val = is_scalar($val) || null === $val ? $val : $this->toJson($val);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:121:            $len = strlen($this->contextPrefix . $key . $val);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:122:            if ($len > $this->maxLength) {
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:123:                $message->setAdditional($this->contextPrefix . $key, substr($val, 0, $this->maxLength));
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:126:            $message->setAdditional($this->contextPrefix . $key, $val);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:129:        if (null === $message->getFile() && isset($record['context']['exception']['file'])) {
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:130:            if (preg_match("/^(.+):([0-9]+)$/", $record['context']['exception']['file'], $matches)) {
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:131:                $message->setFile($matches[1]);
./vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php:132:                $message->setLine($matches[2]);
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:40:        parent::__construct('Y-m-d\TH:i:s.uP');
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:42:        $this->index = $index;
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:43:        $this->type = $type;
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:53:        return $this->getDocument($record);
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:62:        return $this->index;
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:71:        return $this->type;
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:83:        $document->setData($record);
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:84:        $document->setType($this->type);
./vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php:85:        $document->setIndex($this->index);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:56:        $th = htmlspecialchars($th, ENT_NOQUOTES, 'UTF-8');
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:58:            $td = '<pre>'.htmlspecialchars($td, ENT_NOQUOTES, 'UTF-8').'</pre>';
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:61:        return "<tr style=\"padding: 4px;spacing: 0;text-align: left;\">\n<th style=\"background: #cccccc\" width=\"100px\">$th:</th>\n<td style=\"padding: 4px;spacing: 0;text-align: left;background: #eeeeee\">".$td."</td>\n</tr>";
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:73:        $title = htmlspecialchars($title, ENT_NOQUOTES, 'UTF-8');
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:75:        return '<h1 style="background: '.$this->logLevels[$level].';color: #ffffff;padding: 5px;" class="monolog-output">'.$title.'</h1>';
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:86:        $output = $this->addTitle($record['level_name'], $record['level']);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:87:        $output .= '<table cellspacing="1" width="100%" class="monolog-output">';
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:89:        $output .= $this->addRow('Message', (string) $record['message']);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:90:        $output .= $this->addRow('Time', $record['datetime']->format($this->dateFormat));
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:91:        $output .= $this->addRow('Channel', $record['channel']);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:95:                $embeddedTable .= $this->addRow($key, $this->convertToString($value));
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:98:            $output .= $this->addRow('Context', $embeddedTable, false);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:103:                $embeddedTable .= $this->addRow($key, $this->convertToString($value));
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:106:            $output .= $this->addRow('Extra', $embeddedTable, false);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:122:            $message .= $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php:134:        $data = $this->normalize($data);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:30:        $this->maxNestingLevel = max($maxNestingLevel, 0);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:31:        $this->exceptionTraceAsString = (bool) $exceptionTraceAsString;
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:39:        return $this->formatArray($record);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:48:            $records[$key] = $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:56:        if ($this->maxNestingLevel == 0 || $nestingLevel <= $this->maxNestingLevel) {
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:59:                    $record[$name] = $this->formatDate($value, $nestingLevel + 1);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:61:                    $record[$name] = $this->formatException($value, $nestingLevel + 1);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:63:                    $record[$name] = $this->formatArray($value, $nestingLevel + 1);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:65:                    $record[$name] = $this->formatObject($value, $nestingLevel + 1);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:80:        return $this->formatArray($objectVars, $nestingLevel);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:87:            'message' => $exception->getMessage(),
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:88:            'code' => $exception->getCode(),
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:89:            'file' => $exception->getFile() . ':' . $exception->getLine(),
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:92:        if ($this->exceptionTraceAsString === true) {
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:93:            $formattedException['trace'] = $exception->getTraceAsString();
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:95:            $formattedException['trace'] = $exception->getTrace();
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:98:        return $this->formatArray($formattedException, $nestingLevel);
./vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php:103:        return new \MongoDate($value->getTimestamp());
./vendor/monolog/monolog/src/Monolog/Formatter/LogglyFormatter.php:35:     * @see https://www.loggly.com/docs/automated-parsing/#json
./vendor/monolog/monolog/src/Monolog/Formatter/LogglyFormatter.php:41:            $record["timestamp"] = $record["datetime"]->format("Y-m-d\TH:i:s.uO");
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:37:        $this->source = $source;
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:38:        $this->sourceEmail = $sourceEmail;
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:57:            'in %s: %s - %s',
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:58:            $this->source,
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:60:            $this->getShortMessage($record['message'])
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:64:            'source' => $this->source,
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:65:            'from_address' => $this->sourceEmail,
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:69:            'project' => $this->source,
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:83:            $formatted[] = $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:105:            if (mb_strlen($message, 'UTF-8') > $maxLength) {
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:106:                $message = mb_substr($message, 0, $maxLength - 4, 'UTF-8') . ' ...';
./vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php:110:                $message = substr($message, 0, $maxLength - 4) . ' ...';
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:15: * Formats incoming records into a one-line string
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:39:        $this->format = $format ?: static::SIMPLE_FORMAT;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:40:        $this->allowInlineLineBreaks = $allowInlineLineBreaks;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:41:        $this->ignoreEmptyContextAndExtra = $ignoreEmptyContextAndExtra;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:47:        $this->includeStacktraces = $include;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:48:        if ($this->includeStacktraces) {
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:49:            $this->allowInlineLineBreaks = true;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:55:        $this->allowInlineLineBreaks = $allow;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:60:        $this->ignoreEmptyContextAndExtra = $ignore;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:70:        $output = $this->format;
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:74:                $output = str_replace('%extra.'.$var.'%', $this->stringify($val), $output);
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:82:                $output = str_replace('%context.'.$var.'%', $this->stringify($val), $output);
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:87:        if ($this->ignoreEmptyContextAndExtra) {
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:101:                $output = str_replace('%'.$var.'%', $this->stringify($val), $output);
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:117:            $message .= $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:125:        return $this->replaceNewlines($this->convertToString($value));
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:136:        if ($previous = $e->getPrevious()) {
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:138:                $previousText .= ', '.get_class($previous).'(code: '.$previous->getCode().'): '.$previous->getMessage().' at '.$previous->getFile().':'.$previous->getLine();
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:139:            } while ($previous = $previous->getPrevious());
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:142:        $str = '[object] ('.get_class($e).'(code: '.$e->getCode().'): '.$e->getMessage().' at '.$e->getFile().':'.$e->getLine().$previousText.')';
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:143:        if ($this->includeStacktraces) {
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:144:            $str .= "\n[stacktrace]\n".$e->getTraceAsString()."\n";
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:161:            return $this->toJson($data, true);
./vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php:169:        if ($this->allowInlineLineBreaks) {
./vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php:57:        $record = $this->normalize($record);
./vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php:77:            $type  = $this->logLevels[$record['level']];
./vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php:82:        $json = $this->toJson(array(
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:62:        parent::__construct('Y-m-d\TH:i:s.uP');
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:64:        $this->systemName = $systemName ?: gethostname();
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:65:        $this->applicationName = $applicationName;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:66:        $this->extraPrefix = $extraPrefix;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:67:        $this->contextPrefix = $contextPrefix;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:68:        $this->version = $version;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:78:        if ($this->version === self::V1) {
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:79:            $message = $this->formatV1($record);
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:81:            $message = $this->formatV0($record);
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:84:        return $this->toJson($message) . "\n";
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:94:            '@source' => $this->systemName,
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:107:        if ($this->applicationName) {
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:108:            $message['@type'] = $this->applicationName;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:118:                $message['@fields'][$this->extraPrefix . $key] = $val;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:123:                $message['@fields'][$this->contextPrefix . $key] = $val;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:138:            'host' => $this->systemName,
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:150:        if ($this->applicationName) {
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:151:            $message['type'] = $this->applicationName;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:155:                $message[$this->extraPrefix . $key] = $val;
./vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php:160:                $message[$this->contextPrefix . $key] = $val;
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:23: *  path /var/run/td-agent/td-agent.sock
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:29: * $fluentHandler = new Monolog\Handler\SocketHandler('unix:///var/run/td-agent/td-agent.sock');
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:30: * $fluentHandler->setFormatter(new Monolog\Formatter\FluentdFormatter());
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:31: * $logger->pushHandler($fluentHandler);
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:48:        $this->levelTag = (bool) $levelTag;
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:53:        return $this->levelTag;
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:59:        if ($this->levelTag) {
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:68:        if (!$this->levelTag) {
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:73:        return json_encode(array($tag, $record['datetime']->getTimestamp(), $message));
./vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php:80:            $message .= $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:23:    const SIMPLE_DATE = "Y-m-d H:i:s";
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:32:        $this->dateFormat = $dateFormat ?: static::SIMPLE_DATE;
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:43:        return $this->normalize($record);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:52:            $records[$key] = $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:63:                    return ($data > 0 ? '' : '-') . 'INF';
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:82:                $normalized[$key] = $this->normalize($value);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:89:            return $data->format($this->dateFormat);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:95:                return $this->normalizeException($data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:98:            // non-serializable objects that implement __toString stringified
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:100:                $value = $data->__toString();
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:102:                // the rest is json-serialized in some way
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:103:                $value = $this->toJson($data, true);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:125:            'message' => $e->getMessage(),
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:126:            'code' => $e->getCode(),
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:127:            'file' => $e->getFile().':'.$e->getLine(),
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:131:            if (isset($e->faultcode)) {
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:132:                $data['faultcode'] = $e->faultcode;
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:135:            if (isset($e->faultactor)) {
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:136:                $data['faultactor'] = $e->faultactor;
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:139:            if (isset($e->detail)) {
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:140:                $data['detail'] = $e->detail;
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:144:        $trace = $e->getTrace();
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:153:                $data['trace'][] = $this->toJson($this->normalize($frame), true);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:157:        if ($previous = $e->getPrevious()) {
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:158:            $data['previous'] = $this->normalizeException($previous);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:176:            return @$this->jsonEncode($data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:179:        $json = $this->jsonEncode($data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:182:            $json = $this->handleJsonError(json_last_error(), $data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:217:            $this->throwEncodeError($code, $data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:221:            $this->detectAndCleanUtf8($data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:225:            $this->throwEncodeError($code, $data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:228:        $json = $this->jsonEncode($data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:231:            $this->throwEncodeError(json_last_error(), $data);
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:257:                $msg = 'Malformed UTF-8 characters, possibly incorrectly encoded';
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:267:     * Detect invalid UTF-8 string characters and convert to valid UTF-8.
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:269:     * Valid UTF-8 input will be left unmodified, but strings containing
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:270:     * invalid UTF-8 codepoints will be reencoded as UTF-8 with an assumed
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:271:     * original encoding of ISO-8859-15. This conversion may result in
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:272:     * incorrect output if the actual encoding was not ISO-8859-15, but it
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:273:     * will be clean UTF-8 output and will not rely on expensive and fragile
./vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php:286:                '/[\x80-\xFF]+/',
./vendor/monolog/monolog/src/Monolog/Formatter/ScalarFormatter.php:28:            $record[$key] = $this->normalizeValue($value);
./vendor/monolog/monolog/src/Monolog/Formatter/ScalarFormatter.php:40:        $normalized = $this->normalize($value);
./vendor/monolog/monolog/src/Monolog/Formatter/ScalarFormatter.php:43:            return $this->toJson($normalized, true);
./vendor/monolog/monolog/src/Monolog/Formatter/ChromePHPFormatter.php:64:            $this->logLevels[$record['level']],
./vendor/monolog/monolog/src/Monolog/Formatter/ChromePHPFormatter.php:73:            $formatted[] = $this->format($record);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:43:        $this->batchMode = $batchMode;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:44:        $this->appendNewline = $appendNewline;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:50:     * formatted as a JSON-encoded array. However, for
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:58:        return $this->batchMode;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:68:        return $this->appendNewline;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:76:        return $this->toJson($this->normalize($record), true) . ($this->appendNewline ? "\n" : '');
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:84:        switch ($this->batchMode) {
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:86:                return $this->formatBatchNewlines($records);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:90:                return $this->formatBatchJson($records);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:99:        $this->includeStacktraces = $include;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:103:     * Return a JSON-encoded array of records.
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:110:        return $this->toJson($this->normalize($records), true);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:115:     * JSON-encoded array.
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:124:        $oldNewline = $this->appendNewline;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:125:        $this->appendNewline = false;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:127:            $value = $instance->format($value);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:129:        $this->appendNewline = $oldNewline;
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:152:                $normalized[$key] = $this->normalize($value);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:159:            return $this->normalizeException($data);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:182:            'message' => $e->getMessage(),
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:183:            'code' => $e->getCode(),
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:184:            'file' => $e->getFile().':'.$e->getLine(),
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:187:        if ($this->includeStacktraces) {
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:188:            $trace = $e->getTrace();
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:197:                    $data['trace'][] = $this->normalize($frame);
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:202:        if ($previous = $e->getPrevious()) {
./vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php:203:            $data['previous'] = $this->normalizeException($previous);
./vendor/monolog/monolog/src/Monolog/Registry.php:31: *     Monolog\Registry::api()->addError('Sent to $api Logger instance');
./vendor/monolog/monolog/src/Monolog/Registry.php:32: *     Monolog\Registry::application()->addError('Sent to $application Logger instance');
./vendor/monolog/monolog/src/Monolog/Registry.php:51:     * @param  string|null               $name      Name of the logging channel ($logger->getName() by default)
./vendor/monolog/monolog/src/Monolog/Registry.php:57:        $name = $name ?: $logger->getName();
./vendor/monolog/monolog/src/Monolog/Logger.php:143:        $this->name = $name;
./vendor/monolog/monolog/src/Monolog/Logger.php:144:        $this->handlers = $handlers;
./vendor/monolog/monolog/src/Monolog/Logger.php:145:        $this->processors = $processors;
./vendor/monolog/monolog/src/Monolog/Logger.php:153:        return $this->name;
./vendor/monolog/monolog/src/Monolog/Logger.php:164:        $new->name = $name;
./vendor/monolog/monolog/src/Monolog/Logger.php:177:        array_unshift($this->handlers, $handler);
./vendor/monolog/monolog/src/Monolog/Logger.php:189:        if (!$this->handlers) {
./vendor/monolog/monolog/src/Monolog/Logger.php:193:        return array_shift($this->handlers);
./vendor/monolog/monolog/src/Monolog/Logger.php:206:        $this->handlers = array();
./vendor/monolog/monolog/src/Monolog/Logger.php:208:            $this->pushHandler($handler);
./vendor/monolog/monolog/src/Monolog/Logger.php:219:        return $this->handlers;
./vendor/monolog/monolog/src/Monolog/Logger.php:233:        array_unshift($this->processors, $callback);
./vendor/monolog/monolog/src/Monolog/Logger.php:245:        if (!$this->processors) {
./vendor/monolog/monolog/src/Monolog/Logger.php:249:        return array_shift($this->processors);
./vendor/monolog/monolog/src/Monolog/Logger.php:257:        return $this->processors;
./vendor/monolog/monolog/src/Monolog/Logger.php:275:        $this->microsecondTimestamps = (bool) $micro;
./vendor/monolog/monolog/src/Monolog/Logger.php:288:        if (!$this->handlers) {
./vendor/monolog/monolog/src/Monolog/Logger.php:289:            $this->pushHandler(new StreamHandler('php://stderr', static::DEBUG));
./vendor/monolog/monolog/src/Monolog/Logger.php:296:        reset($this->handlers);
./vendor/monolog/monolog/src/Monolog/Logger.php:297:        while ($handler = current($this->handlers)) {
./vendor/monolog/monolog/src/Monolog/Logger.php:298:            if ($handler->isHandling(array('level' => $level))) {
./vendor/monolog/monolog/src/Monolog/Logger.php:299:                $handlerKey = key($this->handlers);
./vendor/monolog/monolog/src/Monolog/Logger.php:303:            next($this->handlers);
./vendor/monolog/monolog/src/Monolog/Logger.php:315:        if ($this->microsecondTimestamps && PHP_VERSION_ID < 70100) {
./vendor/monolog/monolog/src/Monolog/Logger.php:320:        $ts->setTimezone(static::$timezone);
./vendor/monolog/monolog/src/Monolog/Logger.php:327:            'channel' => $this->name,
./vendor/monolog/monolog/src/Monolog/Logger.php:332:        foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Logger.php:336:        while ($handler = current($this->handlers)) {
./vendor/monolog/monolog/src/Monolog/Logger.php:337:            if (true === $handler->handle($record)) {
./vendor/monolog/monolog/src/Monolog/Logger.php:341:            next($this->handlers);
./vendor/monolog/monolog/src/Monolog/Logger.php:356:        return $this->addRecord(static::DEBUG, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:368:        return $this->addRecord(static::INFO, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:380:        return $this->addRecord(static::NOTICE, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:392:        return $this->addRecord(static::WARNING, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:404:        return $this->addRecord(static::ERROR, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:416:        return $this->addRecord(static::CRITICAL, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:428:        return $this->addRecord(static::ALERT, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:440:        return $this->addRecord(static::EMERGENCY, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:446:     * @return array Assoc array with human-readable level names => level codes.
./vendor/monolog/monolog/src/Monolog/Logger.php:469:     * Converts PSR-3 levels to Monolog ones if necessary
./vendor/monolog/monolog/src/Monolog/Logger.php:471:     * @param string|int Level number (monolog) or name (PSR-3)
./vendor/monolog/monolog/src/Monolog/Logger.php:495:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Logger.php:496:            if ($handler->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Logger.php:518:        return $this->addRecord($level, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:532:        return $this->addRecord(static::DEBUG, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:546:        return $this->addRecord(static::INFO, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:560:        return $this->addRecord(static::NOTICE, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:574:        return $this->addRecord(static::WARNING, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:588:        return $this->addRecord(static::WARNING, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:602:        return $this->addRecord(static::ERROR, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:616:        return $this->addRecord(static::ERROR, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:630:        return $this->addRecord(static::CRITICAL, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:644:        return $this->addRecord(static::CRITICAL, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:658:        return $this->addRecord(static::ALERT, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:672:        return $this->addRecord(static::EMERGENCY, $message, $context);
./vendor/monolog/monolog/src/Monolog/Logger.php:686:        return $this->addRecord(static::EMERGENCY, $message, $context);
./vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php:45:        $this->messageType = $messageType;
./vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php:46:        $this->expandNewlines = $expandNewlines;
./vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php:73:        if ($this->expandNewlines) {
./vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php:76:                error_log($line, $this->messageType);
./vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php:79:            error_log((string) $record['formatted'], $this->messageType);
./vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php:24: *   $log->pushHandler($mongodb);
./vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php:38:        $this->mongoCollection = $mongo->selectCollection($database, $collection);
./vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php:45:        if ($this->mongoCollection instanceof \MongoDB\Collection) {
./vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php:46:            $this->mongoCollection->insertOne($record["formatted"]);
./vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php:48:            $this->mongoCollection->save($record["formatted"]);
./vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php:40:        $this->eventName = $eventName;
./vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php:41:        $this->secretKey = $secretKey;
./vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php:59:        curl_setopt($ch, CURLOPT_URL, "https://maker.ifttt.com/trigger/" . $this->eventName . "/with/key/" . $this->secretKey);
./vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php:64:            "Content-Type: application/json",
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:18: * Proxies log messages to an existing PSR-3 compliant logger.
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:25:     * PSR-3 compliant logger
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:32:     * @param LoggerInterface $logger The underlying PSR-3 compliant logger to which messages will be proxied
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:40:        $this->logger = $logger;
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:48:        if (!$this->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:52:        $this->logger->log(strtolower($record['level_name']), $record['message'], $record['context']);
./vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php:54:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:26:    const HOST = 'logs-01.loggly.com';
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:40:        $this->token = $token;
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:48:        $this->tag = is_array($tag) ? $tag : array($tag);
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:55:            $this->tag = array_unique(array_merge($this->tag, $tag));
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:61:        $this->send($record["formatted"], self::ENDPOINT_SINGLE);
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:66:        $level = $this->level;
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:73:            $this->send($this->getFormatter()->formatBatch($records), self::ENDPOINT_BATCH);
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:79:        $url = sprintf("https://%s/%s/%s/", self::HOST, $endpoint, $this->token);
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:81:        $headers = array('Content-Type: application/json');
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:83:        if (!empty($this->tag)) {
./vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php:84:            $headers[] = 'X-LOGGLY-TAG: '.implode(',', $this->tag);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:46:        if (!in_array($urlInfo['scheme'], $this->acceptedSchemes)) {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:49:                . ' Valid options are ' . implode(', ', $this->acceptedSchemes));
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:52:        $this->scheme = $urlInfo['scheme'];
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:53:        $this->host = $urlInfo['host'];
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:54:        $this->port = $urlInfo['port'];
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:71:        $this->udpConnection = socket_create(AF_INET, SOCK_DGRAM, 0);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:72:        if (!$this->udpConnection) {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:76:        if (!socket_connect($this->udpConnection, $this->host, $this->port)) {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:77:            throw new \LogicException('Unable to connect to the socket at ' . $this->host . ':' . $this->port);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:91:        $this->httpConnection = curl_init('http://'.$this->host.':'.$this->port.'/1.0/event/put');
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:93:        if (!$this->httpConnection) {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:94:            throw new \LogicException('Unable to connect to ' . $this->host . ':' . $this->port);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:97:        curl_setopt($this->httpConnection, CURLOPT_CUSTOMREQUEST, "POST");
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:98:        curl_setopt($this->httpConnection, CURLOPT_RETURNTRANSFER, true);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:108:        $data = array('time' => $date->format('Y-m-d\TH:i:s.uO'));
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:121:        if ($this->scheme === 'http') {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:122:            $this->writeHttp(json_encode($data));
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:124:            $this->writeUdp(json_encode($data));
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:130:        if (!$this->udpConnection) {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:131:            $this->connectUdp();
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:134:        socket_send($this->udpConnection, $data, strlen($data), 0);
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:139:        if (!$this->httpConnection) {
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:140:            $this->connectHttp();
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:143:        curl_setopt($this->httpConnection, CURLOPT_POSTFIELDS, '['.$data.']');
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:144:        curl_setopt($this->httpConnection, CURLOPT_HTTPHEADER, array(
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:145:            'Content-Type: application/json',
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:146:            'Content-Length: ' . strlen('['.$data.']'),
./vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php:149:        Curl\Util::execute($this->httpConnection, 5, false);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:39:        $this->ident = $ident;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:41:        $this->socket = new UdpSocket($host, $port ?: 514);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:46:        $lines = $this->splitMessageIntoLines($record['formatted']);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:48:        $header = $this->makeCommonSyslogHeader($this->logLevels[$record['level']]);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:51:            $this->socket->write($line, $header);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:57:        $this->socket->close();
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:66:        return preg_split('/$\R?^/m', $message, -1, PREG_SPLIT_NO_EMPTY);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:74:        $priority = $severity + $this->facility;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:77:            $pid = '-';
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:81:            $hostname = '-';
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:85:            $this->getDateTime() . " " .
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:87:            $this->ident . " " .
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:88:            $pid . " - - ";
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php:101:        $this->socket = $socket;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:43:        $this->handler = $handler;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:44:        $this->bufferLimit = (int) $bufferLimit;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:45:        $this->flushOnOverflow = $flushOnOverflow;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:53:        if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:57:        if (!$this->initialized) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:60:            $this->initialized = true;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:63:        if ($this->bufferLimit > 0 && $this->bufferSize === $this->bufferLimit) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:64:            if ($this->flushOnOverflow) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:65:                $this->flush();
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:67:                array_shift($this->buffer);
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:68:                $this->bufferSize--;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:72:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:73:            foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:78:        $this->buffer[] = $record;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:79:        $this->bufferSize++;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:81:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:86:        if ($this->bufferSize === 0) {
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:90:        $this->handler->handleBatch($this->buffer);
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:91:        $this->clear();
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:106:        $this->flush();
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:114:        $this->bufferSize = 0;
./vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php:115:        $this->buffer = array();
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:24:        $this->ip = $ip;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:25:        $this->port = $port;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:26:        $this->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:31:        $this->send($this->assembleMessage($line, $header));
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:36:        if (is_resource($this->socket)) {
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:37:            socket_close($this->socket);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:38:            $this->socket = null;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:44:        if (!is_resource($this->socket)) {
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:45:            throw new \LogicException('The UdpSocket to '.$this->ip.':'.$this->port.' has been closed and can not be written to anymore');
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:47:        socket_sendto($this->socket, $chunk, strlen($chunk), $flags = 0, $this->ip, $this->port);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php:52:        $chunkSize = self::DATAGRAM_MAX_LENGTH - strlen($header);
./vendor/monolog/monolog/src/Monolog/Handler/MailHandler.php:29:            if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Handler/MailHandler.php:32:            $messages[] = $this->processRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/MailHandler.php:36:            $this->send((string) $this->getFormatter()->formatBatch($messages), $messages);
./vendor/monolog/monolog/src/Monolog/Handler/MailHandler.php:53:        $this->send((string) $record['formatted'], array($record));
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:20: * @see    https://slack.com/apps/A0F81R8ET-slackbot
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:53:        $this->slackTeam = $slackTeam;
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:54:        $this->token = $token;
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:55:        $this->channel = $channel;
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:67:            $this->slackTeam,
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:68:            $this->token,
./vendor/monolog/monolog/src/Monolog/Handler/SlackbotHandler.php:69:            $this->channel
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:36:    const PLUGIN_URI = 'http://meta.firephp.org/Wildfire/Plugin/FirePHP/Library-FirePHPCore/0.3';
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:41:    const HEADER_PREFIX = 'X-Wf';
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:44:     * Whether or not Wildfire vendor-specific headers have been generated & sent yet
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:65:        $header = sprintf('%s-%s', self::HEADER_PREFIX, join('-', $meta));
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:81:        return $this->createHeader(
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:106:            $this->createHeader(array('Protocol', 1), self::PROTOCOL_URI),
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:107:            $this->createHeader(array(1, 'Structure', 1), self::STRUCTURE_URI),
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:108:            $this->createHeader(array(1, 'Plugin', 1), self::PLUGIN_URI)
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:138:        // WildFire-specific headers must be sent prior to any messages
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:142:            self::$sendHeaders = $this->headersAccepted();
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:147:            foreach ($this->getInitHeaders() as $header => $content) {
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:148:                $this->sendHeader($header, $content);
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:152:        $header = $this->createRecordHeader($record);
./vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php:154:            $this->sendHeader(key($header), current($header));
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:41:            $exchange->setName($exchangeName);
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:43:            $this->exchangeName = $exchangeName;
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:47:        $this->exchange = $exchange;
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:58:        $routingKey = $this->getRoutingKey($record);
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:60:        if ($this->exchange instanceof AMQPExchange) {
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:61:            $this->exchange->publish(
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:71:            $this->exchange->basic_publish(
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:72:                $this->createAmqpMessage($data),
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:73:                $this->exchangeName,
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:84:        if ($this->exchange instanceof AMQPExchange) {
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:91:            if (!$this->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:95:            $record = $this->processRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:96:            $data = $this->getFormatter()->format($record);
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:98:            $this->exchange->batch_basic_publish(
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:99:                $this->createAmqpMessage($data),
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:100:                $this->exchangeName,
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:101:                $this->getRoutingKey($record)
./vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php:105:        $this->exchange->publish_batch();
./vendor/monolog/monolog/src/Monolog/Handler/ZendMonitorHandler.php:59:        $this->writeZendMonitorCustomEvent(
./vendor/monolog/monolog/src/Monolog/Handler/ZendMonitorHandler.php:60:            $this->levelMap[$record['level']],
./vendor/monolog/monolog/src/Monolog/Handler/ZendMonitorHandler.php:93:        return $this->levelMap;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:87:        $this->token = $token;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:88:        $this->users = (array) $users;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:89:        $this->title = $title ?: gethostname();
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:90:        $this->highPriorityLevel = Logger::toMonologLevel($highPriorityLevel);
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:91:        $this->emergencyLevel = Logger::toMonologLevel($emergencyLevel);
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:92:        $this->retry = $retry;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:93:        $this->expire = $expire;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:98:        $content = $this->buildContent($record);
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:100:        return $this->buildHeader($content) . $content;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:106:        $maxMessageLength = 512 - strlen($this->title);
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:108:        $message = ($this->useFormattedMessage) ? $record['formatted'] : $record['message'];
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:111:        $timestamp = $record['datetime']->getTimestamp();
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:114:            'token' => $this->token,
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:115:            'user' => $this->user,
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:117:            'title' => $this->title,
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:121:        if (isset($record['level']) && $record['level'] >= $this->emergencyLevel) {
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:123:            $dataArray['retry'] = $this->retry;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:124:            $dataArray['expire'] = $this->expire;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:125:        } elseif (isset($record['level']) && $record['level'] >= $this->highPriorityLevel) {
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:130:        $context = array_intersect_key($record['context'], $this->parameterNames);
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:131:        $extra = array_intersect_key($record['extra'], $this->parameterNames);
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:137:        if (isset($dataArray['sound']) && !in_array($dataArray['sound'], $this->sounds)) {
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:148:        $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:149:        $header .= "Content-Length: " . strlen($content) . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:157:        foreach ($this->users as $user) {
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:158:            $this->user = $user;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:161:            $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:164:        $this->user = null;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:169:        $this->highPriorityLevel = $value;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:174:        $this->emergencyLevel = $value;
./vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php:183:        $this->useFormattedMessage = (boolean) $value;
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:21: * @see https://docs.newrelic.com/docs/agents/php-agent
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:22: * @see https://docs.newrelic.com/docs/accounts-partnerships/accounts/security/high-security
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:64:        $this->appName       = $appName;
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:65:        $this->explodeArrays = $explodeArrays;
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:66:        $this->transactionName = $transactionName;
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:74:        if (!$this->isNewRelicEnabled()) {
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:78:        if ($appName = $this->getAppName($record['context'])) {
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:79:            $this->setNewRelicAppName($appName);
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:82:        if ($transactionName = $this->getTransactionName($record['context'])) {
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:83:            $this->setNewRelicTransactionName($transactionName);
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:96:                if (is_array($parameter) && $this->explodeArrays) {
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:98:                        $this->setNewRelicParameter('context_' . $key . '_' . $paramKey, $paramValue);
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:101:                    $this->setNewRelicParameter('context_' . $key, $parameter);
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:108:                if (is_array($parameter) && $this->explodeArrays) {
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:110:                        $this->setNewRelicParameter('extra_' . $key . '_' . $paramKey, $paramValue);
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:113:                    $this->setNewRelicParameter('extra_' . $key, $parameter);
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:142:        return $this->appName;
./vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php:159:        return $this->transactionName;
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:28: *        return $this->handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:46:        $this->handler = $handler;
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:54:        return $this->handler->isHandling($record);
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:62:        return $this->handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:70:        return $this->handler->handleBatch($records);
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:78:        $this->handler->pushProcessor($callback);
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:88:        return $this->handler->popProcessor();
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:96:        $this->handler->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php:106:        return $this->handler->getFormatter();
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:53:        $this->token = $token;
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:79:        $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:90:        $content = $this->buildContent($record);
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:92:        return $this->buildHeader($content) . $content;
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:103:        $header = "POST " . self::FLEEP_HOOK_URI . $this->token . " HTTP/1.1\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:105:        $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php:106:        $header .= "Content-Length: " . strlen($content) . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/GelfHandler.php:47:        $this->publisher = $publisher;
./vendor/monolog/monolog/src/Monolog/Handler/GelfHandler.php:55:        $this->publisher = null;
./vendor/monolog/monolog/src/Monolog/Handler/GelfHandler.php:63:        $this->publisher->publish($record['formatted']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:27: * 1. Install Google Chrome extension https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:28: * 2. See overview https://github.com/barbushin/php-console#overview
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:29: * 3. Install PHP Console library https://github.com/barbushin/php-console#installation
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:35: *      $logger->addDebug('SELECT * FROM users', array('db', 'time' => 0.012));
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:51:        'headersLimit' => null, // int|null Set headers size limit for your web-server
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:78:            throw new Exception('PHP Console library not found. See https://github.com/barbushin/php-console#installation');
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:81:        $this->options = $this->initOptions($options);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:82:        $this->connector = $this->initConnector($connector);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:87:        $wrongOptions = array_diff(array_keys($options), array_keys($this->options));
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:92:        return array_replace($this->options, $options);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:98:            if ($this->options['dataStorage']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:99:                Connector::setPostponeStorage($this->options['dataStorage']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:104:        if ($this->options['registerHelper'] && !Helper::isRegistered()) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:108:        if ($this->options['enabled'] && $connector->isActiveClient()) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:109:            if ($this->options['useOwnErrorsHandler'] || $this->options['useOwnExceptionsHandler']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:111:                $handler->setHandleErrors($this->options['useOwnErrorsHandler']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:112:                $handler->setHandleExceptions($this->options['useOwnExceptionsHandler']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:113:                $handler->start();
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:115:            if ($this->options['sourcesBasePath']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:116:                $connector->setSourcesBasePath($this->options['sourcesBasePath']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:118:            if ($this->options['serverEncoding']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:119:                $connector->setServerEncoding($this->options['serverEncoding']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:121:            if ($this->options['password']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:122:                $connector->setPassword($this->options['password']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:124:            if ($this->options['enableSslOnlyMode']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:125:                $connector->enableSslOnlyMode();
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:127:            if ($this->options['ipMasks']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:128:                $connector->setAllowedIpMasks($this->options['ipMasks']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:130:            if ($this->options['headersLimit']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:131:                $connector->setHeadersLimit($this->options['headersLimit']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:133:            if ($this->options['detectDumpTraceAndSource']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:134:                $connector->getDebugDispatcher()->detectTraceAndSource = true;
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:136:            $dumper = $connector->getDumper();
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:137:            $dumper->levelLimit = $this->options['dumperLevelLimit'];
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:138:            $dumper->itemsCountLimit = $this->options['dumperItemsCountLimit'];
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:139:            $dumper->itemSizeLimit = $this->options['dumperItemSizeLimit'];
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:140:            $dumper->dumpSizeLimit = $this->options['dumperDumpSizeLimit'];
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:141:            $dumper->detectCallbacks = $this->options['dumperDetectCallbacks'];
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:142:            if ($this->options['enableEvalListener']) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:143:                $connector->startEvalRequestsListener();
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:152:        return $this->connector;
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:157:        return $this->options;
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:162:        if ($this->options['enabled'] && $this->connector->isActiveClient()) {
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:166:        return !$this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:178:            $this->handleDebugRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:180:            $this->handleExceptionRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:182:            $this->handleErrorRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:188:        $tags = $this->getRecordTags($record);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:191:            $message .= ' ' . json_encode($this->connector->getDumper()->dump(array_filter($record['context'])));
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:193:        $this->connector->getDebugDispatcher()->dispatchDebug($message, $tags, $this->options['classesPartialsTraceIgnore']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:198:        $this->connector->getErrorsDispatcher()->dispatchException($record['context']['exception']);
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:205:        $this->connector->getErrorsDispatcher()->dispatchError(
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:210:            $this->options['classesPartialsTraceIgnore']
./vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php:219:            foreach ($this->options['debugTagsKeysInContext'] as $key) {
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:34:    const HEADER_NAME = 'X-ChromeLogger-Data';
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:39:    const USER_AGENT_REGEX = '{\b(?:Chrome/\d+(?:\.\d+)*|HeadlessChrome|Firefox/(?:4[3-9]|[5-9]\d|\d{3,})(?:\.\d)*)\b}';
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:80:            if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:83:            $messages[] = $this->processRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:87:            $messages = $this->getFormatter()->formatBatch($messages);
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:89:            $this->send();
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:112:        $this->send();
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:129:            self::$sendHeaders = $this->headersAccepted();
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:151:            self::$json['rows'][count(self::$json['rows']) - 1] = $this->getFormatter()->format($record);
./vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php:157:            $this->sendHeader(self::HEADER_NAME, $data);
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:56:     * The Content-type for the message
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:65:    protected $encoding = 'utf-8';
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:78:        $this->to = is_array($to) ? $to : array($to);
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:79:        $this->subject = $subject;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:80:        $this->addHeader(sprintf('From: %s', $from));
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:81:        $this->maxColumnWidth = $maxColumnWidth;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:96:            $this->headers[] = $header;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:110:        $this->parameters = array_merge($this->parameters, (array) $parameters);
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:120:        $content = wordwrap($content, $this->maxColumnWidth);
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:121:        $headers = ltrim(implode("\r\n", $this->headers) . "\r\n", "\r\n");
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:122:        $headers .= 'Content-type: ' . $this->getContentType() . '; charset=' . $this->getEncoding() . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:123:        if ($this->getContentType() == 'text/html' && false === strpos($headers, 'MIME-Version:')) {
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:124:            $headers .= 'MIME-Version: 1.0' . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:127:        $subject = $this->subject;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:129:            $subjectFormatter = new LineFormatter($this->subject);
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:130:            $subject = $subjectFormatter->format($this->getHighestRecord($records));
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:133:        $parameters = implode(' ', $this->parameters);
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:134:        foreach ($this->to as $to) {
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:144:        return $this->contentType;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:152:        return $this->encoding;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:156:     * @param  string $contentType The content type of the email - Defaults to text/plain. Use text/html for HTML
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:166:        $this->contentType = $contentType;
./vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php:181:        $this->encoding = $encoding;
./vendor/monolog/monolog/src/Monolog/Handler/Curl/Util.php:34:        while ($retries--) {
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:22: * @see    https://api.slack.com/incoming-webhooks
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:54:        $this->webhookUrl = $webhookUrl;
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:56:        $this->slackRecord = new SlackRecord(
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:64:            $this->formatter
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:70:        return $this->slackRecord;
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:80:        $postData = $this->slackRecord->getSlackData($record);
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:85:            CURLOPT_URL => $this->webhookUrl,
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:88:            CURLOPT_HTTPHEADER => array('Content-type: application/json'),
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:103:        $this->slackRecord->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php:111:        $this->slackRecord->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:24: *   $syslog->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:25: *   $log->pushHandler($syslog);
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:45:        $this->ident = $ident;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:46:        $this->logopts = $logopts;
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:62:        if (!openlog($this->ident, $this->logopts, $this->facility)) {
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:63:            throw new \LogicException('Can\'t open syslog for ident "'.$this->ident.'" and facility "'.$this->facility.'"');
./vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php:65:        syslog($this->logLevels[$record['level']], (string) $record['formatted']);
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:37:        $this->handlers = $handlers;
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:38:        $this->bubble = $bubble;
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:46:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:47:            if ($handler->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:60:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:61:            foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:66:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:67:            $handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:70:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:78:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:81:                foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:88:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:89:            $handler->handleBatch($records);
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:98:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php:99:            $handler->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:29:        if (!$this->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:33:        $record = $this->processRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:35:        $record['formatted'] = $this->getFormatter()->format($record);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:37:        $this->write($record);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:39:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:58:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php:59:            foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:27:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:28:            foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:33:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:35:                $handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:43:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:51:        foreach ($this->handlers as $handler) {
./vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php:53:                $handler->handleBatch($records);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:59:        $this->slackRecord = new SlackRecord(
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:67:            $this->formatter
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:70:        $this->token = $token;
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:75:        return $this->slackRecord;
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:86:        $content = $this->buildContent($record);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:88:        return $this->buildHeader($content) . $content;
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:99:        $dataArray = $this->prepareContentData($record);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:112:        $dataArray = $this->slackRecord->getSlackData($record);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:113:        $dataArray['token'] = $this->token;
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:132:        $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:133:        $header .= "Content-Length: " . strlen($content) . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:147:        $this->finalizeWrite();
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:158:        $res = $this->getResource();
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:162:        $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:180:        return $this->slackRecord->getAttachmentColor($level);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:197:        return $this->slackRecord->stringify($fields);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:203:        $this->slackRecord->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php:211:        $this->slackRecord->setFormatter($formatter);
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:47:        $this->handler = $handler;
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:48:        $this->factor = $factor;
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:50:        if (!$this->handler instanceof HandlerInterface && !is_callable($this->handler)) {
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:51:            throw new \RuntimeException("The given handler (".json_encode($this->handler).") is not a callable nor a Monolog\Handler\HandlerInterface object");
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:57:        return $this->handler->isHandling($record);
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:62:        if ($this->isHandling($record) && mt_rand(1, $this->factor) === 1) {
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:64:            if (!$this->handler instanceof HandlerInterface) {
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:65:                $this->handler = call_user_func($this->handler, $record, $this);
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:66:                if (!$this->handler instanceof HandlerInterface) {
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:71:            if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:72:                foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:77:            $this->handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php:80:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:32: *    $log->pushHandler($handler);
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:57:        $this->client = $client;
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:58:        $this->options = array_merge(
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:73:        $this->bulkSend(array($record['formatted']));
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:93:        return $this->options;
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:101:        return new ElasticaFormatter($this->options['index'], $this->options['type']);
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:109:        $documents = $this->getFormatter()->formatBatch($records);
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:110:        $this->bulkSend($documents);
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:121:            $this->client->addDocuments($documents);
./vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php:123:            if (!$this->options['ignore_error']) {
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:23: * @link https://github.com/aws/aws-sdk-php/
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:28:    const DATE_FORMAT = 'Y-m-d\TH:i:s.uO';
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:59:            $this->version = 3;
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:60:            $this->marshaler = new Marshaler;
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:62:            $this->version = 2;
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:65:        $this->client = $client;
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:66:        $this->table = $table;
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:76:        $filtered = $this->filterEmptyFields($record['formatted']);
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:77:        if ($this->version === 3) {
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:78:            $formatted = $this->marshaler->marshalItem($filtered);
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:80:            $formatted = $this->client->formatAttributes($filtered);
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:83:        $this->client->putItem(array(
./vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php:84:            'TableName' => $this->table,
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php:47:        $this->defaultActionLevel = Logger::toMonologLevel($defaultActionLevel);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php:48:        $this->channelToActionLevel = array_map('Monolog\Logger::toMonologLevel', $channelToActionLevel);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php:53:        if (isset($this->channelToActionLevel[$record['channel']])) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php:54:            return $record['level'] >= $this->channelToActionLevel[$record['channel']];
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php:57:        return $record['level'] >= $this->defaultActionLevel;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php:27:        $this->actionLevel = Logger::toMonologLevel($actionLevel);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php:32:        return $record['level'] >= $this->actionLevel;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:46:            $this->stream = $stream;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:48:            $this->url = $stream;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:53:        $this->filePermission = $filePermission;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:54:        $this->useLocking = $useLocking;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:62:        if ($this->url && is_resource($this->stream)) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:63:            fclose($this->stream);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:65:        $this->stream = null;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:75:        return $this->stream;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:85:        return $this->url;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:93:        if (!is_resource($this->stream)) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:94:            if (null === $this->url || '' === $this->url) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:97:            $this->createDir();
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:98:            $this->errorMessage = null;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:100:            $this->stream = fopen($this->url, 'a');
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:101:            if ($this->filePermission !== null) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:102:                @chmod($this->url, $this->filePermission);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:105:            if (!is_resource($this->stream)) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:106:                $this->stream = null;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:107:                throw new \UnexpectedValueException(sprintf('The stream or file "%s" could not be opened: '.$this->errorMessage, $this->url));
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:111:        if ($this->useLocking) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:113:            flock($this->stream, LOCK_EX);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:116:        $this->streamWrite($this->stream, $record);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:118:        if ($this->useLocking) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:119:            flock($this->stream, LOCK_UN);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:135:        $this->errorMessage = preg_replace('{^(fopen|mkdir)\(.*?\): }', '', $msg);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:160:        if ($this->dirCreated) {
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:164:        $dir = $this->getDirFromStream($this->url);
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:166:            $this->errorMessage = null;
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:171:                throw new \UnexpectedValueException(sprintf('There is no existing directory at "%s" and its not buildable: '.$this->errorMessage, $dir));
./vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php:174:        $this->dirCreated = true;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:17: * Stores to any socket - uses fsockopen() or pfsockopen().
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:43:        $this->connectionString = $connectionString;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:44:        $this->connectionTimeout = (float) ini_get('default_socket_timeout');
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:57:        $this->connectIfNotConnected();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:58:        $data = $this->generateDataStream($record);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:59:        $this->writeToSocket($data);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:67:        if (!$this->isPersistent()) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:68:            $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:77:        if (is_resource($this->resource)) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:78:            fclose($this->resource);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:79:            $this->resource = null;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:90:        $this->persistent = (boolean) $persistent;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:102:        $this->validateTimeout($seconds);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:103:        $this->connectionTimeout = (float) $seconds;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:111:     * @see http://php.net/manual/en/function.stream-set-timeout.php
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:115:        $this->validateTimeout($seconds);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:116:        $this->timeout = (float) $seconds;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:126:        $this->validateTimeout($seconds);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:127:        $this->writingTimeout = (float) $seconds;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:137:        return $this->connectionString;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:147:        return $this->persistent;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:157:        return $this->connectionTimeout;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:161:     * Get current in-transfer timeout
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:167:        return $this->timeout;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:177:        return $this->writingTimeout;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:189:        return is_resource($this->resource)
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:190:            && !feof($this->resource);  // on TCP - other party can close connection.
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:198:        return @pfsockopen($this->connectionString, -1, $this->errno, $this->errstr, $this->connectionTimeout);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:206:        return @fsockopen($this->connectionString, -1, $this->errno, $this->errstr, $this->connectionTimeout);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:212:     * @see http://php.net/manual/en/function.stream-set-timeout.php
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:216:        $seconds = floor($this->timeout);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:217:        $microseconds = round(($this->timeout - $seconds) * 1e6);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:219:        return stream_set_timeout($this->resource, $seconds, $microseconds);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:227:        return @fwrite($this->resource, $data);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:235:        return stream_get_meta_data($this->resource);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:248:        if ($this->isConnected()) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:251:        $this->connect();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:264:        return $this->resource;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:269:        $this->createSocketResource();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:270:        $this->setSocketTimeout();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:275:        if ($this->isPersistent()) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:276:            $resource = $this->pfsockopen();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:278:            $resource = $this->fsockopen();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:281:            throw new \UnexpectedValueException("Failed connecting to $this->connectionString ($this->errno: $this->errstr)");
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:283:        $this->resource = $resource;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:288:        if (!$this->streamSetTimeout()) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:297:        $this->lastSentBytes = $sent;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:298:        while ($this->isConnected() && $sent < $length) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:300:                $chunk = $this->fwrite($data);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:302:                $chunk = $this->fwrite(substr($data, $sent));
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:308:            $socketInfo = $this->streamGetMetadata();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:310:                throw new \RuntimeException("Write timed-out");
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:313:            if ($this->writingIsTimedOut($sent)) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:314:                throw new \RuntimeException("Write timed-out, no data sent for `{$this->writingTimeout}` seconds, probably we got disconnected (sent $sent of $length)");
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:317:        if (!$this->isConnected() && $sent < $length) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:318:            throw new \RuntimeException("End-of-file reached, probably we got disconnected (sent $sent of $length)");
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:324:        $writingTimeout = (int) floor($this->writingTimeout);
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:329:        if ($sent !== $this->lastSentBytes) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:330:            $this->lastWritingAt = time();
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:331:            $this->lastSentBytes = $sent;
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:338:        if ((time() - $this->lastWritingAt) >= $writingTimeout) {
./vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php:339:            $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:69:        $this->deduplicationStore = $deduplicationStore === null ? sys_get_temp_dir() . '/monolog-dedup-' . substr(md5(__FILE__), 0, 20) .'.log' : $deduplicationStore;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:70:        $this->deduplicationLevel = Logger::toMonologLevel($deduplicationLevel);
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:71:        $this->time = $time;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:76:        if ($this->bufferSize === 0) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:82:        foreach ($this->buffer as $record) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:83:            if ($record['level'] >= $this->deduplicationLevel) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:85:                $passthru = $passthru || !$this->isDuplicate($record);
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:87:                    $this->appendRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:94:            $this->handler->handleBatch($this->buffer);
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:97:        $this->clear();
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:99:        if ($this->gc) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:100:            $this->collectLogs();
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:106:        if (!file_exists($this->deduplicationStore)) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:110:        $store = file($this->deduplicationStore, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:115:        $yesterday = time() - 86400;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:116:        $timestampValidity = $record['datetime']->getTimestamp() - $this->time;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:119:        for ($i = count($store) - 1; $i >= 0; $i--) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:127:                $this->gc = true;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:136:        if (!file_exists($this->deduplicationStore)) {
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:140:        $handle = fopen($this->deduplicationStore, 'rw+');
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:144:        $timestampValidity = time() - $this->time;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:162:        $this->gc = false;
./vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php:167:        file_put_contents($this->deduplicationStore, $record['datetime']->getTimestamp() . ':' . $record['level_name'] . ':' . preg_replace('{[\r\n].*}', '', $record['message']) . "\n", FILE_APPEND);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:59:        $this->handler = $handler;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:60:        $this->activationStrategy = $activationStrategy;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:61:        $this->bufferSize = $bufferSize;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:62:        $this->bubble = $bubble;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:63:        $this->stopBuffering = $stopBuffering;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:66:            $this->passthruLevel = Logger::toMonologLevel($passthruLevel);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:69:        if (!$this->handler instanceof HandlerInterface && !is_callable($this->handler)) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:70:            throw new \RuntimeException("The given handler (".json_encode($this->handler).") is not a callable nor a Monolog\Handler\HandlerInterface object");
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:87:        if ($this->stopBuffering) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:88:            $this->buffering = false;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:90:        if (!$this->handler instanceof HandlerInterface) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:91:            $record = end($this->buffer) ?: null;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:93:            $this->handler = call_user_func($this->handler, $record, $this);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:94:            if (!$this->handler instanceof HandlerInterface) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:98:        $this->handler->handleBatch($this->buffer);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:99:        $this->buffer = array();
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:107:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:108:            foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:113:        if ($this->buffering) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:114:            $this->buffer[] = $record;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:115:            if ($this->bufferSize > 0 && count($this->buffer) > $this->bufferSize) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:116:                array_shift($this->buffer);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:118:            if ($this->activationStrategy->isHandlerActivated($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:119:                $this->activate();
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:122:            $this->handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:125:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:133:        if (null !== $this->passthruLevel) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:134:            $level = $this->passthruLevel;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:135:            $this->buffer = array_filter($this->buffer, function ($record) use ($level) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:138:            if (count($this->buffer) > 0) {
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:139:                $this->handler->handleBatch($this->buffer);
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:140:                $this->buffer = array();
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:150:        $this->buffering = true;
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:160:        $this->buffer = array();
./vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php:161:        $this->reset();
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:28:        $this->options = array_merge(array(
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:45:        if ($this->options['username']) {
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:46:            $basicAuth = sprintf('%s:%s@', $this->options['username'], $this->options['password']);
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:49:        $url = 'http://'.$basicAuth.$this->options['host'].':'.$this->options['port'].'/'.$this->options['dbname'];
./vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php:56:                'header'        => 'Content-type: application/json',
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:20: * API token - HipChat API token
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:21: * Room      - HipChat Room Id or name, where messages are sent
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:22: * Name      - Name used to send the message (from)
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:23: * notify    - Should the message trigger a notification in the clients
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:24: * version   - The API version to use (HipChatHandler::API_V1 | HipChatHandler::API_V2)
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:100:        if ($version == self::API_V1 && !$this->validateStringLength($name, static::MAXIMUM_NAME_LENGTH)) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:101:            throw new \InvalidArgumentException('The supplied name is too long. HipChat\'s v1 API supports names up to 15 UTF-8 characters.');
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:107:        $this->token = $token;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:108:        $this->name = $name;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:109:        $this->notify = $notify;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:110:        $this->room = $room;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:111:        $this->format = $format;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:112:        $this->host = $host;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:113:        $this->version = $version;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:124:        $content = $this->buildContent($record);
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:126:        return $this->buildHeader($content) . $content;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:138:            'notify' => $this->version == self::API_V1 ?
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:139:                ($this->notify ? 1 : 0) :
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:140:                ($this->notify ? 'true' : 'false'),
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:142:            'message_format' => $this->format,
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:143:            'color' => $this->getAlertColor($record['level']),
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:146:        if (!$this->validateStringLength($dataArray['message'], static::MAXIMUM_MESSAGE_LENGTH)) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:155:        if ($this->version == self::API_V1) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:156:            $dataArray['room_id'] = $this->room;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:161:        if ($this->version == self::API_V1 || $this->name !== null) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:162:            $dataArray['from'] = (string) $this->name;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:176:        if ($this->version == self::API_V1) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:177:            $header = "POST /v1/rooms/message?format=json&auth_token={$this->token} HTTP/1.1\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:180:            $room = rawurlencode($this->room);
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:181:            $header = "POST /v2/room/{$room}/notification?auth_token={$this->token} HTTP/1.1\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:184:        $header .= "Host: {$this->host}\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:185:        $header .= "Content-Type: application/x-www-form-urlencoded\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:186:        $header .= "Content-Length: " . strlen($content) . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:222:        $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:234:        $batchRecords = $this->combineRecords($records);
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:238:            if ($this->isHandling($batchRecord)) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:239:                $this->write($batchRecord);
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:248:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:270:            $record = $this->processRecord($record);
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:283:            $formattedMessages[] = $this->getFormatter()->format($record);
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:293:            if (!$this->validateStringLength($batchRecord['formatted'], static::MAXIMUM_MESSAGE_LENGTH)) {
./vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php:331:     * allows UTF-8 characters. Otherwise, it will fall back to `strlen()`.
./vendor/monolog/monolog/src/Monolog/Handler/LogEntriesHandler.php:42:        $this->logToken = $token;
./vendor/monolog/monolog/src/Monolog/Handler/LogEntriesHandler.php:53:        return $this->logToken . ' ' . $record['formatted'];
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:55:        $this->handler  = $handler;
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:56:        $this->bubble   = $bubble;
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:57:        $this->setAcceptedLevels($minLevelOrList, $maxLevel);
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:59:        if (!$this->handler instanceof HandlerInterface && !is_callable($this->handler)) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:60:            throw new \RuntimeException("The given handler (".json_encode($this->handler).") is not a callable nor a Monolog\Handler\HandlerInterface object");
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:69:        return array_flip($this->acceptedLevels);
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:87:        $this->acceptedLevels = array_flip($acceptedLevels);
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:95:        return isset($this->acceptedLevels[$record['level']]);
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:103:        if (!$this->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:108:        if (!$this->handler instanceof HandlerInterface) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:109:            $this->handler = call_user_func($this->handler, $record, $this);
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:110:            if (!$this->handler instanceof HandlerInterface) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:115:        if ($this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:116:            foreach ($this->processors as $processor) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:121:        $this->handler->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:123:        return false === $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:133:            if ($this->isHandling($record)) {
./vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php:138:        $this->handler->handleBatch($filtered);
./vendor/monolog/monolog/src/Monolog/Handler/NullHandler.php:39:        if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:24: *   $log->pushHandler($redis);
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:47:        $this->redisClient = $redis;
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:48:        $this->redisKey = $key;
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:49:        $this->capSize = $capSize;
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:59:        if ($this->capSize) {
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:60:            $this->writeCapped($record);
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:62:            $this->redisClient->rpush($this->redisKey, $record["formatted"]);
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:75:        if ($this->redisClient instanceof \Redis) {
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:76:            $this->redisClient->multi()
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:77:                ->rpush($this->redisKey, $record["formatted"])
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:78:                ->ltrim($this->redisKey, -$this->capSize, -1)
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:79:                ->exec();
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:81:            $redisKey = $this->redisKey;
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:82:            $capSize = $this->capSize;
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:83:            $this->redisClient->transaction(function ($tx) use ($record, $redisKey, $capSize) {
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:84:                $tx->rpush($redisKey, $record["formatted"]);
./vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php:85:                $tx->ltrim($redisKey, -$capSize, -1);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:21: * using raven-php (https://github.com/getsentry/raven-php)
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:23: * @author Marc Abramowitz <marc@marc-abramowitz.com>
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:66:        $this->ravenClient = $ravenClient;
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:74:        $level = $this->level;
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:97:            $logs[] = $this->processRecord($r);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:101:            $record['context']['logs'] = (string) $this->getBatchFormatter()->formatBatch($logs);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:104:        $this->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:114:        $this->batchFormatter = $formatter;
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:124:        if (!$this->batchFormatter) {
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:125:            $this->batchFormatter = $this->getDefaultBatchFormatter();
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:128:        return $this->batchFormatter;
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:138:        $options['level'] = $this->logLevels[$record['level']];
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:158:        foreach ($this->getExtraParameters() as $key) {
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:169:                $previousUserContext = $this->ravenClient->context->user;
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:170:                $this->ravenClient->user_context($record['context']['user']);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:178:        if (!empty($this->release) && !isset($options['release'])) {
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:179:            $options['release'] = $this->release;
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:184:            $this->ravenClient->captureException($record['context']['exception'], $options);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:186:            $this->ravenClient->captureMessage($record['formatted'], array(), $options);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:190:            $this->ravenClient->user_context($previousUserContext);
./vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php:228:        $this->release = $value;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:27:    const FILE_PER_DAY = 'Y-m-d';
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:28:    const FILE_PER_MONTH = 'Y-m';
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:48:        $this->filename = $filename;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:49:        $this->maxFiles = (int) $maxFiles;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:50:        $this->nextRotation = new \DateTime('tomorrow');
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:51:        $this->filenameFormat = '{filename}-{date}';
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:52:        $this->dateFormat = 'Y-m-d';
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:54:        parent::__construct($this->getTimedFilename(), $level, $bubble, $filePermission, $useLocking);
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:64:        if (true === $this->mustRotate) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:65:            $this->rotate();
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:71:        if (!preg_match('{^Y(([/_.-]?m)([/_.-]?d)?)?$}', $dateFormat)) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:73:                'Invalid date format - format must be one of '.
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:74:                'RotatingFileHandler::FILE_PER_DAY ("Y-m-d"), RotatingFileHandler::FILE_PER_MONTH ("Y-m") '.
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:82:                'Invalid filename format - format should contain at least `{date}`, because otherwise rotating is impossible.',
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:86:        $this->filenameFormat = $filenameFormat;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:87:        $this->dateFormat = $dateFormat;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:88:        $this->url = $this->getTimedFilename();
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:89:        $this->close();
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:98:        if (null === $this->mustRotate) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:99:            $this->mustRotate = !file_exists($this->url);
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:102:        if ($this->nextRotation < $record['datetime']) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:103:            $this->mustRotate = true;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:104:            $this->close();
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:116:        $this->url = $this->getTimedFilename();
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:117:        $this->nextRotation = new \DateTime('tomorrow');
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:120:        if (0 === $this->maxFiles) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:124:        $logFiles = glob($this->getGlobPattern());
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:125:        if ($this->maxFiles >= count($logFiles)) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:135:        foreach (array_slice($logFiles, $this->maxFiles) as $file) {
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:145:        $this->mustRotate = false;
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:150:        $fileInfo = pathinfo($this->filename);
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:153:            array($fileInfo['filename'], date($this->dateFormat)),
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:154:            $fileInfo['dirname'] . '/' . $this->filenameFormat
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:166:        $fileInfo = pathinfo($this->filename);
./vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php:170:            $fileInfo['dirname'] . '/' . $this->filenameFormat
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:65:            $this->facilities['local0'] = LOG_LOCAL0;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:66:            $this->facilities['local1'] = LOG_LOCAL1;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:67:            $this->facilities['local2'] = LOG_LOCAL2;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:68:            $this->facilities['local3'] = LOG_LOCAL3;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:69:            $this->facilities['local4'] = LOG_LOCAL4;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:70:            $this->facilities['local5'] = LOG_LOCAL5;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:71:            $this->facilities['local6'] = LOG_LOCAL6;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:72:            $this->facilities['local7'] = LOG_LOCAL7;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:74:            $this->facilities['local0'] = 128; // LOG_LOCAL0
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:75:            $this->facilities['local1'] = 136; // LOG_LOCAL1
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:76:            $this->facilities['local2'] = 144; // LOG_LOCAL2
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:77:            $this->facilities['local3'] = 152; // LOG_LOCAL3
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:78:            $this->facilities['local4'] = 160; // LOG_LOCAL4
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:79:            $this->facilities['local5'] = 168; // LOG_LOCAL5
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:80:            $this->facilities['local6'] = 176; // LOG_LOCAL6
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:81:            $this->facilities['local7'] = 184; // LOG_LOCAL7
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:85:        if (array_key_exists(strtolower($facility), $this->facilities)) {
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:86:            $facility = $this->facilities[strtolower($facility)];
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:87:        } elseif (!in_array($facility, array_values($this->facilities), true)) {
./vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php:91:        $this->facility = $facility;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:40:        $this->setLevel($level);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:41:        $this->bubble = $bubble;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:49:        return $record['level'] >= $this->level;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:58:            $this->handle($record);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:79:        array_unshift($this->processors, $callback);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:89:        if (!$this->processors) {
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:93:        return array_shift($this->processors);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:101:        $this->formatter = $formatter;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:111:        if (!$this->formatter) {
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:112:            $this->formatter = $this->getDefaultFormatter();
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:115:        return $this->formatter;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:126:        $this->level = Logger::toMonologLevel($level);
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:138:        return $this->level;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:150:        $this->bubble = $bubble;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:163:        return $this->bubble;
./vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php:169:            $this->close();
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:24: * API token - Flowdock API token
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:50:        $this->apiToken = $apiToken;
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:84:        $this->closeSocket();
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:95:        $content = $this->buildContent($record);
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:97:        return $this->buildHeader($content) . $content;
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:119:        $header = "POST /v1/messages/team_inbox/" . $this->apiToken . " HTTP/1.1\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:121:        $header .= "Content-Type: application/json\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php:122:        $header .= "Content-Length: " . strlen($content) . "\r\n";
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:27: *  - level (rollbar level name)
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:28: *  - monolog_level (monolog level name, raw level, as rollbar only has 5 but monolog 8)
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:29: *  - channel
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:30: *  - datetime (unix timestamp)
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:70:        $this->rollbarNotifier = $rollbarNotifier;
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:80:        if (!$this->initialized) {
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:83:            $this->initialized = true;
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:93:            'level' => $this->levelMap[$record['level']],
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:96:            'datetime' => $record['datetime']->format('U'),
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:104:            $this->rollbarNotifier->report_exception($exception, $context, $payload);
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:106:            $this->rollbarNotifier->report_message(
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:114:        $this->hasRecords = true;
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:119:        if ($this->hasRecords) {
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:120:            $this->rollbarNotifier->flush();
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:121:            $this->hasRecords = false;
./vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php:130:        $this->flush();
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:73:        return $this->records;
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:78:        $this->records = array();
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:79:        $this->recordsByLevel = array();
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:84:        return isset($this->recordsByLevel[$level]);
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:93:        return $this->hasRecordThatPasses(function ($rec) use ($record) {
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:100:        return $this->hasRecordThatPasses(function ($rec) use ($message) {
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:107:        return $this->hasRecordThatPasses(function ($rec) use ($regex) {
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:118:        if (!isset($this->recordsByLevel[$level])) {
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:122:        foreach ($this->recordsByLevel[$level] as $i => $rec) {
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:136:        $this->recordsByLevel[$record['level']][] = $record;
./vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php:137:        $this->records[] = $record;
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:38:        $this->mailer = $mailer;
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:39:        $this->messageTemplate = $message;
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:47:        $this->mailer->send($this->buildMessage($content, $records));
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:60:        if ($this->messageTemplate instanceof \Swift_Message) {
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:61:            $message = clone $this->messageTemplate;
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:62:            $message->generateId();
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:63:        } elseif (is_callable($this->messageTemplate)) {
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:64:            $message = call_user_func($this->messageTemplate, $content, $records);
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:72:            $subjectFormatter = new LineFormatter($message->getSubject());
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:73:            $message->setSubject($subjectFormatter->format($this->getHighestRecord($records)));
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:76:        $message->setBody($content);
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:78:            $message->setDate(new \DateTimeImmutable());
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:80:            $message->setDate(time());
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:92:            trigger_error('SwiftMailerHandler->message is deprecated, use ->buildMessage() instead to retrieve the message', E_USER_DEPRECATED);
./vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php:94:            return $this->buildMessage(null, array());
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:23: * @see    https://api.slack.com/incoming-webhooks
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:24: * @see    https://api.slack.com/docs/message-attachments
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:90:        $this->channel = $channel;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:91:        $this->username = $username;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:92:        $this->userIcon = trim($userIcon, ':');
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:93:        $this->useAttachment = $useAttachment;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:94:        $this->useShortAttachment = $useShortAttachment;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:95:        $this->includeContextAndExtra = $includeContextAndExtra;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:96:        $this->excludeFields = $excludeFields;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:97:        $this->formatter = $formatter;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:99:        if ($this->includeContextAndExtra) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:100:            $this->normalizerFormatter = new NormalizerFormatter();
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:107:        $record = $this->excludeFields($record);
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:109:        if ($this->username) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:110:            $dataArray['username'] = $this->username;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:113:        if ($this->channel) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:114:            $dataArray['channel'] = $this->channel;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:117:        if ($this->formatter && !$this->useAttachment) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:118:            $message = $this->formatter->format($record);
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:123:        if ($this->useAttachment) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:127:                'color'     => $this->getAttachmentColor($record['level']),
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:130:                'ts'        => $record['datetime']->getTimestamp()
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:133:            if ($this->useShortAttachment) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:137:                $attachment['fields'][] = $this->generateAttachmentField('Level', $record['level_name']);
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:141:            if ($this->includeContextAndExtra) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:147:                    if ($this->useShortAttachment) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:148:                        $attachment['fields'][] = $this->generateAttachmentField(
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:156:                            $this->generateAttachmentFields($record[$key])
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:167:        if ($this->userIcon) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:168:            if (filter_var($this->userIcon, FILTER_VALIDATE_URL)) {
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:169:                $dataArray['icon_url'] = $this->userIcon;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:171:                $dataArray['icon_emoji'] = ":{$this->userIcon}:";
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:208:        $normalized = $this->normalizerFormatter->format($fields);
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:226:        $this->formatter = $formatter;
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:240:            ? sprintf('```%s```', $this->stringify($value))
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:261:            $fields[] = $this->generateAttachmentField($key, $value);
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:268:     * Get a copy of record with fields excluded according to $this->excludeFields
./vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php:276:        foreach ($this->excludeFields as $field) {
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:42:        $this->message = $message;
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:43:        $this->apiKey = $apiKey;
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:51:        $message = clone $this->message;
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:52:        $message->setBody($content);
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:53:        $message->setDate(time());
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:57:        curl_setopt($ch, CURLOPT_URL, 'https://mandrillapp.com/api/1.0/messages/send-raw.json');
./vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php:61:            'key' => $this->apiKey,
./vendor/monolog/monolog/src/Monolog/Handler/DoctrineCouchDBHandler.php:29:        $this->client = $client;
./vendor/monolog/monolog/src/Monolog/Handler/DoctrineCouchDBHandler.php:38:        $this->client->postDocument($record['formatted']);
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:33:     *     You can do [[blue text]]{color: blue} or [[green background]]{background-color: green; color: white}
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:37:        return new LineFormatter('[[%channel%]]{macro: autolabel} [[%level_name%]]{font-weight: bold} %message%');
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:51:            $this->registerShutdownFunction();
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:107:     * If Content-Type is set to application/javascript or text/javascript -> js
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:108:     * If Content-Type is set to text/html, or is unset -> html
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:109:     * If Content-Type is anything else -> unknown
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:117:            if (stripos($header, 'content-type:') === 0) {
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:157:        $args = array(self::quote('font-weight: normal'));
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:163:            $args[] = '"font-weight: normal"';
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:187:                return "background-color: $color; color: white; border-radius: 3px; padding: 0 2px 0 2px";
./vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php:201:        $script[] = self::call('log', self::quote('%c%s'), self::quote('font-weight: bold'), self::quote($title));
./vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php:37:        $this->realUsage = (boolean) $realUsage;
./vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php:38:        $this->useFormatting = (boolean) $useFormatting;
./vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php:42:     * Formats bytes into a human readable string if $this->useFormatting is true, otherwise return $bytes as is
./vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php:45:     * @return string|int Formatted string if $this->useFormatting is true, otherwise return $bytes as is
./vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php:51:        if (!$this->useFormatting) {
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:48:            $this->serverData = &$_SERVER;
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:50:            $this->serverData = $serverData;
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:57:                foreach (array_keys($this->extraFields) as $fieldName) {
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:59:                        unset($this->extraFields[$fieldName]);
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:63:                $this->extraFields = $extraFields;
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:76:        if (!isset($this->serverData['REQUEST_URI'])) {
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:80:        $record['extra'] = $this->appendExtraFields($record['extra']);
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:92:        $this->extraFields[$extraName] = $serverName;
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:103:        foreach ($this->extraFields as $extraName => $serverName) {
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:104:            $extra[$extraName] = isset($this->serverData[$serverName]) ? $this->serverData[$serverName] : null;
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:107:        if (isset($this->serverData['UNIQUE_ID'])) {
./vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php:108:            $extra['unique_id'] = $this->serverData['UNIQUE_ID'];
./vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php:29:        $this->uid = substr(hash('md5', uniqid('', true)), 0, $length);
./vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php:34:        $record['extra']['uid'] = $this->uid;
./vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php:44:        return $this->uid;
./vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php:15: * Processes a record's message according to PSR-3 rules
./vendor/monolog/monolog/src/Monolog/Processor/MercurialProcessor.php:28:        $this->level = Logger::toMonologLevel($level);
./vendor/monolog/monolog/src/Monolog/Processor/MercurialProcessor.php:38:        if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Processor/MercurialProcessor.php:53:        $result = explode(' ', trim(`hg id -nb`));
./vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php:25:        $this->setTags($tags);
./vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php:30:        $this->tags = array_merge($this->tags, $tags);
./vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php:35:        $this->tags = $tags;
./vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php:40:        $record['extra']['tags'] = $this->tags;
./vendor/monolog/monolog/src/Monolog/Processor/MemoryUsageProcessor.php:28:        $bytes = memory_get_usage($this->realUsage);
./vendor/monolog/monolog/src/Monolog/Processor/MemoryUsageProcessor.php:29:        $formatted = $this->formatBytes($bytes);
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:42:        $this->level = Logger::toMonologLevel($level);
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:43:        $this->skipClassesPartials = array_merge(array('Monolog\\'), $skipClassesPartials);
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:44:        $this->skipStackFramesCount = $skipStackFramesCount;
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:54:        if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:59:        * http://php.net/manual/en/function.debug-backtrace.php
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:72:        while ($this->isTraceClassOrSkippedFunction($trace, $i)) {
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:74:                foreach ($this->skipClassesPartials as $part) {
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:80:            } elseif (in_array($trace[$i]['function'], $this->skipFunctions)) {
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:88:        $i += $this->skipStackFramesCount;
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:94:                'file'      => isset($trace[$i - 1]['file']) ? $trace[$i - 1]['file'] : null,
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:95:                'line'      => isset($trace[$i - 1]['line']) ? $trace[$i - 1]['line'] : null,
./vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php:110:        return isset($trace[$index]['class']) || in_array($trace[$index]['function'], $this->skipFunctions);
./vendor/monolog/monolog/src/Monolog/Processor/MemoryPeakUsageProcessor.php:28:        $bytes = memory_get_peak_usage($this->realUsage);
./vendor/monolog/monolog/src/Monolog/Processor/MemoryPeakUsageProcessor.php:29:        $formatted = $this->formatBytes($bytes);
./vendor/monolog/monolog/src/Monolog/Processor/GitProcessor.php:29:        $this->level = Logger::toMonologLevel($level);
./vendor/monolog/monolog/src/Monolog/Processor/GitProcessor.php:39:        if ($record['level'] < $this->level) {
./vendor/monolog/monolog/src/Monolog/Processor/GitProcessor.php:54:        $branches = `git branch -v --no-abbrev`;
./vendor/monolog/monolog/src/Monolog/Processor/GitProcessor.php:55:        if (preg_match('{^\* (.+?)\s+([a-f0-9]{40})(?:\s|$)}m', $branches, $matches)) {
./vendor/monolog/monolog/composer.json:4:    "keywords": ["log", "logging", "psr-3"],
./vendor/monolog/monolog/composer.json:19:    "require-dev": {
./vendor/monolog/monolog/composer.json:21:        "graylog2/gelf-php": "~1.0",
./vendor/monolog/monolog/composer.json:25:        "aws/aws-sdk-php": "^2.4.9 || ^3.0",
./vendor/monolog/monolog/composer.json:26:        "php-amqplib/php-amqplib": "~2.4",
./vendor/monolog/monolog/composer.json:28:        "php-console/php-console": "^3.1.3",
./vendor/monolog/monolog/composer.json:29:        "phpunit/phpunit-mock-objects": "2.3.0",
./vendor/monolog/monolog/composer.json:30:        "jakub-onderka/php-parallel-lint": "0.9"
./vendor/monolog/monolog/composer.json:32:    "_": "phpunit/phpunit-mock-objects required in 2.3.0 due to https://github.com/sebastianbergmann/phpunit-mock-objects/issues/223 - needs hhvm 3.8+ on travis",
./vendor/monolog/monolog/composer.json:34:        "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
./vendor/monolog/monolog/composer.json:38:        "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
./vendor/monolog/monolog/composer.json:39:        "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
./vendor/monolog/monolog/composer.json:40:        "ext-mongo": "Allow sending log messages to a MongoDB server",
./vendor/monolog/monolog/composer.json:42:        "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
./vendor/monolog/monolog/composer.json:44:        "php-console/php-console": "Allow sending log messages to Google Chrome"
./vendor/monolog/monolog/composer.json:47:        "psr-4": {"Monolog\\": "src/Monolog"}
./vendor/monolog/monolog/composer.json:49:    "autoload-dev": {
./vendor/monolog/monolog/composer.json:50:        "psr-4": {"Monolog\\": "tests/Monolog"}
./vendor/monolog/monolog/composer.json:53:        "psr/log-implementation": "1.0.0"
./vendor/monolog/monolog/composer.json:56:        "branch-alias": {
./vendor/monolog/monolog/composer.json:57:            "dev-master": "2.0.x-dev"
./vendor/monolog/monolog/composer.json:62:            "parallel-lint . --exclude vendor",
./vendor/monolog/monolog/README.md:1:# Monolog - Logging for PHP [![Build Status](https://img.shields.io/travis/Seldaek/monolog.svg)](https://travis-ci.org/Seldaek/monolog)
./vendor/monolog/monolog/README.md:12:This library implements the [PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md)
./vendor/monolog/monolog/README.md:13:interface that you can type-hint against in your own libraries to keep
./vendor/monolog/monolog/README.md:16:As of 1.11.0 Monolog public APIs will also accept PSR-3 log levels.
./vendor/monolog/monolog/README.md:17:Internally Monolog still uses its own level scheme since it predates PSR-3.
./vendor/monolog/monolog/README.md:37:$log->pushHandler(new StreamHandler('path/to/your.log', Logger::WARNING));
./vendor/monolog/monolog/README.md:40:$log->addWarning('Foo');
./vendor/monolog/monolog/README.md:41:$log->addError('Bar');
./vendor/monolog/monolog/README.md:46:- [Usage Instructions](doc/01-usage.md)
./vendor/monolog/monolog/README.md:47:- [Handlers, Formatters and Processors](doc/02-handlers-formatters-processors.md)
./vendor/monolog/monolog/README.md:48:- [Utility classes](doc/03-utilities.md)
./vendor/monolog/monolog/README.md:49:- [Extending Monolog](doc/04-extending.md)
./vendor/monolog/monolog/README.md:54:[listed in the wiki](https://github.com/Seldaek/monolog/wiki/Third-Party-Packages). You
./vendor/monolog/monolog/README.md:61:- Monolog works with PHP 5.3 or above, and is also tested to work with HHVM.
./vendor/monolog/monolog/README.md:69:- Frameworks and libraries using [PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md)
./vendor/monolog/monolog/README.md:71:- [Symfony2](http://symfony.com) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:72:- [Silex](http://silex.sensiolabs.org/) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:73:- [Laravel 4 & 5](http://laravel.com/) come out of the box with Monolog.
./vendor/monolog/monolog/README.md:74:- [Lumen](http://lumen.laravel.com/) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:75:- [PPI](http://www.ppi.io/) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:76:- [CakePHP](http://cakephp.org/) is usable with Monolog via the [cakephp-monolog](https://github.com/jadb/cakephp-monolog) plugin.
./vendor/monolog/monolog/README.md:77:- [Slim](http://www.slimframework.com/) is usable with Monolog via the [Slim-Monolog](https://github.com/Flynsarmy/Slim-Monolog) log writer.
./vendor/monolog/monolog/README.md:78:- [XOOPS 2.6](http://xoops.org/) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:79:- [Aura.Web_Project](https://github.com/auraphp/Aura.Web_Project) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:80:- [Nette Framework](http://nette.org/en/) can be used with Monolog via [Kdyby/Monolog](https://github.com/Kdyby/Monolog) extension.
./vendor/monolog/monolog/README.md:81:- [Proton Micro Framework](https://github.com/alexbilbie/Proton) comes out of the box with Monolog.
./vendor/monolog/monolog/README.md:85:Jordi Boggiano - <j.boggiano@seld.be> - <http://twitter.com/seldaek><br />
./vendor/monolog/monolog/README.md:90:Monolog is licensed under the MIT License - see the `LICENSE` file for details
./vendor/monolog/monolog/phpunit.xml.dist:1:<?xml version="1.0" encoding="UTF-8"?>
./vendor/monolog/monolog/.php_cs:13:    ->files()
./vendor/monolog/monolog/.php_cs:14:    ->name('*.php')
./vendor/monolog/monolog/.php_cs:15:    ->exclude('Fixtures')
./vendor/monolog/monolog/.php_cs:16:    ->in(__DIR__.'/src')
./vendor/monolog/monolog/.php_cs:17:    ->in(__DIR__.'/tests')
./vendor/monolog/monolog/.php_cs:21:    ->setUsingCache(true)
./vendor/monolog/monolog/.php_cs:22:    //->setUsingLinter(false)
./vendor/monolog/monolog/.php_cs:23:    ->setRiskyAllowed(true)
./vendor/monolog/monolog/.php_cs:24:    ->setRules(array(
./vendor/monolog/monolog/.php_cs:58:    ->finder($finder)
./vendor/monolog/monolog/doc/sockets.md:13:-------------
./vendor/monolog/monolog/doc/sockets.md:26:$handler->setPersistent(true);
./vendor/monolog/monolog/doc/sockets.md:29:$logger->pushHandler($handler, Logger::DEBUG);
./vendor/monolog/monolog/doc/sockets.md:32:$logger->addInfo('My logger is now ready');
./vendor/monolog/monolog/doc/sockets.md:36:In this example, using syslog-ng, you should see the log on the log server:
./vendor/monolog/monolog/doc/sockets.md:38:    cweb1 [2012-02-26 00:12:03] my_logger.INFO: My logger is now ready [] []
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:3:- [Handlers](#handlers)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:4:  - [Log to files and syslog](#log-to-files-and-syslog)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:5:  - [Send alerts and emails](#send-alerts-and-emails)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:6:  - [Log specific servers and networked logging](#log-specific-servers-and-networked-logging)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:7:  - [Logging in development](#logging-in-development)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:8:  - [Log to databases](#log-to-databases)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:9:  - [Wrappers / Special Handlers](#wrappers--special-handlers)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:10:- [Formatters](#formatters)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:11:- [Processors](#processors)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:12:- [Third Party Packages](#third-party-packages)
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:18:- _StreamHandler_: Logs records into any PHP stream, use this for log files.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:19:- _RotatingFileHandler_: Logs records to a file and creates one logfile per day.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:23:- _SyslogHandler_: Logs records to the syslog.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:24:- _ErrorLogHandler_: Logs records to PHP's
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:25:  [`error_log()`](http://docs.php.net/manual/en/function.error-log.php) function.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:29:- _NativeMailerHandler_: Sends emails using PHP's
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:31:- _SwiftMailerHandler_: Sends emails using a [`Swift_Mailer`](http://swiftmailer.org/) instance.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:32:- _PushoverHandler_: Sends mobile notifications via the [Pushover](https://www.pushover.net/) API.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:33:- _HipChatHandler_: Logs records to a [HipChat](http://hipchat.com) chat room using its API.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:34:- _FlowdockHandler_: Logs records to a [Flowdock](https://www.flowdock.com/) account.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:35:- _SlackHandler_: Logs records to a [Slack](https://www.slack.com/) account using the Slack API.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:36:- _SlackbotHandler_: Logs records to a [Slack](https://www.slack.com/) account using the Slackbot incoming hook.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:37:- _SlackWebhookHandler_: Logs records to a [Slack](https://www.slack.com/) account using Slack Webhooks.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:38:- _MandrillHandler_: Sends emails via the Mandrill API using a [`Swift_Message`](http://swiftmailer.org/) instance.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:39:- _FleepHookHandler_: Logs records to a [Fleep](https://fleep.io/) conversation using Webhooks.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:40:- _IFTTTHandler_: Notifies an [IFTTT](https://ifttt.com/maker) trigger with the log channel, level name and message.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:44:- _SocketHandler_: Logs records to [sockets](http://php.net/fsockopen), use this
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:46:- _AmqpHandler_: Logs records to an [amqp](http://www.amqp.org/) compatible
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:47:  server. Requires the [php-amqp](http://pecl.php.net/package/amqp) extension (1.0+).
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:48:- _GelfHandler_: Logs records to a [Graylog2](http://www.graylog2.org) server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:49:- _CubeHandler_: Logs records to a [Cube](http://square.github.com/cube/) server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:50:- _RavenHandler_: Logs records to a [Sentry](http://getsentry.com/) server using
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:52:- _ZendMonitorHandler_: Logs records to the Zend Monitor present in Zend Server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:53:- _NewRelicHandler_: Logs records to a [NewRelic](http://newrelic.com/) application.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:54:- _LogglyHandler_: Logs records to a [Loggly](http://www.loggly.com/) account.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:55:- _RollbarHandler_: Logs records to a [Rollbar](https://rollbar.com/) account.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:56:- _SyslogUdpHandler_: Logs records to a remote [Syslogd](http://www.rsyslog.com/) server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:57:- _LogEntriesHandler_: Logs records to a [LogEntries](http://logentries.com/) account.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:61:- _FirePHPHandler_: Handler for [FirePHP](http://www.firephp.org/), providing
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:63:- _ChromePHPHandler_: Handler for [ChromePHP](http://www.chromephp.com/), providing
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:65:- _BrowserConsoleHandler_: Handler to send logs to browser's Javascript `console` with
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:67:- _PHPConsoleHandler_: Handler for [PHP Console](https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef), providing
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:72:- _RedisHandler_: Logs records to a [redis](http://redis.io) server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:73:- _MongoDBHandler_: Handler to write records in MongoDB via a
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:75:- _CouchDBHandler_: Logs records to a CouchDB server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:76:- _DoctrineCouchDBHandler_: Logs records to a CouchDB server via the Doctrine CouchDB ODM.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:77:- _ElasticSearchHandler_: Logs records to an Elastic Search server.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:78:- _DynamoDbHandler_: Logs records to a DynamoDB table with the [AWS SDK](https://github.com/aws/aws-sdk-php).
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:82:- _FingersCrossedHandler_: A very interesting wrapper. It takes a logger as
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:90:- _DeduplicationHandler_: Useful if you are sending notifications or emails
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:100:- _WhatFailureGroupHandler_: This handler extends the _GroupHandler_ ignoring
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:104:- _BufferHandler_: This handler will buffer all the log records it receives
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:109:- _GroupHandler_: This handler groups other handlers. Every record received is
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:111:- _FilterHandler_: This handler only lets records of the given levels through
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:113:- _SamplingHandler_: Wraps around another handler and lets you sample records
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:115:- _NullHandler_: Any record it can handle will be thrown away. This can be used
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:117:- _PsrHandler_: Can be used to forward log records to an existing PSR-3 logger
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:118:- _TestHandler_: Used for testing, it records everything that is sent to it and
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:120:- _HandlerWrapper_: A simple handler wrapper you can inherit from to create
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:125:- _LineFormatter_: Formats a log record into a one-line string.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:126:- _HtmlFormatter_: Used to format log records into a human readable html table, mainly suitable for emails.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:127:- _NormalizerFormatter_: Normalizes objects/resources down to strings so a record can easily be serialized/encoded.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:128:- _ScalarFormatter_: Used to format log records into an associative array of scalar values.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:129:- _JsonFormatter_: Encodes a log record into json.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:130:- _WildfireFormatter_: Used to format log records into the Wildfire/FirePHP protocol, only useful for the FirePHPHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:131:- _ChromePHPFormatter_: Used to format log records into the ChromePHP format, only useful for the ChromePHPHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:132:- _GelfMessageFormatter_: Used to format log records into Gelf message instances, only useful for the GelfHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:133:- _LogstashFormatter_: Used to format log records into [logstash](http://logstash.net/) event json, useful for any handler listed under inputs [here](http://logstash.net/docs/latest).
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:134:- _ElasticaFormatter_: Used to format log records into an Elastica\Document object, only useful for the ElasticSearchHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:135:- _LogglyFormatter_: Used to format log records into Loggly messages, only useful for the LogglyHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:136:- _FlowdockFormatter_: Used to format log records into Flowdock messages, only useful for the FlowdockHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:137:- _MongoDBFormatter_: Converts \DateTime instances to \MongoDate and objects recursively to arrays, only useful with the MongoDBHandler.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:141:- _PsrLogMessageProcessor_: Processes a log record's message according to PSR-3 rules, replacing `{foo}` with the value from `$context['foo']`.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:142:- _IntrospectionProcessor_: Adds the line/file/class/method from which the log call originated.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:143:- _WebProcessor_: Adds the current request URI, request method and client IP to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:144:- _MemoryUsageProcessor_: Adds the current memory usage to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:145:- _MemoryPeakUsageProcessor_: Adds the peak memory usage to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:146:- _ProcessIdProcessor_: Adds the process id to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:147:- _UidProcessor_: Adds a unique identifier to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:148:- _GitProcessor_: Adds the current git branch and commit to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:149:- _TagProcessor_: Adds an array of predefined tags to a log record.
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:154:[listed in the wiki](https://github.com/Seldaek/monolog/wiki/Third-Party-Packages). You
./vendor/monolog/monolog/doc/02-handlers-formatters-processors.md:157:&larr; [Usage](01-usage.md) |  [Utility classes](03-utilities.md) &rarr;
./vendor/monolog/monolog/doc/04-extending.md:7:Monolog provides many built-in handlers. But if the one you need does not
./vendor/monolog/monolog/doc/04-extending.md:28:        $this->pdo = $pdo;
./vendor/monolog/monolog/doc/04-extending.md:34:        if (!$this->initialized) {
./vendor/monolog/monolog/doc/04-extending.md:35:            $this->initialize();
./vendor/monolog/monolog/doc/04-extending.md:38:        $this->statement->execute(array(
./vendor/monolog/monolog/doc/04-extending.md:42:            'time' => $record['datetime']->format('U'),
./vendor/monolog/monolog/doc/04-extending.md:48:        $this->pdo->exec(
./vendor/monolog/monolog/doc/04-extending.md:52:        $this->statement = $this->pdo->prepare(
./vendor/monolog/monolog/doc/04-extending.md:56:        $this->initialized = true;
./vendor/monolog/monolog/doc/04-extending.md:66:$logger->pushHandler(new PDOHandler(new PDO('sqlite:logs.sqlite')));
./vendor/monolog/monolog/doc/04-extending.md:69:$logger->addInfo('My logger is now ready');
./vendor/monolog/monolog/doc/04-extending.md:76:&larr; [Utility classes](03-utilities.md)
./vendor/monolog/monolog/doc/03-utilities.md:3:- _Registry_: The `Monolog\Registry` class lets you configure global loggers that you
./vendor/monolog/monolog/doc/03-utilities.md:6:- _ErrorHandler_: The `Monolog\ErrorHandler` class allows you to easily register
./vendor/monolog/monolog/doc/03-utilities.md:8:- _ErrorLevelActivationStrategy_: Activates a FingersCrossedHandler when a certain log
./vendor/monolog/monolog/doc/03-utilities.md:10:- _ChannelLevelActivationStrategy_: Activates a FingersCrossedHandler when a certain
./vendor/monolog/monolog/doc/03-utilities.md:13:&larr; [Handlers, Formatters and Processors](02-handlers-formatters-processors.md) |  [Extending Monolog](04-extending.md) &rarr;
./vendor/monolog/monolog/doc/01-usage.md:3:- [Installation](#installation)
./vendor/monolog/monolog/doc/01-usage.md:4:- [Core Concepts](#core-concepts)
./vendor/monolog/monolog/doc/01-usage.md:5:- [Log Levels](#log-levels)
./vendor/monolog/monolog/doc/01-usage.md:6:- [Configuring a logger](#configuring-a-logger)
./vendor/monolog/monolog/doc/01-usage.md:7:- [Adding extra data in the records](#adding-extra-data-in-the-records)
./vendor/monolog/monolog/doc/01-usage.md:8:- [Leveraging channels](#leveraging-channels)
./vendor/monolog/monolog/doc/01-usage.md:9:- [Customizing the log format](#customizing-the-log-format)
./vendor/monolog/monolog/doc/01-usage.md:21:PSR-0 compatible autoloader (e.g. the [Symfony2 ClassLoader component](https://github.com/symfony/ClassLoader))
./vendor/monolog/monolog/doc/01-usage.md:60:- **DEBUG** (100): Detailed debug information.
./vendor/monolog/monolog/doc/01-usage.md:62:- **INFO** (200): Interesting events. Examples: User logs in, SQL logs.
./vendor/monolog/monolog/doc/01-usage.md:64:- **NOTICE** (250): Normal but significant events.
./vendor/monolog/monolog/doc/01-usage.md:66:- **WARNING** (300): Exceptional occurrences that are not errors. Examples:
./vendor/monolog/monolog/doc/01-usage.md:70:- **ERROR** (400): Runtime errors that do not require immediate action but
./vendor/monolog/monolog/doc/01-usage.md:73:- **CRITICAL** (500): Critical conditions. Example: Application component
./vendor/monolog/monolog/doc/01-usage.md:76:- **ALERT** (550): Action must be taken immediately. Example: Entire website
./vendor/monolog/monolog/doc/01-usage.md:80:- **EMERGENCY** (600): Emergency: system is unusable.
./vendor/monolog/monolog/doc/01-usage.md:96:$logger->pushHandler(new StreamHandler(__DIR__.'/my_app.log', Logger::DEBUG));
./vendor/monolog/monolog/doc/01-usage.md:97:$logger->pushHandler(new FirePHPHandler());
./vendor/monolog/monolog/doc/01-usage.md:100:$logger->addInfo('My logger is now ready');
./vendor/monolog/monolog/doc/01-usage.md:116:> configure many handlers, the [theorchard/monolog-cascade](https://github.com/theorchard/monolog-cascade)
./vendor/monolog/monolog/doc/01-usage.md:132:$logger->addInfo('Adding a new user', array('username' => 'Seldaek'));
./vendor/monolog/monolog/doc/01-usage.md:149:$logger->pushProcessor(function ($record) {
./vendor/monolog/monolog/doc/01-usage.md:156:Monolog provides some built-in processors that can be used in your project.
./vendor/monolog/monolog/doc/01-usage.md:157:Look at the [dedicated chapter](https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md#processors) for the list.
./vendor/monolog/monolog/doc/01-usage.md:185:$logger->pushHandler($stream);
./vendor/monolog/monolog/doc/01-usage.md:186:$logger->pushHandler($firephp);
./vendor/monolog/monolog/doc/01-usage.md:188:// Create a logger for the security-related stuff with a different channel
./vendor/monolog/monolog/doc/01-usage.md:190:$securityLogger->pushHandler($stream);
./vendor/monolog/monolog/doc/01-usage.md:191:$securityLogger->pushHandler($firephp);
./vendor/monolog/monolog/doc/01-usage.md:194:$securityLogger = $logger->withName('security');
./vendor/monolog/monolog/doc/01-usage.md:208:write your own (e.g. a multiline text file for human-readable output).
./vendor/monolog/monolog/doc/01-usage.md:213:// the default date format is "Y-m-d H:i:s"
./vendor/monolog/monolog/doc/01-usage.md:222:$stream->setFormatter($formatter);
./vendor/monolog/monolog/doc/01-usage.md:225:$securityLogger->pushHandler($stream);
./vendor/monolog/monolog/doc/01-usage.md:231:[Handlers, Formatters and Processors](02-handlers-formatters-processors.md) &rarr;
./vendor/monolog/monolog/CHANGELOG.md:1:### 1.23.0 (2017-06-19)
./vendor/monolog/monolog/CHANGELOG.md:10:### 1.22.1 (2017-03-13)
./vendor/monolog/monolog/CHANGELOG.md:15:### 1.22.0 (2016-11-26)
./vendor/monolog/monolog/CHANGELOG.md:26:### 1.21.0 (2016-07-29)
./vendor/monolog/monolog/CHANGELOG.md:34:### 1.20.0 (2016-07-02)
./vendor/monolog/monolog/CHANGELOG.md:40:  * Deprecated RotatingFileHandler::setFilenameFormat to only support 3 formats: Y, Y-m and Y-m-d
./vendor/monolog/monolog/CHANGELOG.md:44:### 1.19.0 (2016-04-12)
./vendor/monolog/monolog/CHANGELOG.md:51:### 1.18.2 (2016-04-02)
./vendor/monolog/monolog/CHANGELOG.md:56:### 1.18.1 (2016-03-13)
./vendor/monolog/monolog/CHANGELOG.md:60:  * Fixed AmqpHandler content-type being incorrectly set when using with the AMQP extension
./vendor/monolog/monolog/CHANGELOG.md:63:### 1.18.0 (2016-03-01)
./vendor/monolog/monolog/CHANGELOG.md:65:  * Added optional reduction of timestamp precision via `Logger->useMicrosecondTimestamps(false)`, disabling it gets you a bit of performance boost but reduces the precision to the second instead of microsecond
./vendor/monolog/monolog/CHANGELOG.md:67:  * Added `Logger->withName` to clone a logger (keeping all handlers) with a new name
./vendor/monolog/monolog/CHANGELOG.md:70:  * Added support for replacing context sub-keys using `%context.*%` in LineFormatter
./vendor/monolog/monolog/CHANGELOG.md:78:### 1.17.2 (2015-10-14)
./vendor/monolog/monolog/CHANGELOG.md:80:  * Fixed ErrorHandler compatibility with non-Monolog PSR-3 loggers
./vendor/monolog/monolog/CHANGELOG.md:85:### 1.17.1 (2015-08-31)
./vendor/monolog/monolog/CHANGELOG.md:89:### 1.17.0 (2015-08-30)
./vendor/monolog/monolog/CHANGELOG.md:97:### 1.16.0 (2015-08-09)
./vendor/monolog/monolog/CHANGELOG.md:108:### 1.15.0 (2015-07-12)
./vendor/monolog/monolog/CHANGELOG.md:117:### 1.14.0 (2015-06-19)
./vendor/monolog/monolog/CHANGELOG.md:123:  * Added an option to send formatted message instead of the raw record on PushoverHandler via ->useFormattedMessage(true)
./vendor/monolog/monolog/CHANGELOG.md:126:### 1.13.1 (2015-03-09)
./vendor/monolog/monolog/CHANGELOG.md:130:### 1.13.0 (2015-03-05)
./vendor/monolog/monolog/CHANGELOG.md:137:  * Added ability to customize the Swift_Message per-email in SwiftMailerHandler
./vendor/monolog/monolog/CHANGELOG.md:141:### 1.12.0 (2014-12-29)
./vendor/monolog/monolog/CHANGELOG.md:144:  * Added PsrHandler to forward records to another PSR-3 logger
./vendor/monolog/monolog/CHANGELOG.md:153:  * Fixed some non-standard behaviors in SyslogUdpHandler
./vendor/monolog/monolog/CHANGELOG.md:155:### 1.11.0 (2014-09-30)
./vendor/monolog/monolog/CHANGELOG.md:168:  * Fixed support for non-string values in PrsLogMessageProcessor
./vendor/monolog/monolog/CHANGELOG.md:173:### 1.10.0 (2014-06-04)
./vendor/monolog/monolog/CHANGELOG.md:180:### 1.9.1 (2014-04-24)
./vendor/monolog/monolog/CHANGELOG.md:186:### 1.9.0 (2014-04-20)
./vendor/monolog/monolog/CHANGELOG.md:195:  * Fixed multi-threading support in StreamHandler
./vendor/monolog/monolog/CHANGELOG.md:199:### 1.8.0 (2014-03-23)
./vendor/monolog/monolog/CHANGELOG.md:208:  * Added a Monolog\Registry class to allow easier global access to pre-configured loggers
./vendor/monolog/monolog/CHANGELOG.md:209:  * Added support for the new official graylog2/gelf-php lib for GelfHandler, upgrade if you can by replacing the mlehner/gelf-php requirement
./vendor/monolog/monolog/CHANGELOG.md:216:### 1.7.0 (2013-11-14)
./vendor/monolog/monolog/CHANGELOG.md:233:### 1.6.0 (2013-07-29)
./vendor/monolog/monolog/CHANGELOG.md:251:### 1.5.0 (2013-04-23)
./vendor/monolog/monolog/CHANGELOG.md:259:### 1.4.1 (2013-04-01)
./vendor/monolog/monolog/CHANGELOG.md:267:### 1.4.0 (2013-02-13)
./vendor/monolog/monolog/CHANGELOG.md:276:### 1.3.1 (2013-01-11)
./vendor/monolog/monolog/CHANGELOG.md:281:### 1.3.0 (2013-01-08)
./vendor/monolog/monolog/CHANGELOG.md:283:  * Added PSR-3 compliance, the `Monolog\Logger` class is now an instance of `Psr\Log\LoggerInterface`
./vendor/monolog/monolog/CHANGELOG.md:284:  * Added PsrLogMessageProcessor that you can selectively enable for full PSR-3 compliance
./vendor/monolog/monolog/CHANGELOG.md:295:### 1.2.1 (2012-08-29)
./vendor/monolog/monolog/CHANGELOG.md:300:### 1.2.0 (2012-08-18)
./vendor/monolog/monolog/CHANGELOG.md:313:### 1.1.0 (2012-04-23)
./vendor/monolog/monolog/CHANGELOG.md:320:  * Added SocketHandler (for use with syslog-ng for example)
./vendor/monolog/monolog/CHANGELOG.md:326:### 1.0.2 (2011-10-24)
./vendor/monolog/monolog/CHANGELOG.md:330:### 1.0.1 (2011-08-25)
./vendor/monolog/monolog/CHANGELOG.md:335:### 1.0.0 (2011-07-06)
./vendor/monolog/monolog/CHANGELOG.md:340:### 1.0.0-RC1 (2011-07-01)
./vendor/monolog/monolog/LICENSE:1:Copyright (c) 2011-2016 Jordi Boggiano
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:26:        $this->assertEquals(false, $formatter->isUsingLevelsInTag());
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:28:        $this->assertEquals(false, $formatter->isUsingLevelsInTag());
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:30:        $this->assertEquals(true, $formatter->isUsingLevelsInTag());
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:38:        $record = $this->getRecord(Logger::WARNING);
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:42:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:44:            $formatter->format($record)
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:53:        $record = $this->getRecord(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:57:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/FluentdFormatterTest.php:59:            $formatter->format($record)
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:24:            $this->markTestSkipped('mongo extension not installed');
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:49:        $reflTrace->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:50:        $this->assertEquals($expectedTraceAsString, $reflTrace->getValue($formatter));
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:53:        $reflDepth->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:54:        $this->assertEquals($expectedTraceDepth, $reflDepth->getValue($formatter));
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:65:            'datetime' => new \DateTime('2014-02-01 00:00:00'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:70:        $formattedRecord = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:72:        $this->assertCount(7, $formattedRecord);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:73:        $this->assertEquals('some log message', $formattedRecord['message']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:74:        $this->assertEquals(array(), $formattedRecord['context']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:75:        $this->assertEquals(Logger::WARNING, $formattedRecord['level']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:76:        $this->assertEquals(Logger::getLevelName(Logger::WARNING), $formattedRecord['level_name']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:77:        $this->assertEquals('test', $formattedRecord['channel']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:78:        $this->assertInstanceOf('\MongoDate', $formattedRecord['datetime']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:79:        $this->assertEquals('0.00000000 1391212800', $formattedRecord['datetime']->__toString());
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:80:        $this->assertEquals(array(), $formattedRecord['extra']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:86:        $someObject->foo = 'something';
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:87:        $someObject->bar = 'stuff';
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:92:                'stuff' => new \DateTime('2014-02-01 02:31:33'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:101:            'datetime' => new \DateTime('2014-02-01 00:00:00'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:106:        $formattedRecord = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:108:        $this->assertCount(5, $formattedRecord['context']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:109:        $this->assertInstanceOf('\MongoDate', $formattedRecord['context']['stuff']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:110:        $this->assertEquals('0.00000000 1391221893', $formattedRecord['context']['stuff']->__toString());
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:111:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:119:        $this->assertEquals('some string', $formattedRecord['context']['context_string']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:120:        $this->assertEquals(123456, $formattedRecord['context']['context_int']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:122:        $this->assertCount(5, $formattedRecord['context']['except']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:123:        $this->assertEquals('exception message', $formattedRecord['context']['except']['message']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:124:        $this->assertEquals(987, $formattedRecord['context']['except']['code']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:125:        $this->assertInternalType('string', $formattedRecord['context']['except']['file']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:126:        $this->assertInternalType('integer', $formattedRecord['context']['except']['code']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:127:        $this->assertInternalType('string', $formattedRecord['context']['except']['trace']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:128:        $this->assertEquals('Exception', $formattedRecord['context']['except']['class']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:147:            'datetime' => new \DateTime('2014-02-01 00:00:00'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:152:        $formattedResult = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:154:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:183:            'datetime' => new \DateTime('2014-02-01 00:00:00'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:188:        $formattedResult = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:190:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:209:        $someObject->property = 'anything';
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:210:        $someObject->nest3 = new \stdClass();
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:211:        $someObject->nest3->property = 'nothing';
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:212:        $someObject->nest3->nest4 = 'invisible';
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:222:            'datetime' => new \DateTime('2014-02-01 00:00:00'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:227:        $formattedResult = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:229:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:251:            'datetime' => new \DateTime('2014-02-01 00:00:00'),
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:256:        $formattedRecord = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:258:        $this->assertEquals('exception message', $formattedRecord['context']['nest2']['message']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:259:        $this->assertEquals(987, $formattedRecord['context']['nest2']['code']);
./vendor/monolog/monolog/tests/Monolog/Formatter/MongoDBFormatterTest.php:260:        $this->assertEquals('[...]', $formattedRecord['context']['nest2']['trace']);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:21:            $this->markTestSkipped("graylog2/gelf-php or mlehner/gelf-php is not installed");
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:41:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:43:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:44:        $this->assertEquals(0, $message->getTimestamp());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:45:        $this->assertEquals('log', $message->getShortMessage());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:46:        $this->assertEquals('meh', $message->getFacility());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:47:        $this->assertEquals(null, $message->getLine());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:48:        $this->assertEquals(null, $message->getFile());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:49:        $this->assertEquals($this->isLegacy() ? 3 : 'error', $message->getLevel());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:50:        $this->assertNotEmpty($message->getHost());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:54:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:56:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:57:        $this->assertEquals('mysystem', $message->getHost());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:76:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:78:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:79:        $this->assertEquals('test', $message->getFile());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:80:        $this->assertEquals(14, $message->getLine());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:95:        $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:114:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:116:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:118:        $message_array = $message->toArray();
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:120:        $this->assertArrayHasKey('_ctxt_from', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:121:        $this->assertEquals('logger', $message_array['_ctxt_from']);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:125:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:127:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:129:        $message_array = $message->toArray();
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:131:        $this->assertArrayHasKey('_CTXfrom', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:132:        $this->assertEquals('logger', $message_array['_CTXfrom']);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:155:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:157:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:159:        $this->assertEquals("/some/file/in/dir.php", $message->getFile());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:160:        $this->assertEquals("56", $message->getLine());
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:179:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:181:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:183:        $message_array = $message->toArray();
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:185:        $this->assertArrayHasKey('_key', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:186:        $this->assertEquals('pair', $message_array['_key']);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:190:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:192:        $this->assertInstanceOf('Gelf\Message', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:194:        $message_array = $message->toArray();
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:196:        $this->assertArrayHasKey('_EXTkey', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:197:        $this->assertEquals('pair', $message_array['_EXTkey']);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:212:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:213:        $messageArray = $message->toArray();
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:224:        $this->assertLessThanOrEqual(65792, $length, 'The message length is no longer than the maximum allowed length');
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:239:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:240:        $messageArray = $message->toArray();
./vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php:251:        $this->assertGreaterThanOrEqual(131289, $length, 'The message should not be truncated');
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:21:            $this->markTestSkipped("ruflin/elastica not installed");
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:45:        $expected['datetime'] = '1970-01-01T00:00:00.000000+00:00';
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:54:        $doc = $formatter->format($msg);
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:55:        $this->assertInstanceOf('Elastica\Document', $doc);
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:58:        $params = $doc->getParams();
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:59:        $this->assertEquals('my_index', $params['_index']);
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:60:        $this->assertEquals('doc_type', $params['_type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:63:        $data = $doc->getData();
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:65:            $this->assertEquals($expected[$key], $data[$key]);
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:76:        $this->assertEquals('my_index', $formatter->getIndex());
./vendor/monolog/monolog/tests/Monolog/Formatter/ElasticaFormatterTest.php:77:        $this->assertEquals('doc_type', $formatter->getType());
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:21:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:22:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:30:        $this->assertEquals('['.date('Y-m-d').'] log.WARNING: foo [] []'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:35:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:36:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:49:        $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: foo {"foo":"bar","baz":"qux","bool":false,"null":null} []'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:54:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:55:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:63:        $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: log [] {"ip":"127.0.0.1"}'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:68:        $formatter = new LineFormatter("[%datetime%] %channel%.%level_name%: %message% %context% %extra.file% %extra%\n", 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:69:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:77:        $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: log [] test {"ip":"127.0.0.1"}'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:82:        $formatter = new LineFormatter(null, 'Y-m-d', false, true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:83:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:91:        $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: log  '."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:97:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:105:        $this->assertEquals('bar => xbar', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:110:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:111:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:120:        $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: foobar [] {"foo":"[object] (Monolog\\\\Formatter\\\\TestFoo: {\\"foo\\":\\"foo\\"})","bar":"[object] (Monolog\\\\Formatter\\\\TestBar: bar)","baz":[],"res":"[resource] (stream)"}'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:125:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:126:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:137:        $this->assertEquals('['.date('Y-m-d').'] core.CRITICAL: foobar {"exception":"[object] (RuntimeException(code: 0): Foo at '.substr($path, 1, -1).':'.(__LINE__ - 8).')"} []'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:142:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:144:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:155:        $this->assertEquals('['.date('Y-m-d').'] core.CRITICAL: foobar {"exception":"[object] (RuntimeException(code: 0): Foo at '.substr($path, 1, -1).':'.(__LINE__ - 8).', LogicException(code: 0): Wut? at '.substr($path, 1, -1).':'.(__LINE__ - 12).')"} []'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:160:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:161:        $message = $formatter->formatBatch(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:179:        $this->assertEquals('['.date('Y-m-d').'] test.CRITICAL: bar [] []'."\n".'['.date('Y-m-d').'] log.WARNING: foo [] []'."\n", $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:184:        $formatter = new LineFormatter(null, 'Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:185:        $message = $formatter->format(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:193:        $this->assertRegExp('/foo bar/', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:198:        $formatter = new LineFormatter(null, 'Y-m-d', true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:199:        $message = $formatter->format(
./vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php:207:        $this->assertRegExp('/foo\nbar/', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:34:        $message = $wildfire->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:36:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:59:        $message = $wildfire->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:61:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:84:        $message = $wildfire->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:86:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:109:        $wildfire->formatBatch(array($record));
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:121:            'channel' => 'table-channel',
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:132:            'message' => 'table-message',
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:135:        $message = $wildfire->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:137:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/WildfireFormatterTest.php:138:            '171|[{"Type":"TABLE","File":"","Line":"","Label":"table-channel: table-message"},[["col1","col2","col3"],["val1","val2","val3"],["foo1","foo2","foo3"],["bar1","bar2","bar3"]]]|',
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:28:        $formatter = new NormalizerFormatter('Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:29:        $formatted = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:39:                '-inf' => -INF,
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:44:        $this->assertEquals(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:48:            'datetime' => date('Y-m-d'),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:59:                '-inf' => '-INF',
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:67:        $formatter = new NormalizerFormatter('Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:70:        $formatted = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:74:        $this->assertGreaterThan(5, count($formatted['exception']['trace']));
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:75:        $this->assertTrue(isset($formatted['exception']['previous']));
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:78:        $this->assertEquals(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:81:                'message' => $e2->getMessage(),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:82:                'code'    => $e2->getCode(),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:83:                'file'    => $e2->getFile().':'.$e2->getLine(),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:91:            $this->markTestSkipped('Requires the soap extension');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:94:        $formatter = new NormalizerFormatter('Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:96:        $formatted = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:102:        $this->assertEquals(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:107:                'file' => $e->getFile().':'.$e->getLine(),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:117:        $formatter = new NormalizerFormatter('Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:118:        $this->setExpectedException('RuntimeException', 'Could not convert to string');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:119:        $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:126:        $formatter = new NormalizerFormatter('Y-m-d');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:127:        $formatted = $formatter->formatBatch(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:145:        $this->assertEquals(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:151:                'datetime' => date('Y-m-d'),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:159:                'datetime' => date('Y-m-d'),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:174:        $foo->bar = $bar;
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:175:        $bar->foo = $foo;
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:182:                $that->fail("$message should not be raised");
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:188:        $reflMethod->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:189:        $res = $reflMethod->invoke($formatter, array($foo, $bar), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:193:        $this->assertEquals(@json_encode(array($foo, $bar)), $res);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:206:                $that->fail("$message should not be raised");
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:212:        $reflMethod->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:213:        $res = $reflMethod->invoke($formatter, array($resource), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:217:        $this->assertEquals(@json_encode(array($resource)), $res);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:225:        $res = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:234:        $this->assertCount(1000, $res['context'][0]);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:235:        $this->assertEquals('Over 1000 items (2000 total), aborting normalization', $res['context'][0]['...']);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:249:        $reflMethod->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:253:        $record->message = "\xB1\x31";
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:254:        $res = $reflMethod->invoke($formatter, $record);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:268:        $reflMethod->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:270:        $res = $reflMethod->invoke($formatter, array('message' => "\xA4\xA6\xA8\xB4\xB8\xBC\xBD\xBE"));
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:273:            $this->assertSame('{"message":"€ŠšŽžŒœŸ"}', $res);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:277:            $this->assertSame('{"message":null}', $res);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:290:        $formatter->detectAndCleanUtf8($in);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:291:        $this->assertSame($expect, $in);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:322:        $reflMethod->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:324:        $this->setExpectedException('RuntimeException', $msg);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:325:        $reflMethod->invoke($formatter, $code, 'faked');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:334:            'default' => array(-1, 'Unknown error'),
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:341:            $this->markTestSkipped('Not supported in HHVM since it detects errors differently');
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:355:            $wrappedResource->foo = $resource;
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:364:        $result = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:366:        $this->assertRegExp(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:378:        $this->assertRegExp(
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:405:        $this->resource = $resource;
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:406:        $this->foo = 'BAR';
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:411:        fseek($this->resource, 0);
./vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php:413:        return $this->foo . ' - ' . (string) stream_get_contents($this->resource);
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:25:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:30:            'subject' => 'in test_source: WARNING - test',
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:35:        $formatted = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:37:        $this->assertEquals($expected, $formatted['flowdock']);
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:47:            $this->getRecord(Logger::WARNING),
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:48:            $this->getRecord(Logger::DEBUG),
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:50:        $formatted = $formatter->formatBatch($records);
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:52:        $this->assertArrayHasKey('flowdock', $formatted[0]);
./vendor/monolog/monolog/tests/Monolog/Formatter/FlowdockFormatterTest.php:53:        $this->assertArrayHasKey('flowdock', $formatted[1]);
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:20:        $this->formatter = new ScalarFormatter();
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:26:        $trace = $e->getTrace();
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:50:        $formatted = $this->formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:56:            'bap' => \DateTime::createFromFormat(\DateTime::ISO8601, '1970-01-01T00:00:00+0000'),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:60:        $this->assertSame(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:64:            'bam' => $this->encodeJson(array(1, 2, 3)),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:65:            'bat' => $this->encodeJson(array('foo' => 'bar')),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:66:            'bap' => '1970-01-01 00:00:00',
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:67:            'ban' => $this->encodeJson(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:69:                'message' => $exception->getMessage(),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:70:                'code'    => $exception->getCode(),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:71:                'file'    => $exception->getFile() . ':' . $exception->getLine(),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:72:                'trace'   => $this->buildTrace($exception),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:80:        $formatted = $this->formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:84:        $this->assertSame(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:85:            'context' => $this->encodeJson($context),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:92:        $formatted = $this->formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:98:        $this->assertSame(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:99:            'context' => $this->encodeJson(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:102:                    'message' => $exception->getMessage(),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:103:                    'code'    => $exception->getCode(),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:104:                    'file'    => $exception->getFile() . ':' . $exception->getLine(),
./vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php:105:                    'trace'   => $this->buildTrace($exception),
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:34:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:36:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:67:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:69:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:100:        $message = $formatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:102:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:140:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/ChromePHPFormatterTest.php:155:            $formatter->formatBatch($records)
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:41:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:43:        $this->assertEquals("1970-01-01T00:00:00.000000+00:00", $message['@timestamp']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:44:        $this->assertEquals('log', $message['@message']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:45:        $this->assertEquals('meh', $message['@fields']['channel']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:46:        $this->assertContains('meh', $message['@tags']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:47:        $this->assertEquals(Logger::ERROR, $message['@fields']['level']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:48:        $this->assertEquals('test', $message['@type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:49:        $this->assertEquals('hostname', $message['@source']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:53:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:55:        $this->assertEquals('mysystem', $message['@type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:74:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:76:        $this->assertEquals('test', $message['@fields']['file']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:77:        $this->assertEquals(14, $message['@fields']['line']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:96:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:100:        $this->assertArrayHasKey('ctxt_from', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:101:        $this->assertEquals('logger', $message_array['ctxt_from']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:105:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:109:        $this->assertArrayHasKey('CTXfrom', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:110:        $this->assertEquals('logger', $message_array['CTXfrom']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:129:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:133:        $this->assertArrayHasKey('key', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:134:        $this->assertEquals('pair', $message_array['key']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:138:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:142:        $this->assertArrayHasKey('EXTkey', $message_array);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:143:        $this->assertEquals('pair', $message_array['EXTkey']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:159:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:161:        $this->assertArrayHasKey('@type', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:162:        $this->assertEquals('app', $message['@type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:181:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:183:        $this->assertEquals("1970-01-01T00:00:00.000000+00:00", $message['@timestamp']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:184:        $this->assertEquals("1", $message['@version']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:185:        $this->assertEquals('log', $message['message']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:186:        $this->assertEquals('meh', $message['channel']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:187:        $this->assertEquals('ERROR', $message['level']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:188:        $this->assertEquals('test', $message['type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:189:        $this->assertEquals('hostname', $message['host']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:193:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:195:        $this->assertEquals('mysystem', $message['type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:214:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:216:        $this->assertEquals('test', $message['file']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:217:        $this->assertEquals(14, $message['line']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:236:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:238:        $this->assertArrayHasKey('ctxt_from', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:239:        $this->assertEquals('logger', $message['ctxt_from']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:243:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:245:        $this->assertArrayHasKey('CTXfrom', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:246:        $this->assertEquals('logger', $message['CTXfrom']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:265:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:267:        $this->assertArrayHasKey('key', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:268:        $this->assertEquals('pair', $message['key']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:272:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:274:        $this->assertArrayHasKey('EXTkey', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:275:        $this->assertEquals('pair', $message['EXTkey']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:291:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:293:        $this->assertArrayHasKey('type', $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:294:        $this->assertEquals('app', $message['type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:316:        $message = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:318:        $this->assertEquals("1970-01-01T00:00:00.000000+00:00", $message['@timestamp']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:319:        $this->assertEquals('log', $message['@message']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:320:        $this->assertEquals('¯\_(ツ)_/¯', $message['@fields']['channel']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:321:        $this->assertContains('¯\_(ツ)_/¯', $message['@tags']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:322:        $this->assertEquals(Logger::ERROR, $message['@fields']['level']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:323:        $this->assertEquals('test', $message['@type']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:324:        $this->assertEquals('hostname', $message['@source']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:326:            $this->assertEquals('ÖWN; FBCR/OrangeEspaña; Versão/4.0; Färist', $message['@fields']['user_agent']);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogstashFormatterTest.php:330:            $this->assertEquals(null, $message['@fields']['user_agent']);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:27:        $this->assertEquals(JsonFormatter::BATCH_MODE_JSON, $formatter->getBatchMode());
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:28:        $this->assertEquals(true, $formatter->isAppendingNewlines());
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:30:        $this->assertEquals(JsonFormatter::BATCH_MODE_NEWLINES, $formatter->getBatchMode());
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:31:        $this->assertEquals(false, $formatter->isAppendingNewlines());
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:40:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:41:        $this->assertEquals(json_encode($record)."\n", $formatter->format($record));
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:44:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:45:        $this->assertEquals(json_encode($record), $formatter->format($record));
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:56:            $this->getRecord(Logger::WARNING),
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:57:            $this->getRecord(Logger::DEBUG),
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:59:        $this->assertEquals(json_encode($records), $formatter->formatBatch($records));
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:70:            $this->getRecord(Logger::WARNING),
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:71:            $this->getRecord(Logger::DEBUG),
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:76:        $this->assertEquals(implode("\n", $expected), $formatter->formatBatch($records));
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:83:        $formattedException = $this->formatException($exception);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:85:        $message = $this->formatRecordWithExceptionInContext($formatter, $exception);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:87:        $this->assertContextContainsFormattedException($formattedException, $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:94:        $formattedPrevException = $this->formatException($exception->getPrevious());
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:95:        $formattedException = $this->formatException($exception, $formattedPrevException);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:97:        $message = $this->formatRecordWithExceptionInContext($formatter, $exception);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:99:        $this->assertContextContainsFormattedException($formattedException, $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:105:            $this->markTestSkipped('Requires PHP >=7');
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:110:        $formattedThrowable = $this->formatException($throwable);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:112:        $message = $this->formatRecordWithExceptionInContext($formatter, $throwable);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:114:        $this->assertContextContainsFormattedException($formattedThrowable, $message);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:125:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:139:        $message = $formatter->format(array(
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:161:        $path = substr(json_encode($exception->getFile(), $options), 1, -1);
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:162:        return $path . ':' . $exception->getLine();
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:176:            '","message":"' . $exception->getMessage() .
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:177:            '","code":' . $exception->getCode() .
./vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php:178:            ',"file":"' . $this->formatExceptionFilePathWithLine($exception) .
./vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php:24:        $this->assertEquals(LogglyFormatter::BATCH_MODE_NEWLINES, $formatter->getBatchMode());
./vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php:26:        $this->assertEquals(LogglyFormatter::BATCH_MODE_JSON, $formatter->getBatchMode());
./vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php:35:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php:36:        $formatted_decoded = json_decode($formatter->format($record), true);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php:37:        $this->assertArrayHasKey("timestamp", $formatted_decoded);
./vendor/monolog/monolog/tests/Monolog/Formatter/LogglyFormatterTest.php:38:        $this->assertEquals(new \DateTime($formatted_decoded["timestamp"]), $record["datetime"]);
./vendor/monolog/monolog/tests/Monolog/TestCase.php:38:            $this->getRecord(Logger::DEBUG, 'debug message 1'),
./vendor/monolog/monolog/tests/Monolog/TestCase.php:39:            $this->getRecord(Logger::DEBUG, 'debug message 2'),
./vendor/monolog/monolog/tests/Monolog/TestCase.php:40:            $this->getRecord(Logger::INFO, 'information'),
./vendor/monolog/monolog/tests/Monolog/TestCase.php:41:            $this->getRecord(Logger::WARNING, 'warning'),
./vendor/monolog/monolog/tests/Monolog/TestCase.php:42:            $this->getRecord(Logger::ERROR, 'error'),
./vendor/monolog/monolog/tests/Monolog/TestCase.php:51:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/TestCase.php:52:        $formatter->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/TestCase.php:53:            ->method('format')
./vendor/monolog/monolog/tests/Monolog/TestCase.php:54:            ->will($this->returnCallback(function ($record) { return $record['message']; }));
./vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php:23:        $errHandler->registerErrorHandler(array(E_USER_NOTICE => Logger::EMERGENCY), false);
./vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php:25:        $this->assertCount(1, $handler->getRecords());
./vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php:26:        $this->assertTrue($handler->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php:28:        $this->assertCount(2, $handler->getRecords());
./vendor/monolog/monolog/tests/Monolog/ErrorHandlerTest.php:29:        $this->assertTrue($handler->hasEmergencyRecords());
./vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php:26:        $logger->pushHandler($handler = new TestHandler);
./vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php:27:        $logger->pushProcessor(new PsrLogMessageProcessor);
./vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php:28:        $handler->setFormatter(new LineFormatter('%level_name% %message%'));
./vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php:30:        $this->handler = $handler;
./vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php:42:            return preg_replace_callback('{^[A-Z]+}', $lower, $record['formatted']);
./vendor/monolog/monolog/tests/Monolog/PsrLogCompatTest.php:45:        return array_map($convert, $this->handler->getRecords());
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:31:            $this->assertSame($expectedResult[$index], Registry::hasLogger($loggerToCheck));
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:71:        $this->setExpectedException('\InvalidArgumentException');
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:85:        $this->setExpectedException('\InvalidArgumentException');
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:86:        Registry::getInstance($loggerToAdd->getName());
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:112:        $this->assertSame($logger1, Registry::getInstance('test1'));
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:113:        $this->assertSame($logger2, Registry::test2());
./vendor/monolog/monolog/tests/Monolog/RegistryTest.php:137:        $this->assertSame($log2, Registry::getInstance('log'));
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:38:            $this->markTestSkipped('This test requires openssl extension to run');
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:42:        $this->handler = new FleepHookHandler(self::TOKEN);
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:50:        $this->assertEquals(Logger::DEBUG, $this->handler->getLevel());
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:51:        $this->assertEquals(true, $this->handler->getBubble());
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:70:        $expected = $expectedFormatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:72:        $handlerFormatter = $this->handler->getFormatter();
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:73:        $actual = $handlerFormatter->format($record);
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:75:        $this->assertEquals($expected, $actual, 'Empty context and extra arrays should not be rendered');
./vendor/monolog/monolog/tests/Monolog/Handler/FleepHookHandlerTest.php:83:        $this->assertEquals('ssl://' . FleepHookHandler::FLEEP_HOST . ':443', $this->handler->getConnectionString());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:25:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractProcessingHandler', array(Logger::WARNING, true));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:26:        $this->assertFalse($handler->handle($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:34:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractProcessingHandler', array(Logger::DEBUG, true));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:35:        $this->assertFalse($handler->handle($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:43:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractProcessingHandler', array(Logger::DEBUG, false));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:44:        $this->assertTrue($handler->handle($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:52:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractProcessingHandler', array(Logger::WARNING, false));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:53:        $this->assertTrue($handler->handle($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:54:        $this->assertFalse($handler->handle($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:62:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractProcessingHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:63:        $handler->pushProcessor(new WebProcessor(array(
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:71:        $handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:72:            ->method('write')
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:73:            ->will($this->returnCallback(function ($record) use (&$handledRecord) {
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:77:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php:78:        $this->assertEquals(6, count($handledRecord['extra']));
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogHandlerTest.php:24:        $this->assertInstanceOf('Monolog\Handler\SyslogHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogHandlerTest.php:27:        $this->assertInstanceOf('Monolog\Handler\SyslogHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogHandlerTest.php:30:        $this->assertInstanceOf('Monolog\Handler\SyslogHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogHandlerTest.php:33:        $this->assertInstanceOf('Monolog\Handler\SyslogHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogHandlerTest.php:41:        $this->setExpectedException('UnexpectedValueException');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:35:            $this->markTestSkipped($dir.' must be writable to test the RotatingFileHandler.');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:37:        $this->lastError = null;
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:41:            $self->lastError = array(
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:50:        if (empty($this->lastError)) {
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:51:            $this->fail(
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:59:        $this->assertEquals($code, $this->lastError['code'], sprintf('Expected an error with code %d to be triggered, got `%s` instead', $code, $this->lastError['code']));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:60:        $this->assertEquals($message, $this->lastError['message'], sprintf('Expected an error with message `%d` to be triggered, got `%s` instead', $message, $this->lastError['message']));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:65:        touch(__DIR__.'/Fixtures/foo-'.date('Y-m-d', time() - 86400).'.rot');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:68:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:69:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:71:        $log = __DIR__.'/Fixtures/foo-'.date('Y-m-d').'.rot';
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:72:        $this->assertTrue(file_exists($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:73:        $this->assertEquals('test', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:81:        touch($old1 = __DIR__.'/Fixtures/foo-'.date($dateFormat, $timeCallback(-1)).'.rot');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:82:        touch($old2 = __DIR__.'/Fixtures/foo-'.date($dateFormat, $timeCallback(-2)).'.rot');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:83:        touch($old3 = __DIR__.'/Fixtures/foo-'.date($dateFormat, $timeCallback(-3)).'.rot');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:84:        touch($old4 = __DIR__.'/Fixtures/foo-'.date($dateFormat, $timeCallback(-4)).'.rot');
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:86:        $log = __DIR__.'/Fixtures/foo-'.date($dateFormat).'.rot';
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:93:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:94:        $handler->setFilenameFormat('{filename}-{date}', $dateFormat);
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:95:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:97:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:99:        $this->assertTrue(file_exists($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:100:        $this->assertTrue(file_exists($old1));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:101:        $this->assertEquals($createFile, file_exists($old2));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:102:        $this->assertEquals($createFile, file_exists($old3));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:103:        $this->assertEquals($createFile, file_exists($old4));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:104:        $this->assertEquals('test', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:144:        $handler->setFilenameFormat('{filename}-{date}', $dateFormat);
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:146:            $this->assertErrorWasTriggered(
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:148:                'Invalid date format - format must be one of RotatingFileHandler::FILE_PER_DAY ("Y-m-d"), '.
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:149:                'RotatingFileHandler::FILE_PER_MONTH ("Y-m") or RotatingFileHandler::FILE_PER_YEAR ("Y"), '.
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:161:            array('m-d-Y', false),
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:162:            array('Y-m-d-h-i', false)
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:172:        $handler->setFilenameFormat($filenameFormat, RotatingFileHandler::FILE_PER_DAY);
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:174:            $this->assertErrorWasTriggered(
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:176:                'Invalid filename format - format should contain at least `{date}`, because otherwise rotating is impossible.'
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:185:            array('{filename}-{date}', true),
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:187:            array('foobar-{date}', true),
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:188:            array('foo-{date}-bar', true),
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:189:            array('{date}-foobar', true),
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:196:        $log = __DIR__.'/Fixtures/foo-'.date('Y-m-d').'.rot';
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:199:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:200:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php:201:        $this->assertEquals('footest', file_get_contents($log));
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:27:            $this->markTestSkipped("amqp-php not installed");
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:31:            $this->markTestSkipped("Please update AMQP to version >= 1.0");
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:36:        $exchange = $this->getMock('AMQPExchange', array('publish', 'setName'), array(), '', false);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:37:        $exchange->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:38:            ->method('setName')
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:39:            ->with('log')
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:41:        $exchange->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:42:            ->method('publish')
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:43:            ->will($this->returnCallback(function ($message, $routing_key, $flags = 0, $attributes = array()) use (&$messages) {
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:50:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:72:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:74:        $this->assertCount(1, $messages);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:77:        $this->assertEquals($expected, $messages[0]);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:83:            $this->markTestSkipped("php-amqplib not installed");
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:88:        $exchange = $this->getMock('PhpAmqpLib\Channel\AMQPChannel', array('basic_publish', '__destruct'), array(), '', false);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:90:        $exchange->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:91:            ->method('basic_publish')
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:92:            ->will($this->returnCallback(function (AMQPMessage $msg, $exchange = "", $routing_key = "", $mandatory = false, $immediate = false, $ticket = null) use (&$messages) {
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:99:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:124:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:126:        $this->assertCount(1, $messages);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:130:        $messages[0][0] = json_decode($msg->body, true);
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:131:        $messages[0][] = $msg->get_properties();
./vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php:134:        $this->assertEquals($expected, $messages[0]);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:29:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:30:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:31:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:32:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:34:        $this->assertRegexp('/POST \/v1\/rooms\/message\?format=json&auth_token=.* HTTP\/1.1\\r\\nHost: api.hipchat.com\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:41:        $this->createHandler('myToken', 'room1', 'Monolog', true, 'hipchat.foo.bar');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:42:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:43:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:44:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:46:        $this->assertRegexp('/POST \/v1\/rooms\/message\?format=json&auth_token=.* HTTP\/1.1\\r\\nHost: hipchat.foo.bar\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:53:        $this->createHandler('myToken', 'room1', 'Monolog', false, 'hipchat.foo.bar', 'v2');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:54:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:55:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:56:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:58:        $this->assertRegexp('/POST \/v2\/room\/room1\/notification\?auth_token=.* HTTP\/1.1\\r\\nHost: hipchat.foo.bar\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:65:        $this->createHandler('myToken', 'room1', 'Monolog', true, 'hipchat.foo.bar', 'v2');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:66:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:67:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:68:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:70:        $this->assertRegexp('/POST \/v2\/room\/room1\/notification\?auth_token=.* HTTP\/1.1\\r\\nHost: hipchat.foo.bar\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:77:        $this->createHandler('myToken', 'room name', 'Monolog', false, 'hipchat.foo.bar', 'v2');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:78:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:79:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:80:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:82:        $this->assertRegexp('/POST \/v2\/room\/room%20name\/notification\?auth_token=.* HTTP\/1.1\\r\\nHost: hipchat.foo.bar\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:92:        $this->assertRegexp('/notify=0&message=test1&message_format=text&color=red&room_id=room1&from=Monolog$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:97:        $this->createHandler('myToken', 'room1', null, false, 'hipchat.foo.bar', 'v1');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:98:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:99:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:100:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:102:        $this->assertRegexp('/notify=0&message=test1&message_format=text&color=red&room_id=room1&from=$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:112:        $this->assertRegexp('/notify=1&message=test1&message_format=text&color=red&room_id=room1&from=Monolog$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:120:        $this->assertRegexp('/notify=false&message=test1&message_format=text&color=red&from=Monolog$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:128:        $this->assertRegexp('/notify=true&message=test1&message_format=text&color=red&from=Monolog$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:133:        $this->createHandler('myToken', 'room1', null, false, 'hipchat.foo.bar', 'v2');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:134:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:135:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:136:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:138:        $this->assertRegexp('/notify=false&message=test1&message_format=text&color=red$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:145:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:146:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'Backup of database "example" finished in 16 minutes.'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:147:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:148:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:150:        $this->assertRegexp('/message=Backup\+of\+database\+%22example%22\+finished\+in\+16\+minutes\./', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:155:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:156:        $this->handler->handle($this->getRecord(Logger::CRITICAL, str_repeat('abcde', 2000)));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:157:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:158:        $content = fread($this->res, 12000);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:160:        $this->assertRegexp('/message='.str_repeat('abcde', 1900).'\+%5Btruncated%5D/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:168:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:169:        $this->handler->handle($this->getRecord($level, 'Backup of database "example" finished in 16 minutes.'));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:170:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:171:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:173:        $this->assertRegexp('/color='.$expectedColor.'/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:195:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:197:        $this->handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:199:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:200:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:202:        $this->assertRegexp('/color='.$expectedColor.'/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:242:        $this->res = fopen('php://memory', 'a');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:243:        $this->handler = $this->getMock(
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:250:        $reflectionProperty->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:251:        $reflectionProperty->setValue($this->handler, 'localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:253:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:254:            ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:255:            ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:256:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:257:            ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:258:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:259:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:260:            ->method('closeSocket')
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:261:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php:263:        $this->handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:22:            $this->markTestSkipped('The "doctrine/couchdb" package is not installed');
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:28:        $client = $this->getMockBuilder('Doctrine\\CouchDB\\CouchDBClient')
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:29:            ->setMethods(array('postDocument'))
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:30:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:31:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:33:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:41:            'datetime' => $record['datetime']->format('Y-m-d H:i:s'),
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:45:        $client->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:46:            ->method('postDocument')
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:47:            ->with($expected);
./vendor/monolog/monolog/tests/Monolog/Handler/DoctrineCouchDBHandlerTest.php:50:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:30:        $reflMethod->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:32:        return $reflMethod->invoke(null);
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:38:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:40:        $handler->handle($this->getRecord(Logger::DEBUG, 'foo[[bar]]{color: red}'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:44:c.log("%cfoo%cbar%c", "font-weight: normal", "color: red", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:48:        $this->assertEquals($expected, $this->generateScript());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:54:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:56:        $handler->handle($this->getRecord(Logger::DEBUG, "[foo] [[\"bar\n[baz]\"]]{color: red}"));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:60:c.log("%c[foo] %c\"bar\\n[baz]\"%c", "font-weight: normal", "color: red", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:64:        $this->assertEquals($expected, $this->generateScript());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:70:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:72:        $handler->handle($this->getRecord(Logger::DEBUG, '[[foo]]{macro: autolabel}'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:73:        $handler->handle($this->getRecord(Logger::DEBUG, '[[bar]]{macro: autolabel}'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:74:        $handler->handle($this->getRecord(Logger::DEBUG, '[[foo]]{macro: autolabel}'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:78:c.log("%c%cfoo%c", "font-weight: normal", "background-color: blue; color: white; border-radius: 3px; padding: 0 2px 0 2px", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:79:c.log("%c%cbar%c", "font-weight: normal", "background-color: green; color: white; border-radius: 3px; padding: 0 2px 0 2px", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:80:c.log("%c%cfoo%c", "font-weight: normal", "background-color: blue; color: white; border-radius: 3px; padding: 0 2px 0 2px", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:84:        $this->assertEquals($expected, $this->generateScript());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:90:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:92:        $handler->handle($this->getRecord(Logger::DEBUG, 'test', array('foo' => 'bar')));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:96:c.groupCollapsed("%ctest", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:97:c.log("%c%s", "font-weight: bold", "Context");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:103:        $this->assertEquals($expected, $this->generateScript());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:109:        $handler1->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:112:        $handler2->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:114:        $handler1->handle($this->getRecord(Logger::DEBUG, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:115:        $handler2->handle($this->getRecord(Logger::DEBUG, 'test2'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:116:        $handler1->handle($this->getRecord(Logger::DEBUG, 'test3'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:117:        $handler2->handle($this->getRecord(Logger::DEBUG, 'test4'));
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:121:c.log("%ctest1", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:122:c.log("%ctest2", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:123:c.log("%ctest3", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:124:c.log("%ctest4", "font-weight: normal");
./vendor/monolog/monolog/tests/Monolog/Handler/BrowserConsoleHandlerTest.php:128:        $this->assertEquals($expected, $this->generateScript());
./vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php:27:        foreach ($monologLogger->getLevels() as $levelName => $level) {
./vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php:42:        $psrLogger = $this->getMock('Psr\Log\NullLogger');
./vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php:43:        $psrLogger->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php:44:            ->method('log')
./vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php:45:            ->with(strtolower($levelName), $message, $context);
./vendor/monolog/monolog/tests/Monolog/Handler/PsrHandlerTest.php:48:        $handler->handle(array('level' => $level, 'level_name' => $levelName, 'message' => $message, 'context' => $context));
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:41:            $this->markTestSkipped("ruflin/elastica not installed");
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:45:        $this->client = $this->getMockBuilder('Elastica\Client')
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:46:            ->setMethods(array('addDocuments'))
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:47:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:48:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:71:        $formatter = new ElasticaFormatter($this->options['index'], $this->options['type']);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:72:        $expected = array($formatter->format($msg));
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:75:        $this->client->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:76:            ->method('addDocuments')
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:77:            ->with($expected);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:80:        $handler = new ElasticSearchHandler($this->client, $this->options);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:81:        $handler->handle($msg);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:82:        $handler->handleBatch(array($msg));
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:90:        $handler = new ElasticSearchHandler($this->client);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:92:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:93:        $this->assertInstanceOf('Monolog\Formatter\ElasticaFormatter', $handler->getFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:94:        $this->assertEquals('index_new', $handler->getFormatter()->getIndex());
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:95:        $this->assertEquals('type_new', $handler->getFormatter()->getType());
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:105:        $handler = new ElasticSearchHandler($this->client);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:107:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:117:            'index' => $this->options['index'],
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:118:            'type' => $this->options['type'],
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:121:        $handler = new ElasticSearchHandler($this->client, $this->options);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:122:        $this->assertEquals($expected, $handler->getOptions());
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:137:            $this->setExpectedException($expectedError[0], $expectedError[1]);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:138:            $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:140:            $this->assertFalse($handler->handle($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:176:        $expected['datetime'] = $msg['datetime']->format(\DateTime::ISO8601);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:184:        $handler = new ElasticSearchHandler($client, $this->options);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:186:            $handler->handleBatch(array($msg));
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:188:            $this->markTestSkipped("Cannot connect to Elastic Search server on localhost");
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:192:        $documentId = $this->getCreatedDocId($client->getLastResponse());
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:193:        $this->assertNotEmpty($documentId, 'No elastic document id received');
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:196:        $document = $this->getDocSourceFromElastic(
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:198:            $this->options['index'],
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:199:            $this->options['type'],
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:202:        $this->assertEquals($expected, $document);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:205:        $client->request("/{$this->options['index']}", Request::DELETE);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:215:        $data = $response->getData();
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:231:        $resp = $client->request("/{$index}/{$type}/{$documentId}", Request::GET);
./vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php:232:        $data = $resp->getData();
./vendor/monolog/monolog/tests/Monolog/Handler/SamplingHandlerTest.php:26:            $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/SamplingHandlerTest.php:28:        $count = count($testHandler->getRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/SamplingHandlerTest.php:30:        $this->assertLessThan(6000, $count);
./vendor/monolog/monolog/tests/Monolog/Handler/SamplingHandlerTest.php:31:        $this->assertGreaterThan(4000, $count);
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:30:        $redis = $this->getMock('Predis\Client');
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:31:        $this->assertInstanceof('Monolog\Handler\RedisHandler', new RedisHandler($redis, 'key'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:36:        $redis = $this->getMock('Redis');
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:37:        $this->assertInstanceof('Monolog\Handler\RedisHandler', new RedisHandler($redis, 'key'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:42:        $redis = $this->getMock('Predis\Client', array('rpush'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:45:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:46:            ->method('rpush')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:47:            ->with('key', 'test');
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:49:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:52:        $handler->setFormatter(new LineFormatter("%message%"));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:53:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:58:        $redis = $this->getMock('Redis', array('rpush'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:61:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:62:            ->method('rPush')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:63:            ->with('key', 'test');
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:65:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:68:        $handler->setFormatter(new LineFormatter("%message%"));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:69:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:74:        $redis = $this->getMock('Redis', array('multi', 'rpush', 'ltrim', 'exec'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:77:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:78:            ->method('multi')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:79:            ->will($this->returnSelf());
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:81:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:82:            ->method('rpush')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:83:            ->will($this->returnSelf());
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:85:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:86:            ->method('ltrim')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:87:            ->will($this->returnSelf());
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:89:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:90:            ->method('exec')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:91:            ->will($this->returnSelf());
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:93:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:96:        $handler->setFormatter(new LineFormatter("%message%"));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:97:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:102:        $redis = $this->getMock('Predis\Client', array('transaction'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:104:        $redisTransaction = $this->getMock('Predis\Client', array('rpush', 'ltrim'));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:106:        $redisTransaction->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:107:            ->method('rpush')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:108:            ->will($this->returnSelf());
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:110:        $redisTransaction->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:111:            ->method('ltrim')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:112:            ->will($this->returnSelf());
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:115:        $redis->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:116:            ->method('transaction')
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:117:            ->will($this->returnCallback(function ($cb) use ($redisTransaction) {
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:121:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:124:        $handler->setFormatter(new LineFormatter("%message%"));
./vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php:125:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:19: * @see    https://slack.com/apps/A0F81R8ET-slackbot
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:29:        $handler = new SlackbotHandler('test-team', 'test-token', 'test-channel');
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:30:        $this->assertInstanceOf('Monolog\Handler\AbstractProcessingHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:39:            'test-team',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:40:            'test-token',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:41:            'test-channel',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackbotHandlerTest.php:45:        $this->assertInstanceOf('Monolog\Handler\AbstractProcessingHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/NullHandlerTest.php:25:        $this->assertTrue($handler->handle($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/NullHandlerTest.php:31:        $this->assertFalse($handler->handle($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:47:        $handler->setFormatter(new LineFormatter('%channel%.%level_name%: %message% %context% %extra%', null, true));
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:48:        $handler->handle($this->getRecord(Logger::ERROR, "Foo\nBar\r\n\r\nBaz"));
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:50:        $this->assertSame("test.ERROR: Foo\nBar\r\n\r\nBaz [] []", $GLOBALS['error_log'][0][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:51:        $this->assertSame($GLOBALS['error_log'][0][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:54:        $handler->setFormatter(new LineFormatter(null, null, true));
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:55:        $handler->handle($this->getRecord(Logger::ERROR, "Foo\nBar\r\n\r\nBaz"));
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:57:        $this->assertStringMatchesFormat('[%s] test.ERROR: Foo', $GLOBALS['error_log'][1][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:58:        $this->assertSame($GLOBALS['error_log'][1][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:60:        $this->assertStringMatchesFormat('Bar', $GLOBALS['error_log'][2][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:61:        $this->assertSame($GLOBALS['error_log'][2][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:63:        $this->assertStringMatchesFormat('Baz [] []', $GLOBALS['error_log'][3][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/ErrorLogHandlerTest.php:64:        $this->assertSame($GLOBALS['error_log'][3][1], $type);
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:24:        $socket = $this->getMock('\Monolog\Handler\SyslogUdp\UdpSocket', array('send'), array('lol', 'lol'));
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:26:        $socket->expects($this->at(0))
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:27:            ->method('send')
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:28:            ->with("HEADER: The quick brown fox jumps over the lazy dog");
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:30:        $socket->write("The quick brown fox jumps over the lazy dog", "HEADER: ");
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:35:        $socket = $this->getMock('\Monolog\Handler\SyslogUdp\UdpSocket', array('send'), array('lol', 'lol'));
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:39:        $socket->expects($this->exactly(1))
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:40:            ->method('send')
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:41:            ->with("HEADER" . $truncatedString);
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:45:        $socket->write($longString, "HEADER");
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:51:        $socket->close();
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:52:        $socket->close();
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:61:        $socket->close();
./vendor/monolog/monolog/tests/Monolog/Handler/UdpSocketTest.php:62:        $socket->write('foo', "HEADER");
./vendor/monolog/monolog/tests/Monolog/Handler/MockRavenClient.php:20:        $data = array_merge($this->get_user_data(), $data);
./vendor/monolog/monolog/tests/Monolog/Handler/MockRavenClient.php:21:        $this->lastData = $data;
./vendor/monolog/monolog/tests/Monolog/Handler/MockRavenClient.php:22:        $this->lastStack = $stack;
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:24:            $this->markTestSkipped("mlehner/gelf-php not installed");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:35:        $handler = new GelfHandler($this->getMessagePublisher());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:36:        $this->assertInstanceOf('Monolog\Handler\GelfHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:53:        $messagePublisher = $this->getMessagePublisher();
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:54:        $handler = $this->getHandler($messagePublisher);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:56:        $record = $this->getRecord(Logger::DEBUG, "A test debug message");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:57:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:59:        $this->assertEquals(7, $messagePublisher->lastMessage->getLevel());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:60:        $this->assertEquals('test', $messagePublisher->lastMessage->getFacility());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:61:        $this->assertEquals($record['message'], $messagePublisher->lastMessage->getShortMessage());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:62:        $this->assertEquals(null, $messagePublisher->lastMessage->getFullMessage());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:67:        $messagePublisher = $this->getMessagePublisher();
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:68:        $handler = $this->getHandler($messagePublisher);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:70:        $record = $this->getRecord(Logger::WARNING, "A test warning message");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:71:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:73:        $this->assertEquals(4, $messagePublisher->lastMessage->getLevel());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:74:        $this->assertEquals('test', $messagePublisher->lastMessage->getFacility());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:75:        $this->assertEquals($record['message'], $messagePublisher->lastMessage->getShortMessage());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:76:        $this->assertEquals(null, $messagePublisher->lastMessage->getFullMessage());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:81:        $messagePublisher = $this->getMessagePublisher();
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:82:        $handler = $this->getHandler($messagePublisher);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:84:        $handler->setFormatter(new GelfMessageFormatter('mysystem', 'EXT', 'CTX'));
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:86:        $record = $this->getRecord(Logger::WARNING, "A test warning message");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:89:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:91:        $this->assertEquals('mysystem', $messagePublisher->lastMessage->getHost());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:92:        $this->assertArrayHasKey('_EXTblarg', $messagePublisher->lastMessage->toArray());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php:93:        $this->assertArrayHasKey('_CTXfrom', $messagePublisher->lastMessage->toArray());
./vendor/monolog/monolog/tests/Monolog/Handler/CouchDBHandlerTest.php:21:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/CouchDBHandlerTest.php:26:            $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/CouchDBHandlerTest.php:28:            $this->markTestSkipped('Could not connect to couchdb server on http://localhost:5984');
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:37:        $handler->handle($this->getRecord(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:43:        $handler->handle($this->getRecord(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:49:        $handler->handle($this->getRecord(Logger::ERROR, 'log message', array('a' => 'b')));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:50:        $this->assertEquals(array('context_a' => 'b'), self::$customParameters);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:56:        $handler->handle($this->getRecord(
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:61:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:69:        $record = $this->getRecord(Logger::ERROR, 'log message');
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:73:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:75:        $this->assertEquals(array('extra_c' => 'd'), self::$customParameters);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:80:        $record = $this->getRecord(Logger::ERROR, 'log message');
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:84:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:86:        $this->assertEquals(
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:94:        $record = $this->getRecord(Logger::ERROR, 'log message', array('a' => 'b'));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:98:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:105:        $this->assertEquals($expected, self::$customParameters);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:111:        $handler->setFormatter(new LineFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:112:        $handler->handle($this->getRecord(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:118:        $handler->handle($this->getRecord(Logger::ERROR, 'log message'));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:120:        $this->assertEquals(null, self::$appname);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:126:        $handler->handle($this->getRecord(Logger::ERROR, 'log message'));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:128:        $this->assertEquals('myAppName', self::$appname);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:134:        $handler->handle($this->getRecord(Logger::ERROR, 'log message', array('appname' => 'logAppName')));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:136:        $this->assertEquals('logAppName', self::$appname);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:142:        $handler->handle($this->getRecord(Logger::ERROR, 'log message'));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:144:        $this->assertEquals(null, self::$transactionName);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:150:        $handler->handle($this->getRecord(Logger::ERROR, 'log message'));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:152:        $this->assertEquals('myTransaction', self::$transactionName);
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:158:        $handler->handle($this->getRecord(Logger::ERROR, 'log message', array('transaction_name' => 'logTransactName')));
./vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php:160:        $this->assertEquals('logTransactName', self::$transactionName);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:38:            $this->markTestSkipped('This test requires openssl to run');
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:44:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:45:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:46:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:47:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:49:        $this->assertRegexp('/POST \/api\/chat.postMessage HTTP\/1.1\\r\\nHost: slack.com\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:54:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:55:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:56:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:57:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:59:        $this->assertRegExp('/username=Monolog/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:60:        $this->assertRegExp('/channel=channel1/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:61:        $this->assertRegExp('/token=myToken/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:62:        $this->assertRegExp('/attachments/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:67:        $this->createHandler('myToken', 'channel1', 'Monolog', false);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:68:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:69:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:70:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:72:        $this->createHandler('myToken', 'channel1', 'Monolog', false);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:73:        $this->handler->setFormatter(new LineFormatter('foo--%message%'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:74:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test2'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:75:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:76:        $content2 = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:78:        $this->assertRegexp('/text=test1/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:79:        $this->assertRegexp('/text=foo--test2/', $content2);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:84:        $this->createHandler('myToken', 'channel1', 'Monolog', true, 'alien');
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:85:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:86:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:87:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:89:        $this->assertRegexp('/icon_emoji=%3Aalien%3A/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:97:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:98:        $this->handler->handle($this->getRecord($level, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:99:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:100:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:102:        $this->assertRegexp('/%22color%22%3A%22'.$expectedColor.'/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:107:        $this->createHandler('myToken', 'channel1', 'Monolog', false);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:108:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:109:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:110:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:112:        $this->assertRegexp('/text=test1/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:132:        $this->res = fopen('php://memory', 'a');
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:133:        $this->handler = $this->getMock(
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:140:        $reflectionProperty->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:141:        $reflectionProperty->setValue($this->handler, 'localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:143:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:144:            ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:145:            ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:146:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:147:            ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:148:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:149:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:150:            ->method('closeSocket')
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:151:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackHandlerTest.php:153:        $this->handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:28:        $record = $this->getRecord($level, 'test'.$method);
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:29:        $this->assertFalse($handler->hasRecords($level));
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:30:        $this->assertFalse($handler->hasRecord($record, $level));
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:31:        $this->assertFalse($handler->{'has'.$method}($record), 'has'.$method);
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:32:        $this->assertFalse($handler->{'has'.$method.'ThatContains'}('test'), 'has'.$method.'ThatContains');
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:33:        $this->assertFalse($handler->{'has'.$method.'ThatPasses'}(function ($rec) {
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:36:        $this->assertFalse($handler->{'has'.$method.'ThatMatches'}('/test\w+/'));
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:37:        $this->assertFalse($handler->{'has'.$method.'Records'}(), 'has'.$method.'Records');
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:38:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:40:        $this->assertFalse($handler->{'has'.$method}('bar'), 'has'.$method);
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:41:        $this->assertTrue($handler->hasRecords($level));
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:42:        $this->assertTrue($handler->hasRecord($record, $level));
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:43:        $this->assertTrue($handler->{'has'.$method}($record), 'has'.$method);
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:44:        $this->assertTrue($handler->{'has'.$method}('test'.$method), 'has'.$method);
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:45:        $this->assertTrue($handler->{'has'.$method.'ThatContains'}('test'), 'has'.$method.'ThatContains');
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:46:        $this->assertTrue($handler->{'has'.$method.'ThatPasses'}(function ($rec) {
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:49:        $this->assertTrue($handler->{'has'.$method.'ThatMatches'}('/test\w+/'));
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:50:        $this->assertTrue($handler->{'has'.$method.'Records'}(), 'has'.$method.'Records');
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:52:        $records = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php:54:        $this->assertEquals(array($record), $records);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:24:        $this->mailer = $this
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:25:            ->getMockBuilder('Swift_Mailer')
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:26:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:27:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:32:        $this->mailer->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:33:            ->method('send');
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:38:        $handler = new SwiftMailerHandler($this->mailer, $callback);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:41:            $this->getRecord(Logger::DEBUG),
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:42:            $this->getRecord(Logger::INFO),
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:44:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:51:        $this->mailer->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:52:            ->method('send')
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:53:            ->with($this->callback(function ($value) use ($expectedMessage) {
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:55:                    && $value->getSubject() === 'Emergency'
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:62:            $expectedMessage->setSubject($subject);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:66:        $handler = new SwiftMailerHandler($this->mailer, $callback);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:70:            $this->getRecord(Logger::EMERGENCY),
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:72:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:79:        $messageTemplate->setSubject('Alert: %level_name% %message%');
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:82:        $this->mailer->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:83:            ->method('send')
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:84:            ->with($this->callback(function ($value) use (&$receivedMessage) {
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:89:        $handler = new SwiftMailerHandler($this->mailer, $messageTemplate);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:92:            $this->getRecord(Logger::EMERGENCY),
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:94:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:96:        $this->assertEquals('Alert: EMERGENCY test', $receivedMessage->getSubject());
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:102:        $handler = new SwiftMailerHandler($this->mailer, $messageTemplate);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:105:        $method->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:106:        $method->invokeArgs($handler, array($messageTemplate, array()));
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:108:        $builtMessage1 = $method->invoke($handler, $messageTemplate, array());
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:109:        $builtMessage2 = $method->invoke($handler, $messageTemplate, array());
./vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php:111:        $this->assertFalse($builtMessage1->getId() === $builtMessage2->getId(), 'Two different messages have the same id');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:32:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler', array(Logger::WARNING, false));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:33:        $this->assertEquals(Logger::WARNING, $handler->getLevel());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:34:        $this->assertEquals(false, $handler->getBubble());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:36:        $handler->setLevel(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:37:        $handler->setBubble(true);
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:38:        $handler->setFormatter($formatter = new LineFormatter);
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:39:        $this->assertEquals(Logger::ERROR, $handler->getLevel());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:40:        $this->assertEquals(true, $handler->getBubble());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:41:        $this->assertSame($formatter, $handler->getFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:49:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:50:        $handler->expects($this->exactly(2))
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:51:            ->method('handle');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:52:        $handler->handleBatch(array($this->getRecord(), $this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:60:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler', array(Logger::WARNING, false));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:61:        $this->assertTrue($handler->isHandling($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:62:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:70:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler', array('warning', false));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:71:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:72:        $handler->setLevel('debug');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:73:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:82:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:83:        $this->assertInstanceOf('Monolog\Formatter\LineFormatter', $handler->getFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:93:        $logger = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:97:        $logger->pushProcessor($processor1);
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:98:        $logger->pushProcessor($processor2);
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:100:        $this->assertEquals($processor2, $logger->popProcessor());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:101:        $this->assertEquals($processor1, $logger->popProcessor());
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:102:        $logger->popProcessor();
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:111:        $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/AbstractHandlerTest.php:113:        $handler->pushProcessor(new \stdClass());
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:37:            $this->markTestSkipped('This test requires openssl to run');
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:43:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:44:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:45:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:46:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:48:        $this->assertRegexp('/POST \/v1\/messages\/team_inbox\/.* HTTP\/1.1\\r\\nHost: api.flowdock.com\\r\\nContent-Type: application\/json\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:58:        $this->assertRegexp('/"source":"test_source"/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:59:        $this->assertRegexp('/"from_address":"source@test\.com"/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:65:        $this->res = fopen('php://memory', 'a');
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:66:        $this->handler = $this->getMock(
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:73:        $reflectionProperty->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:74:        $reflectionProperty->setValue($this->handler, 'localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:76:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:77:            ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:78:            ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:79:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:80:            ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:81:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:82:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:83:            ->method('closeSocket')
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:84:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/FlowdockHandlerTest.php:86:        $this->handler->setFormatter(new FlowdockFormatter('test_source', 'source@test.com'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:30:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:31:        $this->handler->setHighPriorityLevel(Logger::EMERGENCY); // skip priority notifications
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:32:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:33:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:34:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:36:        $this->assertRegexp('/POST \/1\/messages.json HTTP\/1.1\\r\\nHost: api.pushover.net\\r\\nContent-Type: application\/x-www-form-urlencoded\\r\\nContent-Length: \d{2,4}\\r\\n\\r\\n/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:46:        $this->assertRegexp('/token=myToken&user=myUser&message=test1&title=Monolog&timestamp=\d{10}$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:51:        $this->createHandler('myToken', 'myUser', 'Backup finished - SQL1');
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:52:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:53:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:54:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:56:        $this->assertRegexp('/title=Backup\+finished\+-\+SQL1/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:61:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:62:        $this->handler->setHighPriorityLevel(Logger::EMERGENCY); // skip priority notifications
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:63:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'Backup of database "example" finished in 16 minutes.'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:64:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:65:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:67:        $this->assertRegexp('/message=Backup\+of\+database\+%22example%22\+finished\+in\+16\+minutes\./', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:73:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:74:        $this->handler->setHighPriorityLevel(Logger::EMERGENCY); // skip priority notifications
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:75:        $this->handler->handle($this->getRecord(Logger::CRITICAL, $message));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:76:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:77:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:81:        $this->assertRegexp('/message=' . $expectedMessage . '&title/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:86:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:87:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:88:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:89:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:91:        $this->assertRegexp('/token=myToken&user=myUser&message=test1&title=Monolog&timestamp=\d{10}&priority=1$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:96:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:97:        $this->handler->handle($this->getRecord(Logger::EMERGENCY, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:98:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:99:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:101:        $this->assertRegexp('/token=myToken&user=myUser&message=test1&title=Monolog&timestamp=\d{10}&priority=2&retry=30&expire=25200$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:106:        $this->createHandler('myToken', array('userA', 'userB'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:107:        $this->handler->handle($this->getRecord(Logger::EMERGENCY, 'test1'));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:108:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:109:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:111:        $this->assertRegexp('/token=myToken&user=userA&message=test1&title=Monolog&timestamp=\d{10}&priority=2&retry=30&expire=25200POST/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:112:        $this->assertRegexp('/token=myToken&user=userB&message=test1&title=Monolog&timestamp=\d{10}&priority=2&retry=30&expire=25200$/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:118:        $this->res = fopen('php://memory', 'a');
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:119:        $this->handler = $this->getMock(
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:126:        $reflectionProperty->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:127:        $reflectionProperty->setValue($this->handler, 'localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:129:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:130:            ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:131:            ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:132:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:133:            ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:134:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:135:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:136:            ->method('closeSocket')
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:137:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php:139:        $this->handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:22:            $this->markTestSkipped('ZendServer is not installed');
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:31:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:36:        $zendMonitor = $this->getMockBuilder('Monolog\Handler\ZendMonitorHandler')
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:37:            ->setMethods(array('writeZendMonitorCustomEvent', 'getDefaultFormatter'))
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:38:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:40:        $formatterMock = $this->getMockBuilder('Monolog\Formatter\NormalizerFormatter')
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:41:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:42:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:44:        $formatterMock->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:45:            ->method('format')
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:46:            ->will($this->returnValue($formatterResult));
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:48:        $zendMonitor->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:49:            ->method('getDefaultFormatter')
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:50:            ->will($this->returnValue($formatterMock));
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:52:        $levelMap = $zendMonitor->getLevelMap();
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:54:        $zendMonitor->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:55:            ->method('writeZendMonitorCustomEvent')
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:56:            ->with($levelMap[$record['level']], $record['message'], $formatterResult);
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:58:        $zendMonitor->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/ZendMonitorHandlerTest.php:67:        $this->assertInstanceOf('Monolog\Formatter\NormalizerFormatter', $zendMonitor->getDefaultFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:34:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:35:        $this->handler->handle($this->getRecord(Logger::CRITICAL, 'Critical write test'));
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:37:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:38:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:40:        $this->assertRegexp('/testToken \[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\] test.CRITICAL: Critical write test/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:46:            $this->getRecord(),
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:47:            $this->getRecord(),
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:48:            $this->getRecord(),
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:50:        $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:51:        $this->handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:53:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:54:        $content = fread($this->res, 1024);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:56:        $this->assertRegexp('/(testToken \[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\] .* \[\] \[\]\n){3}/', $content);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:63:        $this->res = fopen('php://memory', 'a');
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:64:        $this->handler = $this->getMock(
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:71:        $reflectionProperty->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:72:        $reflectionProperty->setValue($this->handler, 'localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:74:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:75:            ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:76:            ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:77:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:78:            ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:79:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:80:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:81:            ->method('closeSocket')
./vendor/monolog/monolog/tests/Monolog/Handler/LogEntriesHandlerTest.php:82:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:21: * @see    https://rollbar.com/docs/notifier/rollbar-php/
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:41:        $this->setupRollbarNotifierMock();
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:50:        $handler = $this->createHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:52:        $handler->handle($this->createExceptionRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:54:        $this->assertEquals('debug', $this->reportedExceptionArguments['payload']['level']);
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:59:        $this->rollbarNotifier = $this->getMockBuilder('RollbarNotifier')
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:60:            ->setMethods(array('report_message', 'report_exception', 'flush'))
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:61:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:65:        $this->rollbarNotifier
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:66:            ->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:67:            ->method('report_exception')
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:68:            ->willReturnCallback(function ($exception, $context, $payload) use ($that) {
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:69:                $that->reportedExceptionArguments = compact('exception', 'context', 'payload');
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:75:        return new RollbarHandler($this->rollbarNotifier, Logger::DEBUG);
./vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php:80:        return $this->getRecord($level, $message, array(
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:44:        $mailer->addHeader("Content-Type: text/html\r\nFrom: faked@attacker.org");
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:53:        $mailer->addHeader(array("Content-Type: text/html\r\nFrom: faked@attacker.org"));
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:62:        $mailer->setContentType("text/html\r\nFrom: faked@attacker.org");
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:71:        $mailer->setEncoding("utf-8\r\nFrom: faked@attacker.org");
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:81:        $mailer->handleBatch(array());
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:84:        $this->assertEmpty($GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:86:        // non-empty batch
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:87:        $mailer->handle($this->getRecord(Logger::ERROR, "Foo\nBar\r\n\r\nBaz"));
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:88:        $this->assertNotEmpty($GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:89:        $this->assertInternalType('array', $GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:90:        $this->assertArrayHasKey('0', $GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:92:        $this->assertCount(5, $params);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:93:        $this->assertSame($to, $params[0]);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:94:        $this->assertSame($subject, $params[1]);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:95:        $this->assertStringEndsWith(" test.ERROR: Foo Bar  Baz [] []\n", $params[2]);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:96:        $this->assertSame("From: $from\r\nContent-type: text/plain; charset=utf-8\r\n", $params[3]);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:97:        $this->assertSame('', $params[4]);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:103:        $mailer->handle($this->getRecord(Logger::ERROR, "Foo\nBar\r\n\r\nBaz"));
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:104:        $this->assertNotEmpty($GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:105:        $this->assertInternalType('array', $GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:106:        $this->assertArrayHasKey('0', $GLOBALS['mail']);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:108:        $this->assertCount(5, $params);
./vendor/monolog/monolog/tests/Monolog/Handler/NativeMailerHandlerTest.php:109:        $this->assertSame('Alert: ERROR Foo Bar  Baz', $params[1]);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfMockMessagePublisher.php:21:        $this->lastMessage = $message;
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:28:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:29:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:31:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:33:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:34:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:35:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:48:        $handler->handle($this->getRecord(Logger::ERROR, 'Foo:bar'));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:49:        $handler->handle($this->getRecord(Logger::CRITICAL, "Foo\nbar"));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:51:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:53:        $this->assertTrue($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:54:        $this->assertTrue($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:55:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:69:        $handler->handle($this->getRecord(Logger::ERROR, 'Foo:bar'));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:70:        $handler->handle($this->getRecord(Logger::CRITICAL, "Foo\nbar"));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:72:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:74:        $this->assertFalse($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:75:        $this->assertFalse($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:76:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:90:        $record = $this->getRecord(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:91:        $record['datetime']->modify('+62seconds');
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:92:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:93:        $record = $this->getRecord(Logger::CRITICAL);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:94:        $record['datetime']->modify('+62seconds');
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:95:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:97:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:99:        $this->assertTrue($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:100:        $this->assertTrue($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:101:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:117:        $record = $this->getRecord(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:118:        $record['datetime']->modify('-1day -10seconds');
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:119:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:120:        $record2 = $this->getRecord(Logger::CRITICAL);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:121:        $record2['datetime']->modify('-1day -10seconds');
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:122:        $handler->handle($record2);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:123:        $record3 = $this->getRecord(Logger::CRITICAL);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:124:        $record3['datetime']->modify('-30seconds');
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:125:        $handler->handle($record3);
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:128:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:129:        $this->assertSame(
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:130:            $record['datetime']->getTimestamp() . ":ERROR:test\n" .
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:131:            $record2['datetime']->getTimestamp() . ":CRITICAL:test\n" .
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:132:            $record3['datetime']->getTimestamp() . ":CRITICAL:test\n",
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:135:        $this->assertTrue($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:136:        $this->assertTrue($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:137:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:140:        $test->clear();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:141:        $this->assertFalse($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:142:        $this->assertFalse($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:145:        $handler->handle($record = $this->getRecord(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:146:        $handler->handle($record2 = $this->getRecord(Logger::CRITICAL));
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:147:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:150:        $this->assertSame(
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:151:            $record3['datetime']->getTimestamp() . ":CRITICAL:test\n" .
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:152:            $record['datetime']->getTimestamp() . ":ERROR:test\n" .
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:153:            $record2['datetime']->getTimestamp() . ":CRITICAL:test\n",
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:156:        $this->assertTrue($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:157:        $this->assertTrue($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/DeduplicationHandlerTest.php:158:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:21: * @see    https://api.slack.com/incoming-webhooks
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:35:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:36:        $slackRecord = $handler->getSlackRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:37:        $this->assertInstanceOf('Monolog\Handler\Slack\SlackRecord', $slackRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:38:        $this->assertEquals(array(
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:53:                    'ts' => $record['datetime']->getTimestamp(),
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:56:        ), $slackRecord->getSlackData($record));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:67:            'test-channel',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:68:            'test-username',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:77:        $slackRecord = $handler->getSlackRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:78:        $this->assertInstanceOf('Monolog\Handler\Slack\SlackRecord', $slackRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:79:        $this->assertEquals(array(
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:80:            'username' => 'test-username',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:82:            'channel' => 'test-channel',
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:84:        ), $slackRecord->getSlackData($this->getRecord()));
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:93:        $formatter = $handler->getFormatter();
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:94:        $this->assertInstanceOf('Monolog\Formatter\FormatterInterface', $formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:104:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/SlackWebhookHandlerTest.php:105:        $this->assertSame($formatter, $handler->getFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:31:        $time = '2014-01-07T12:34';
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:35:        $handler = $this->getMockBuilder('\Monolog\Handler\SyslogUdpHandler')
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:36:            ->setConstructorArgs(array("127.0.0.1", 514, "authpriv"))
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:37:            ->setMethods(array('getDateTime'))
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:38:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:40:        $handler->method('getDateTime')
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:41:            ->willReturn($time);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:43:        $handler->setFormatter(new \Monolog\Formatter\ChromePHPFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:45:        $socket = $this->getMock('\Monolog\Handler\SyslogUdp\UdpSocket', array('write'), array('lol', 'lol'));
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:46:        $socket->expects($this->at(0))
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:47:            ->method('write')
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:48:            ->with("lol", "<".(LOG_AUTHPRIV + LOG_WARNING).">1 $time $host php $pid - - ");
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:49:        $socket->expects($this->at(1))
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:50:            ->method('write')
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:51:            ->with("hej", "<".(LOG_AUTHPRIV + LOG_WARNING).">1 $time $host php $pid - - ");
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:53:        $handler->setSocket($socket);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:55:        $handler->handle($this->getRecordWithMessage("hej\nlol"));
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:61:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:63:        $socket = $this->getMock('\Monolog\Handler\SyslogUdp\UdpSocket', array('write'), array('lol', 'lol'));
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:64:        $socket->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:65:            ->method('write');
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:67:        $handler->setSocket($socket);
./vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php:69:        $handler->handle($this->getRecordWithMessage(null));
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:31:        $this->handler = $this->getMock('Monolog\\Handler\\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:32:        $this->wrapper = new HandlerWrapper($this->handler);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:52:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:53:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:54:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:55:            ->with($record)
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:56:            ->willReturn($result);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:58:        $this->assertEquals($result, $this->wrapper->isHandling($record));
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:67:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:68:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:69:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:70:            ->with($record)
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:71:            ->willReturn($result);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:73:        $this->assertEquals($result, $this->wrapper->handle($record));
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:82:        $records = $this->getMultipleRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:83:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:84:            ->method('handleBatch')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:85:            ->with($records)
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:86:            ->willReturn($result);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:88:        $this->assertEquals($result, $this->wrapper->handleBatch($records));
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:94:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:95:            ->method('pushProcessor')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:96:            ->with($processor);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:98:        $this->assertEquals($this->wrapper, $this->wrapper->pushProcessor($processor));
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:104:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:105:            ->method('popProcessor')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:106:            ->willReturn($processor);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:108:        $this->assertEquals($processor, $this->wrapper->popProcessor());
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:113:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:114:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:115:            ->method('setFormatter')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:116:            ->with($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:118:        $this->assertEquals($this->wrapper, $this->wrapper->setFormatter($formatter));
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:123:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:124:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:125:            ->method('getFormatter')
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:126:            ->willReturn($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php:128:        $this->assertEquals($formatter, $this->wrapper->getFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:29:        $mongo = $this->getMock('Mongo', array('selectCollection'), array(), '', false);
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:30:        $collection = $this->getMock('stdClass', array('save'));
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:32:        $mongo->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:33:            ->method('selectCollection')
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:34:            ->with('DB', 'Collection')
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:35:            ->will($this->returnValue($collection));
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:37:        $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:45:            'datetime' => $record['datetime']->format('Y-m-d H:i:s'),
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:49:        $collection->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:50:            ->method('save')
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:51:            ->with($expected);
./vendor/monolog/monolog/tests/Monolog/Handler/MongoDBHandlerTest.php:54:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:36:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:37:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:39:            $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:40:            $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:41:            $this->assertTrue(count($test->getRecords()) === 2);
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:52:        $handler->handleBatch(array($this->getRecord(Logger::DEBUG), $this->getRecord(Logger::INFO)));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:54:            $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:55:            $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:56:            $this->assertTrue(count($test->getRecords()) === 2);
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:67:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::ERROR)));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:68:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::WARNING)));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:69:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:79:        $handler->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:84:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:85:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:86:        $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:87:        $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:98:        $handler->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:103:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:104:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:105:        $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php:106:        $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:23:            $this->markTestSkipped('aws/aws-sdk-php not installed');
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:26:        $this->client = $this->getMockBuilder('Aws\DynamoDb\DynamoDbClient')
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:27:            ->setMethods(array('formatAttributes', '__call'))
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:28:            ->disableOriginalConstructor()->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:33:        $this->assertInstanceOf('Monolog\Handler\DynamoDbHandler', new DynamoDbHandler($this->client, 'foo'));
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:38:        $this->assertInstanceOf('Monolog\Handler\HandlerInterface', new DynamoDbHandler($this->client, 'foo'));
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:43:        $handler = new DynamoDbHandler($this->client, 'foo');
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:44:        $this->assertInstanceOf('Monolog\Formatter\ScalarFormatter', $handler->getFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:49:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:50:        $formatter = $this->getMock('Monolog\Formatter\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:52:        $handler = new DynamoDbHandler($this->client, 'foo');
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:53:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:63:             ->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:64:             ->method('format')
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:65:             ->with($record)
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:66:             ->will($this->returnValue($formatted));
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:67:        $this->client
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:68:             ->expects($isV3 ? $this->never() : $this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:69:             ->method('formatAttributes')
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:70:             ->with($this->isType('array'))
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:71:             ->will($this->returnValue($formatted));
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:72:        $this->client
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:73:             ->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:74:             ->method('__call')
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:75:             ->with('putItem', array(array(
./vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php:80:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:24:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:25:        $formatter->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:26:            ->method('formatBatch'); // Each record is formatted
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:28:        $handler = $this->getMockForAbstractClass('Monolog\\Handler\\MailHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:29:        $handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:30:            ->method('send');
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:31:        $handler->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:32:            ->method('write'); // write is for individual records
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:34:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:36:        $handler->handleBatch($this->getMultipleRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:45:            $this->getRecord(Logger::DEBUG, 'debug message 1'),
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:46:            $this->getRecord(Logger::DEBUG, 'debug message 2'),
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:47:            $this->getRecord(Logger::INFO, 'information'),
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:50:        $handler = $this->getMockForAbstractClass('Monolog\\Handler\\MailHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:51:        $handler->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:52:            ->method('send');
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:53:        $handler->setLevel(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:55:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:63:        $handler = $this->getMockForAbstractClass('Monolog\\Handler\\MailHandler');
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:65:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:67:        $records[0]['formatted'] = '['.$record['datetime']->format('Y-m-d H:i:s').'] test.WARNING: test [] []'."\n";
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:69:        $handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:70:            ->method('send')
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:71:            ->with($records[0]['formatted'], $records);
./vendor/monolog/monolog/tests/Monolog/Handler/MailHandlerTest.php:73:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:37:        $this->createHandler('garbage://here');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:38:        $this->writeRecord('data');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:46:        $this->createHandler('localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:47:        $this->handler->setConnectionTimeout(-1);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:52:        $this->createHandler('localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:53:        $this->handler->setConnectionTimeout(10.1);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:54:        $this->assertEquals(10.1, $this->handler->getConnectionTimeout());
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:62:        $this->createHandler('localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:63:        $this->handler->setTimeout(-1);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:68:        $this->createHandler('localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:69:        $this->handler->setTimeout(10.25);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:70:        $this->assertEquals(10.25, $this->handler->getTimeout());
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:75:        $this->createHandler('localhost:1234');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:76:        $this->handler->setWritingTimeout(10.25);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:77:        $this->assertEquals(10.25, $this->handler->getWritingTimeout());
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:82:        $this->createHandler('tcp://localhost:9090');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:83:        $this->assertEquals('tcp://localhost:9090', $this->handler->getConnectionString());
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:91:        $this->setMockHandler(array('fsockopen'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:92:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:93:            ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:94:            ->will($this->returnValue(false));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:95:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:103:        $this->setMockHandler(array('pfsockopen'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:104:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:105:            ->method('pfsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:106:            ->will($this->returnValue(false));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:107:        $this->handler->setPersistent(true);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:108:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:116:        $this->setMockHandler(array('streamSetTimeout'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:117:        $this->handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:118:            ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:119:            ->will($this->returnValue(false));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:120:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:128:        $this->setMockHandler(array('fwrite'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:139:        $this->handler->expects($this->exactly(2))
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:140:            ->method('fwrite')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:141:            ->will($this->returnCallback($callback));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:143:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:151:        $this->setMockHandler(array('fwrite', 'streamGetMetadata'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:162:        $this->handler->expects($this->exactly(1))
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:163:            ->method('fwrite')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:164:            ->will($this->returnCallback($callback));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:165:        $this->handler->expects($this->exactly(1))
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:166:            ->method('streamGetMetadata')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:167:            ->will($this->returnValue(array('timed_out' => true)));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:169:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:177:        $this->setMockHandler(array('fwrite', 'streamGetMetadata'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:179:        $res = $this->res;
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:186:        $this->handler->expects($this->exactly(1))
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:187:            ->method('fwrite')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:188:            ->will($this->returnCallback($callback));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:189:        $this->handler->expects($this->exactly(1))
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:190:            ->method('streamGetMetadata')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:191:            ->will($this->returnValue(array('timed_out' => false)));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:193:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:198:        $this->setMockHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:199:        $this->writeRecord('test1');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:200:        $this->writeRecord('test2');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:201:        $this->writeRecord('test3');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:202:        fseek($this->res, 0);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:203:        $this->assertEquals('test1test2test3', fread($this->res, 1024));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:208:        $this->setMockHandler(array('fwrite'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:219:        $this->handler->expects($this->exactly(2))
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:220:            ->method('fwrite')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:221:            ->will($this->returnCallback($callback));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:223:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:228:        $this->setMockHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:229:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:230:        $this->assertInternalType('resource', $this->res);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:231:        $this->handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:232:        $this->assertFalse(is_resource($this->res), "Expected resource to be closed after closing handler");
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:237:        $this->setMockHandler();
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:238:        $this->handler->setPersistent(true);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:239:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:240:        $this->assertTrue(is_resource($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:241:        $this->handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:242:        $this->assertTrue(is_resource($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:250:        $this->setMockHandler(array('fwrite', 'streamGetMetadata'));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:252:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:253:            ->method('fwrite')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:254:            ->will($this->returnValue(0));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:256:        $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:257:            ->method('streamGetMetadata')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:258:            ->will($this->returnValue(array('timed_out' => false)));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:260:        $this->handler->setWritingTimeout(1);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:262:        $this->writeRecord('Hello world');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:267:        $this->handler = new SocketHandler($connectionString);
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:268:        $this->handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:273:        $this->handler->handle($this->getRecord(Logger::WARNING, $string));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:278:        $this->res = fopen('php://memory', 'a');
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:285:        $this->handler = $this->getMock(
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:290:            $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:291:                ->method('fsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:292:                ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:296:            $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:297:                ->method('pfsockopen')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:298:                ->will($this->returnValue($this->res));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:302:            $this->handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:303:                ->method('streamSetTimeout')
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:304:                ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/SocketHandlerTest.php:307:        $this->handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:26:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:27:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::INFO)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:28:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::NOTICE)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:29:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::WARNING)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:30:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::ERROR)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:31:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::CRITICAL)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:32:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::ALERT)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:33:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::EMERGENCY)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:46:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:47:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:49:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:50:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:51:        $handler->handle($this->getRecord(Logger::NOTICE));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:52:        $this->assertTrue($test->hasNoticeRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:54:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:55:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:56:        $handler->handle($this->getRecord(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:57:        $this->assertFalse($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:58:        $handler->handle($this->getRecord(Logger::CRITICAL));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:59:        $this->assertFalse($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:60:        $handler->handle($this->getRecord(Logger::ALERT));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:61:        $this->assertFalse($test->hasAlertRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:62:        $handler->handle($this->getRecord(Logger::EMERGENCY));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:63:        $this->assertFalse($test->hasEmergencyRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:68:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:69:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:70:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:71:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:72:        $handler->handle($this->getRecord(Logger::NOTICE));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:73:        $this->assertFalse($test->hasNoticeRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:74:        $handler->handle($this->getRecord(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:75:        $this->assertTrue($test->hasErrorRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:76:        $handler->handle($this->getRecord(Logger::CRITICAL));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:77:        $this->assertFalse($test->hasCriticalRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:90:        $handler->setAcceptedLevels($levels);
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:91:        $this->assertSame($levels, $handler->getAcceptedLevels());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:93:        $handler->setAcceptedLevels(array('info', 'error'));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:94:        $this->assertSame($levels, $handler->getAcceptedLevels());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:97:        $handler->setAcceptedLevels(Logger::CRITICAL, Logger::EMERGENCY);
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:98:        $this->assertSame($levels, $handler->getAcceptedLevels());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:100:        $handler->setAcceptedLevels('critical', 'emergency');
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:101:        $this->assertSame($levels, $handler->getAcceptedLevels());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:111:        $handler->pushProcessor(
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:118:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:119:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:120:        $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:121:        $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:132:        $this->assertTrue($handler->handle($this->getRecord(Logger::INFO)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:133:        $this->assertFalse($handler->handle($this->getRecord(Logger::WARNING)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:136:        $this->assertFalse($handler->handle($this->getRecord(Logger::INFO)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:137:        $this->assertFalse($handler->handle($this->getRecord(Logger::WARNING)));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:151:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:152:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:153:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:154:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FilterHandlerTest.php:168:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:31:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:32:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:33:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:36:            'X-Wf-Protocol-1'    => 'http://meta.wildfirehq.org/Protocol/JsonStream/0.2',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:37:            'X-Wf-1-Structure-1' => 'http://meta.firephp.org/Wildfire/Structure/FirePHP/FirebugConsole/0.1',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:38:            'X-Wf-1-Plugin-1'    => 'http://meta.firephp.org/Wildfire/Plugin/FirePHP/Library-FirePHPCore/0.3',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:39:            'X-Wf-1-1-1-1'       => 'test',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:40:            'X-Wf-1-1-1-2'       => 'test',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:43:        $this->assertEquals($expected, $handler->getHeaders());
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:49:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:50:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:51:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:54:        $handler2->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:55:        $handler2->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:56:        $handler2->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:59:            'X-Wf-Protocol-1'    => 'http://meta.wildfirehq.org/Protocol/JsonStream/0.2',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:60:            'X-Wf-1-Structure-1' => 'http://meta.firephp.org/Wildfire/Structure/FirePHP/FirebugConsole/0.1',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:61:            'X-Wf-1-Plugin-1'    => 'http://meta.firephp.org/Wildfire/Plugin/FirePHP/Library-FirePHPCore/0.3',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:62:            'X-Wf-1-1-1-1'       => 'test',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:63:            'X-Wf-1-1-1-2'       => 'test',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:67:            'X-Wf-1-1-1-3'       => 'test',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:68:            'X-Wf-1-1-1-4'       => 'test',
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:71:        $this->assertEquals($expected, $handler->getHeaders());
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:72:        $this->assertEquals($expected2, $handler2->getHeaders());
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:89:        $this->headers[$header] = $content;
./vendor/monolog/monolog/tests/Monolog/Handler/FirePHPHandlerTest.php:94:        return $this->headers;
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:23:            $this->markTestSkipped('raven/raven not installed');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:34:        $handler = new RavenHandler($this->getRavenClient());
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:35:        $this->assertInstanceOf('Monolog\Handler\RavenHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:54:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:55:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:57:        $record = $this->getRecord(Logger::DEBUG, 'A test debug message');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:58:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:60:        $this->assertEquals($ravenClient::DEBUG, $ravenClient->lastData['level']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:61:        $this->assertContains($record['message'], $ravenClient->lastData['message']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:66:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:67:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:69:        $record = $this->getRecord(Logger::WARNING, 'A test warning message');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:70:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:72:        $this->assertEquals($ravenClient::WARNING, $ravenClient->lastData['level']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:73:        $this->assertContains($record['message'], $ravenClient->lastData['message']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:78:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:79:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:82:        $record = $this->getRecord(Logger::INFO, 'test', array('tags' => $tags));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:83:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:85:        $this->assertEquals($tags, $ravenClient->lastData['tags']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:90:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:91:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:96:        $record = $this->getRecord(Logger::INFO, 'test', array('checksum' => $checksum, 'release' => $release, 'event_id' => $eventId));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:97:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:99:        $this->assertEquals($checksum, $ravenClient->lastData['checksum']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:100:        $this->assertEquals($release, $ravenClient->lastData['release']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:101:        $this->assertEquals($eventId, $ravenClient->lastData['event_id']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:106:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:107:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:110:        $record = $this->getRecord(Logger::INFO, 'test', array('fingerprint' => $fingerprint));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:111:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:113:        $this->assertEquals($fingerprint, $ravenClient->lastData['fingerprint']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:118:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:119:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:121:        $recordWithNoContext = $this->getRecord(Logger::INFO, 'test with default user context');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:129:        $recordWithContext = $this->getRecord(Logger::INFO, 'test', array('user' => $user));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:131:        $ravenClient->user_context(array('id' => 'test_user_id'));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:133:        $handler->handle($recordWithContext);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:134:        $this->assertEquals($user, $ravenClient->lastData['user']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:137:        $handler->handle($recordWithNoContext);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:138:        $this->assertInternalType('array', $ravenClient->context->user);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:139:        $this->assertSame('test_user_id', $ravenClient->context->user['id']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:142:        $ravenClient->user_context(null);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:143:        $handler->handle($recordWithContext);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:144:        $this->assertEquals($user, $ravenClient->lastData['user']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:147:        $handler->handle($recordWithNoContext);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:148:        $this->assertNull($ravenClient->context->user);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:153:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:154:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:157:            $this->methodThatThrowsAnException();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:159:            $record = $this->getRecord(Logger::ERROR, $e->getMessage(), array('exception' => $e));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:160:            $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:163:        $this->assertEquals($record['message'], $ravenClient->lastData['message']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:168:        $records = $this->getMultipleRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:169:        $records[] = $this->getRecord(Logger::WARNING, 'warning');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:170:        $records[] = $this->getRecord(Logger::WARNING, 'warning');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:172:        $logFormatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:173:        $logFormatter->expects($this->once())->method('formatBatch');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:175:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:176:        $formatter->expects($this->once())->method('format')->with($this->callback(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:180:        $handler = $this->getHandler($this->getRavenClient());
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:181:        $handler->setBatchFormatter($logFormatter);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:182:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:183:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:189:            $this->getRecord(Logger::DEBUG, 'debug message 1'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:190:            $this->getRecord(Logger::DEBUG, 'debug message 2'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:191:            $this->getRecord(Logger::INFO, 'information'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:194:        $handler = $this->getMock('Monolog\Handler\RavenHandler', null, array($this->getRavenClient()));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:195:        $handler->expects($this->never())->method('handle');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:196:        $handler->setLevel(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:197:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:203:            $this->getRecord(Logger::DEBUG, 'debug message 1'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:204:            $this->getRecord(Logger::DEBUG, 'debug message 2'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:205:            $this->getRecord(Logger::INFO, 'information 1'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:206:            $this->getRecord(Logger::ERROR, 'error 1'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:207:            $this->getRecord(Logger::WARNING, 'warning'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:208:            $this->getRecord(Logger::ERROR, 'error 2'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:209:            $this->getRecord(Logger::INFO, 'information 2'),
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:212:        $logFormatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:213:        $logFormatter->expects($this->once())->method('formatBatch');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:215:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:216:        $formatter->expects($this->once())->method('format')->with($this->callback(function ($record) use ($records) {
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:220:        $handler = $this->getHandler($this->getRavenClient());
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:221:        $handler->setBatchFormatter($logFormatter);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:222:        $handler->setFormatter($formatter);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:223:        $handler->handleBatch($records);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:228:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:229:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:231:        $handler->setBatchFormatter($formatter = new LineFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:232:        $this->assertSame($formatter, $handler->getBatchFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:237:        $ravenClient = $this->getRavenClient();
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:238:        $handler = $this->getHandler($ravenClient);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:240:        $handler->setRelease($release);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:241:        $record = $this->getRecord(Logger::INFO, 'test');
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:242:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:243:        $this->assertEquals($release, $ravenClient->lastData['release']);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:246:        $record = $this->getRecord(Logger::INFO, 'test', array('release' => $localRelease));
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:247:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php:248:        $this->assertEquals($localRelease, $ravenClient->lastData['release']);
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:30:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:31:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:32:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:33:        $this->assertFalse($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:34:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:35:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:36:        $this->assertTrue(count($test->getRecords()) === 2);
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:47:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:48:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:49:        $this->shutdownCheckHandler = $test;
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:55:        if (!$this->shutdownCheckHandler->hasWarningRecords() || !$this->shutdownCheckHandler->hasDebugRecords()) {
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:68:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:69:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:70:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:71:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:72:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:73:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:74:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:75:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:87:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:88:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:89:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:90:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:91:        $this->assertCount(0, $test->getRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:94:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:95:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:96:        $this->assertCount(3, $test->getRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:99:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:100:        $this->assertCount(3, $test->getRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:102:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:103:        $this->assertCount(5, $test->getRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:104:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:105:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:115:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:116:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:117:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:118:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:119:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:120:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:121:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:122:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:132:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:133:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:134:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:135:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:136:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:137:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:147:        $handler->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:152:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:153:        $handler->flush();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:154:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:155:        $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php:156:        $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:36:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:37:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:38:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:41:            'X-ChromeLogger-Data'   => base64_encode(utf8_encode(json_encode(array(
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:52:        $this->assertEquals($expected, $handler->getHeaders());
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:68:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:69:        $handler->handle($this->getRecord(Logger::WARNING, str_repeat('a', 150 * 1024)));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:72:        $handler->handle($this->getRecord(Logger::WARNING, str_repeat('a', 100 * 1024)));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:75:            'X-ChromeLogger-Data'   => base64_encode(utf8_encode(json_encode(array(
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:102:        $this->assertEquals($expected, $handler->getHeaders());
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:108:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:109:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:110:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:113:        $handler2->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:114:        $handler2->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:115:        $handler2->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:118:            'X-ChromeLogger-Data'   => base64_encode(utf8_encode(json_encode(array(
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:131:        $this->assertEquals($expected, $handler2->getHeaders());
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:149:        $this->headers[$header] = $content;
./vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php:154:        return $this->headers;
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:27:        $handler->setFormatter($this->getIdentityFormatter());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:28:        $handler->handle($this->getRecord(Logger::WARNING, 'test'));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:29:        $handler->handle($this->getRecord(Logger::WARNING, 'test2'));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:30:        $handler->handle($this->getRecord(Logger::WARNING, 'test3'));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:32:        $this->assertEquals('testtest2test3', fread($handle, 100));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:42:        $this->assertTrue(is_resource($handle));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:43:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:44:        $this->assertTrue(is_resource($handle));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:53:        $handler->handle($this->getRecord(Logger::WARNING, 'test'));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:55:        $streamProp->setAccessible(true);
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:56:        $handle = $streamProp->getValue($handler);
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:58:        $this->assertTrue(is_resource($handle));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:59:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:60:        $this->assertFalse(is_resource($handle));
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:69:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:80:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:91:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:121:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:132:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:142:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:152:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:164:            $this->markTestSkipped('Permissions checks can not run on windows');
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:167:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:179:            $this->markTestSkipped('Permissions checks can not run on windows');
./vendor/monolog/monolog/tests/Monolog/Handler/StreamHandlerTest.php:182:        $handler->handle($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:40:            $this->markTestSkipped('PHP Console library not found. See https://github.com/barbushin/php-console#installation');
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:42:        $this->connector = $this->initConnectorMock();
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:44:        $this->debugDispatcher = $this->initDebugDispatcherMock($this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:45:        $this->connector->setDebugDispatcher($this->debugDispatcher);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:47:        $this->errorDispatcher = $this->initErrorDispatcherMock($this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:48:        $this->connector->setErrorsDispatcher($this->errorDispatcher);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:53:        return $this->getMockBuilder('PhpConsole\Dispatcher\Debug')
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:54:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:55:            ->setMethods(array('dispatchDebug'))
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:56:            ->setConstructorArgs(array($connector, $connector->getDumper()))
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:57:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:62:        return $this->getMockBuilder('PhpConsole\Dispatcher\Errors')
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:63:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:64:            ->setMethods(array('dispatchError', 'dispatchException'))
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:65:            ->setConstructorArgs(array($connector, $connector->getDumper()))
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:66:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:71:        $connector = $this->getMockBuilder('PhpConsole\Connector')
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:72:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:73:            ->setMethods(array(
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:85:            ->getMock();
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:87:        $connector->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:88:            ->method('isActiveClient')
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:89:            ->will($this->returnValue(true));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:96:        $handler = new PHPConsoleHandler(array(), $this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:97:        $options = $handler->getOptions();
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:105:            new PHPConsoleHandler($handlerOptions, $this->connector, $level),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:112:        $this->assertEquals(spl_object_hash(Connector::getInstance()), spl_object_hash($handler->getConnector()));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:117:        $handler = new PHPConsoleHandler(array(), $this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:118:        $this->assertEquals(spl_object_hash($this->connector), spl_object_hash($handler->getConnector()));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:123:        $this->debugDispatcher->expects($this->once())->method('dispatchDebug')->with($this->equalTo('test'));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:124:        $this->initLogger()->addDebug('test');
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:133:        $this->debugDispatcher->expects($this->once())->method('dispatchDebug')->with(
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:134:            $this->equalTo($expectedMessage),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:135:            $this->equalTo($tag)
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:137:        $this->initLogger()->addDebug($message, $context);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:143:        $logger = $this->initLogger($tagsContextKeys ? array('debugTagsKeysInContext' => $tagsContextKeys) : array());
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:145:            $tagsContextKeys = $this->getHandlerDefaultOption('debugTagsKeysInContext');
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:148:            $debugDispatcher = $this->initDebugDispatcherMock($this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:149:            $debugDispatcher->expects($this->once())->method('dispatchDebug')->with(
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:150:                $this->anything(),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:151:                $this->equalTo($expectedTags)
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:153:            $this->connector->setDebugDispatcher($debugDispatcher);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:154:            $logger->addDebug('test', array($key => $expectedTags));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:164:        $this->errorDispatcher->expects($this->once())->method('dispatchError')->with(
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:165:            $this->equalTo($code),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:166:            $this->equalTo($message),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:167:            $this->equalTo($file),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:168:            $this->equalTo($line),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:169:            $classesPartialsTraceIgnore ?: $this->equalTo($this->getHandlerDefaultOption('classesPartialsTraceIgnore'))
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:171:        $errorHandler = ErrorHandler::register($this->initLogger($classesPartialsTraceIgnore ? array('classesPartialsTraceIgnore' => $classesPartialsTraceIgnore) : array()), false);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:172:        $errorHandler->registerErrorHandler(array(), false, E_USER_WARNING);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:173:        $errorHandler->handleError($code, $message, $file, $line);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:179:        $this->errorDispatcher->expects($this->once())->method('dispatchException')->with(
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:180:            $this->equalTo($e)
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:182:        $handler = $this->initLogger();
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:183:        $handler->log(
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:185:            sprintf('Uncaught Exception %s: "%s" at %s line %s', get_class($e), $e->getMessage(), $e->getFile(), $e->getLine()),
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:200:        $this->debugDispatcher->expects($this->never())->method('dispatchDebug');
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:201:        $this->initLogger(array('enabled' => false))->addDebug('test');
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:206:        $this->testError(array('Class', 'Namespace\\'));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:211:        $this->testDebugTags(array('key1', 'key2'));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:216:        $this->initLogger(array('useOwnErrorsHandler' => true, 'useOwnExceptionsHandler' => true));
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:217:        $this->assertEquals(array(Handler::getInstance(), 'handleError'), set_error_handler(function () {
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:219:        $this->assertEquals(array(Handler::getInstance(), 'handleException'), set_exception_handler(function () {
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:241:        $expectCall = $this->connector->expects($this->once())->method($method);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:243:            $expectCall->with($value);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:245:        new PHPConsoleHandler(array($option => $value), $this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:250:        new PHPConsoleHandler(array('detectDumpTraceAndSource' => true), $this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:251:        $this->assertTrue($this->connector->getDebugDispatcher()->detectTraceAndSource);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:270:        new PHPConsoleHandler(array($option => $value), $this->connector);
./vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php:271:        $this->assertEquals($value, $this->connector->getDumper()->$dumperProperty);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:24:            $this->markTestSkipped("graylog2/gelf-php not installed");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:33:        $handler = new GelfHandler($this->getMessagePublisher());
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:34:        $this->assertInstanceOf('Monolog\Handler\GelfHandler', $handler);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:46:        return $this->getMock('Gelf\Publisher', array('publish'), array(), '', false);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:51:        $record = $this->getRecord(Logger::DEBUG, "A test debug message");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:54:            ->setLevel(7)
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:55:            ->setFacility("test")
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:56:            ->setShortMessage($record['message'])
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:57:            ->setTimestamp($record['datetime'])
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:60:        $messagePublisher = $this->getMessagePublisher();
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:61:        $messagePublisher->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:62:            ->method('publish')
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:63:            ->with($expectedMessage);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:65:        $handler = $this->getHandler($messagePublisher);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:67:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:72:        $record = $this->getRecord(Logger::WARNING, "A test warning message");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:75:            ->setLevel(4)
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:76:            ->setFacility("test")
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:77:            ->setShortMessage($record['message'])
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:78:            ->setTimestamp($record['datetime'])
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:81:        $messagePublisher = $this->getMessagePublisher();
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:82:        $messagePublisher->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:83:            ->method('publish')
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:84:            ->with($expectedMessage);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:86:        $handler = $this->getHandler($messagePublisher);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:88:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:93:        $record = $this->getRecord(Logger::WARNING, "A test warning message");
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:99:            ->setLevel(4)
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:100:            ->setFacility("test")
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:101:            ->setHost("mysystem")
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:102:            ->setShortMessage($record['message'])
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:103:            ->setTimestamp($record['datetime'])
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:104:            ->setAdditional("EXTblarg", 'yep')
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:105:            ->setAdditional("CTXfrom", 'logger')
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:108:        $messagePublisher = $this->getMessagePublisher();
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:109:        $messagePublisher->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:110:            ->method('publish')
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:111:            ->with($expectedMessage);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:113:        $handler = $this->getHandler($messagePublisher);
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:114:        $handler->setFormatter(new GelfMessageFormatter('mysystem', 'EXT', 'CTX'));
./vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php:115:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:36:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:37:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:39:            $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:40:            $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:41:            $this->assertTrue(count($test->getRecords()) === 2);
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:52:        $handler->handleBatch(array($this->getRecord(Logger::DEBUG), $this->getRecord(Logger::INFO)));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:54:            $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:55:            $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:56:            $this->assertTrue(count($test->getRecords()) === 2);
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:67:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::ERROR)));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:68:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::WARNING)));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:69:        $this->assertFalse($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:79:        $handler->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:84:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:85:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:86:        $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:87:        $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:97:        $handler->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:102:        $handler->handleBatch(array($this->getRecord(Logger::DEBUG), $this->getRecord(Logger::INFO)));
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:104:            $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:105:            $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:106:            $this->assertTrue(count($test->getRecords()) === 2);
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:107:            $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:108:            $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php:109:            $this->assertTrue($records[1]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:26:        $this->jsonPrettyPrintFlag = defined('JSON_PRETTY_PRINT') ? JSON_PRETTY_PRINT : 128;
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:52:        $this->assertSame(
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:54:            $slackRecord->getAttachmentColor($logLevel)
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:62:        $data = $record->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:64:        $this->assertArrayHasKey('channel', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:65:        $this->assertSame($channel, $data['channel']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:71:        $data = $record->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:73:        $this->assertArrayNotHasKey('username', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:109:        $this->assertSame($expectedResult, $slackRecord->stringify($fields));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:116:        $data = $record->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:118:        $this->assertArrayHasKey('username', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:119:        $this->assertSame($username, $data['username']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:125:        $data = $record->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:127:        $this->assertArrayNotHasKey('icon_emoji', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:132:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:134:        $data = $slackRecord->getSlackData($record);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:137:        $data2 = $slackRecord2->getSlackData($record);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:139:        $this->assertArrayHasKey('icon_emoji', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:140:        $this->assertSame(':ghost:', $data['icon_emoji']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:141:        $this->assertArrayHasKey('icon_url', $data2);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:142:        $this->assertSame('http://github.com/Seldaek/monolog', $data2['icon_url']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:148:        $data = $record->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:150:        $this->assertArrayNotHasKey('attachments', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:156:        $data = $record->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:158:        $this->assertArrayHasKey('attachments', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:159:        $this->assertArrayHasKey(0, $data['attachments']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:160:        $this->assertInternalType('array', $data['attachments'][0]);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:167:        $data = $record->getSlackData($this->getRecord(Logger::WARNING, $message));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:169:        $this->assertArrayHasKey('text', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:170:        $this->assertSame($message, $data['text']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:175:        $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:177:            ->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:178:            ->method('format')
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:179:            ->will($this->returnCallback(function ($record) { return $record['message'] . 'test'; }));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:181:        $formatter2 = $this->getMock('Monolog\\Formatter\\FormatterInterface');
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:183:            ->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:184:            ->method('format')
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:185:            ->will($this->returnCallback(function ($record) { return $record['message'] . 'test1'; }));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:189:        $data = $record->getSlackData($this->getRecord(Logger::WARNING, $message));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:191:        $this->assertArrayHasKey('text', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:192:        $this->assertSame($message . 'test', $data['text']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:194:        $record->setFormatter($formatter2);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:195:        $data = $record->getSlackData($this->getRecord(Logger::WARNING, $message));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:197:        $this->assertArrayHasKey('text', $data);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:198:        $this->assertSame($message . 'test1', $data['text']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:205:        $data = $record->getSlackData($this->getRecord(Logger::WARNING, $message));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:207:        $this->assertSame($message, $data['attachments'][0]['text']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:208:        $this->assertSame($message, $data['attachments'][0]['fallback']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:214:        $errorLoggerRecord = $this->getRecord(Logger::ERROR);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:215:        $emergencyLoggerRecord = $this->getRecord(Logger::EMERGENCY);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:216:        $warningLoggerRecord = $this->getRecord(Logger::WARNING);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:217:        $infoLoggerRecord = $this->getRecord(Logger::INFO);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:218:        $debugLoggerRecord = $this->getRecord(Logger::DEBUG);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:220:        $data = $record->getSlackData($errorLoggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:221:        $this->assertSame(SlackRecord::COLOR_DANGER, $data['attachments'][0]['color']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:223:        $data = $record->getSlackData($emergencyLoggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:224:        $this->assertSame(SlackRecord::COLOR_DANGER, $data['attachments'][0]['color']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:226:        $data = $record->getSlackData($warningLoggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:227:        $this->assertSame(SlackRecord::COLOR_WARNING, $data['attachments'][0]['color']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:229:        $data = $record->getSlackData($infoLoggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:230:        $this->assertSame(SlackRecord::COLOR_GOOD, $data['attachments'][0]['color']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:232:        $data = $record->getSlackData($debugLoggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:233:        $this->assertSame(SlackRecord::COLOR_DEFAULT, $data['attachments'][0]['color']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:241:        $data = $record->getSlackData($this->getRecord($level, 'test', array('test' => 1)));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:244:        $this->assertArrayHasKey('title', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:245:        $this->assertArrayHasKey('fields', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:246:        $this->assertSame($levelName, $attachment['title']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:247:        $this->assertSame(array(), $attachment['fields']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:257:        $loggerRecord = $this->getRecord($level, 'test', $context);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:259:        $data = $record->getSlackData($loggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:262:        $this->assertArrayHasKey('title', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:263:        $this->assertArrayHasKey('fields', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:264:        $this->assertCount(2, $attachment['fields']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:265:        $this->assertSame($levelName, $attachment['title']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:266:        $this->assertSame(
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:270:                    'value' => sprintf('```%s```', json_encode($extra, $this->jsonPrettyPrintFlag)),
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:275:                    'value' => sprintf('```%s```', json_encode($context, $this->jsonPrettyPrintFlag)),
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:288:        $data = $record->getSlackData($this->getRecord($level, 'test', array('test' => 1)));
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:291:        $this->assertArrayHasKey('title', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:292:        $this->assertArrayHasKey('fields', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:293:        $this->assertCount(1, $attachment['fields']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:294:        $this->assertSame('Message', $attachment['title']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:295:        $this->assertSame(
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:312:        $loggerRecord = $this->getRecord($level, 'test', $context);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:314:        $data = $record->getSlackData($loggerRecord);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:335:        $this->assertArrayHasKey('title', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:336:        $this->assertArrayHasKey('fields', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:337:        $this->assertCount(3, $attachment['fields']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:338:        $this->assertSame('Message', $attachment['title']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:339:        $this->assertSame(
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:347:        $record = $this->getRecord();
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:349:        $data = $slackRecord->getSlackData($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:352:        $this->assertArrayHasKey('ts', $attachment);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:353:        $this->assertSame($record['datetime']->getTimestamp(), $attachment['ts']);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:358:        $record = $this->getRecord(
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:366:        $data = $slackRecord->getSlackData($record);
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:372:                'value' => sprintf('```%s```', json_encode(array('author' => 'Jordi'), $this->jsonPrettyPrintFlag)),
./vendor/monolog/monolog/tests/Monolog/Handler/Slack/SlackRecordTest.php:383:            $this->assertNotFalse(array_search($field, $attachment['fields']));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:31:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:32:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:33:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:34:        $this->assertFalse($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:35:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:36:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:37:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:38:        $this->assertTrue(count($test->getRecords()) === 3);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:49:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:50:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:51:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:52:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:53:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:65:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:66:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:67:        $handler->reset();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:68:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:69:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:70:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:71:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:72:        $this->assertFalse($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:83:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:84:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:85:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:86:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:87:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:88:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:89:        $this->assertFalse($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:100:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:101:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:102:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:103:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:104:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:105:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:106:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:119:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:120:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:121:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:122:        $this->assertFalse($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:123:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:124:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:125:        $this->assertTrue(count($test->getRecords()) === 3);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:138:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:148:        $this->assertTrue($handler->isHandling($this->getRecord(Logger::DEBUG)));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:160:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:161:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:162:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:163:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:164:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:176:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:177:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:178:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:179:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:180:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:191:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:192:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:193:        $handler->activate();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:194:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:195:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:196:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:207:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:208:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:209:        $record = $this->getRecord(Logger::DEBUG);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:211:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:212:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:213:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:224:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:225:        $this->assertFalse($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:226:        $record = $this->getRecord(Logger::DEBUG);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:228:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:229:        $this->assertTrue($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:230:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:241:        $handler->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:246:        $handler->handle($this->getRecord(Logger::WARNING));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:247:        $this->assertTrue($test->hasWarningRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:248:        $records = $test->getRecords();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:249:        $this->assertTrue($records[0]['extra']['foo']);
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:259:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:260:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:261:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:262:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:263:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:273:        $handler->handle($this->getRecord(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:274:        $handler->handle($this->getRecord(Logger::INFO));
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:275:        $handler->close();
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:276:        $this->assertFalse($test->hasDebugRecords());
./vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php:277:        $this->assertTrue($test->hasInfoRecords());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:25:        $this->assertEquals('foo', $logger->getName());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:33:        $this->assertEquals('ERROR', Logger::getLevelName(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:42:        $second = $first->withName('second');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:44:        $this->assertSame('first', $first->getName());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:45:        $this->assertSame('second', $second->getName());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:46:        $this->assertSame($handler, $second->popHandler());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:54:        $this->assertEquals(Logger::toMonologLevel('debug'), 100);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:55:        $this->assertEquals(Logger::toMonologLevel('info'), 200);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:56:        $this->assertEquals(Logger::toMonologLevel('notice'), 250);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:57:        $this->assertEquals(Logger::toMonologLevel('warning'), 300);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:58:        $this->assertEquals(Logger::toMonologLevel('error'), 400);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:59:        $this->assertEquals(Logger::toMonologLevel('critical'), 500);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:60:        $this->assertEquals(Logger::toMonologLevel('alert'), 550);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:61:        $this->assertEquals(Logger::toMonologLevel('emergency'), 600);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:80:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:81:        $logger->addWarning('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:82:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:83:        $this->assertEquals('foo', $record['channel']);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:93:        $handler = $this->getMock('Monolog\Handler\NullHandler', array('handle'));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:94:        $handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:95:            ->method('handle');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:96:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:98:        $this->assertTrue($logger->addWarning('test'));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:108:        $handler = $this->getMock('Monolog\Handler\NullHandler', array('handle'), array(Logger::ERROR));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:109:        $handler->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:110:            ->method('handle');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:111:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:113:        $this->assertFalse($logger->addWarning('test'));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:122:        $this->assertEquals($handler1, $logger->popHandler());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:123:        $this->assertEquals($handler2, $logger->popHandler());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:132:        $this->assertEquals($processor1, $logger->popProcessor());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:133:        $this->assertEquals($processor2, $logger->popProcessor());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:147:        $logger->pushHandler($handler1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:148:        $logger->pushHandler($handler2);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:150:        $this->assertEquals($handler2, $logger->popHandler());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:151:        $this->assertEquals($handler1, $logger->popHandler());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:152:        $logger->popHandler();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:164:        $logger->pushHandler($handler1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:165:        $logger->setHandlers(array($handler2));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:168:        $this->assertEquals(array($handler2), $logger->getHandlers());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:170:        $logger->setHandlers(array(
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:176:        $this->assertEquals(array($handler1, $handler2), $logger->getHandlers());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:190:        $logger->pushProcessor($processor1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:191:        $logger->pushProcessor($processor2);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:193:        $this->assertEquals($processor2, $logger->popProcessor());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:194:        $this->assertEquals($processor1, $logger->popProcessor());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:195:        $logger->popProcessor();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:206:        $logger->pushProcessor(new \stdClass());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:216:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:217:        $logger->pushProcessor(function ($record) {
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:222:        $logger->addError('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:223:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:224:        $this->assertTrue($record['extra']['win']);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:233:        $handler = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:234:        $handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:235:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:236:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:238:        $handler->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:239:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:240:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:242:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:244:        $processor = $this->getMockBuilder('Monolog\Processor\WebProcessor')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:245:            ->disableOriginalConstructor()
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:246:            ->setMethods(array('__invoke'))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:247:            ->getMock()
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:249:        $processor->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:250:            ->method('__invoke')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:251:            ->will($this->returnArgument(0))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:253:        $logger->pushProcessor($processor);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:255:        $logger->addError('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:264:        $handler = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:265:        $handler->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:266:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:267:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:269:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:271:        $logger->pushProcessor(function ($record) use ($that) {
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:272:            $that->fail('The processor should not be called');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:274:        $logger->addAlert('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:284:        $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:285:        $handler1->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:286:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:287:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:289:        $handler1->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:290:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:291:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:293:        $logger->pushHandler($handler1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:295:        $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:296:        $handler2->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:297:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:298:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:300:        $handler2->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:301:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:302:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:304:        $logger->pushHandler($handler2);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:306:        $handler3 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:307:        $handler3->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:308:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:309:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:311:        $handler3->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:312:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:314:        $logger->pushHandler($handler3);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:316:        $logger->debug('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:324:        $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:325:        $handler1->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:326:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:327:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:329:        $handler1->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:330:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:331:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:334:        $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:335:        $handler2->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:336:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:337:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:339:        $handler2->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:340:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:341:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:344:        $handler3 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:345:        $handler3->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:346:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:347:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:349:        $handler3->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:350:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:355:        $logger->debug('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:365:        $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:366:        $handler1->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:367:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:368:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:370:        $handler1->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:371:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:372:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:374:        $logger->pushHandler($handler1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:376:        $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:377:        $handler2->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:378:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:379:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:381:        $handler2->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:382:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:383:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:385:        $logger->pushHandler($handler2);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:387:        $logger->debug('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:397:        $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:398:        $handler1->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:399:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:400:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:402:        $handler1->expects($this->never())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:403:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:405:        $logger->pushHandler($handler1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:407:        $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:408:        $handler2->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:409:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:410:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:412:        $handler2->expects($this->once())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:413:            ->method('handle')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:414:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:416:        $logger->pushHandler($handler2);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:418:        $logger->debug('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:428:        $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:429:        $handler1->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:430:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:431:            ->will($this->returnValue(false))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:434:        $logger->pushHandler($handler1);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:435:        $this->assertFalse($logger->isHandling(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:437:        $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:438:        $handler2->expects($this->any())
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:439:            ->method('isHandling')
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:440:            ->will($this->returnValue(true))
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:443:        $logger->pushHandler($handler2);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:444:        $this->assertTrue($logger->isHandling(Logger::DEBUG));
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:470:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:471:        $logger->{$method}('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:472:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:473:        $this->assertEquals($expectedLevel, $record['level']);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:510:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:511:        $logger->info('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:512:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:513:        $this->assertEquals($tz, $record['datetime']->getTimezone());
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:532:        $logger->useMicrosecondTimestamps($micro);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:534:        $logger->pushHandler($handler);
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:535:        $logger->info('test');
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:536:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/LoggerTest.php:537:        $this->{$assert}('000000', $record['datetime']->format('u'));
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:30:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:31:        $this->assertEquals($server['REQUEST_URI'], $record['extra']['url']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:32:        $this->assertEquals($server['REMOTE_ADDR'], $record['extra']['ip']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:33:        $this->assertEquals($server['REQUEST_METHOD'], $record['extra']['http_method']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:34:        $this->assertEquals($server['HTTP_REFERER'], $record['extra']['referrer']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:35:        $this->assertEquals($server['SERVER_NAME'], $record['extra']['server']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:36:        $this->assertEquals($server['UNIQUE_ID'], $record['extra']['unique_id']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:46:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:47:        $this->assertEmpty($record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:59:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:60:        $this->assertNull($record['extra']['referrer']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:72:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:73:        $this->assertFalse(isset($record['extra']['unique_id']));
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:86:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:88:        $this->assertSame(array('url' => 'A', 'http_method' => 'C'), $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:101:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/WebProcessorTest.php:103:        $this->assertSame(array('url' => 'B'), $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php:24:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php:25:        $this->assertArrayHasKey('process_id', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php:26:        $this->assertInternalType('int', $record['extra']['process_id']);
./vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php:27:        $this->assertGreaterThan(0, $record['extra']['process_id']);
./vendor/monolog/monolog/tests/Monolog/Processor/ProcessIdProcessorTest.php:28:        $this->assertEquals(getmypid(), $record['extra']['process_id']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:18:        $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:24:    $handler->handle($record);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:39:        $handler->pushProcessor($processor);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:46:        $handler = $this->getHandler();
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:48:        $tester->test($handler, $this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:49:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:50:        $this->assertEquals(__FILE__, $record['extra']['file']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:51:        $this->assertEquals(18, $record['extra']['line']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:52:        $this->assertEquals('Acme\Tester', $record['extra']['class']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:53:        $this->assertEquals('test', $record['extra']['function']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:58:        $handler = $this->getHandler();
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:59:        \Acme\tester($handler, $this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:60:        list($record) = $handler->getRecords();
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:61:        $this->assertEquals(__FILE__, $record['extra']['file']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:62:        $this->assertEquals(24, $record['extra']['line']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:63:        $this->assertEquals(null, $record['extra']['class']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:64:        $this->assertEquals('Acme\tester', $record['extra']['function']);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:79:        $this->assertEquals($expected, $actual);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:100:        $this->assertEquals($expected, $actual);
./vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php:121:        $this->assertEquals($expected, $actual);
./vendor/monolog/monolog/tests/Monolog/Processor/PsrLogMessageProcessorTest.php:27:        $this->assertEquals($expected, $message['message']);
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:25:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:27:        $this->assertEquals($tags, $record['extra']['tags']);
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:38:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:39:        $this->assertEquals($tags, $record['extra']['tags']);
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:41:        $processor->setTags(array('a', 'b'));
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:42:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:43:        $this->assertEquals(array('a', 'b'), $record['extra']['tags']);
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:45:        $processor->addTags(array('a', 'c', 'foo' => 'bar'));
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:46:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/TagProcessorTest.php:47:        $this->assertEquals(array('a', 'b', 'a', 'c', 'foo' => 'bar'), $record['extra']['tags']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:25:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:26:        $this->assertArrayHasKey('memory_usage', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:27:        $this->assertRegExp('#[0-9.]+ (M|K)?B$#', $record['extra']['memory_usage']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:37:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:38:        $this->assertArrayHasKey('memory_usage', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:39:        $this->assertInternalType('int', $record['extra']['memory_usage']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryUsageProcessorTest.php:40:        $this->assertGreaterThan(0, $record['extra']['memory_usage']);
./vendor/monolog/monolog/tests/Monolog/Processor/GitProcessorTest.php:24:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/GitProcessorTest.php:26:        $this->assertArrayHasKey('git', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/GitProcessorTest.php:27:        $this->assertTrue(!is_array($record['extra']['git']['branch']));
./vendor/monolog/monolog/tests/Monolog/Processor/UidProcessorTest.php:24:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/UidProcessorTest.php:25:        $this->assertArrayHasKey('uid', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/UidProcessorTest.php:31:        $this->assertEquals(10, strlen($processor->getUid()));
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:25:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:26:        $this->assertArrayHasKey('memory_peak_usage', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:27:        $this->assertRegExp('#[0-9.]+ (M|K)?B$#', $record['extra']['memory_peak_usage']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:37:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:38:        $this->assertArrayHasKey('memory_peak_usage', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:39:        $this->assertInternalType('int', $record['extra']['memory_peak_usage']);
./vendor/monolog/monolog/tests/Monolog/Processor/MemoryPeakUsageProcessorTest.php:40:        $this->assertGreaterThan(0, $record['extra']['memory_peak_usage']);
./vendor/monolog/monolog/tests/Monolog/Processor/MercurialProcessorTest.php:29:            $this->markTestSkipped('hg is missing');
./vendor/monolog/monolog/tests/Monolog/Processor/MercurialProcessorTest.php:35:        $record = $processor($this->getRecord());
./vendor/monolog/monolog/tests/Monolog/Processor/MercurialProcessorTest.php:37:        $this->assertArrayHasKey('hg', $record['extra']);
./vendor/monolog/monolog/tests/Monolog/Processor/MercurialProcessorTest.php:38:        $this->assertTrue(!is_array($record['extra']['hg']['branch']));
./vendor/monolog/monolog/tests/Monolog/Processor/MercurialProcessorTest.php:39:        $this->assertTrue(!is_array($record['extra']['hg']['revision']));
./vendor/fightbulc/moment/src/MomentFromVo.php:57:        $this->moment = $moment;
./vendor/fightbulc/moment/src/MomentFromVo.php:65:        return $this->moment;
./vendor/fightbulc/moment/src/MomentFromVo.php:77:        if ($this->getDirection() === 'future')
./vendor/fightbulc/moment/src/MomentFromVo.php:79:            $value = '-' . $value;
./vendor/fightbulc/moment/src/MomentFromVo.php:92:        $this->direction = $direction;
./vendor/fightbulc/moment/src/MomentFromVo.php:102:        return $this->direction === '-' ? 'future' : 'past';
./vendor/fightbulc/moment/src/MomentFromVo.php:112:        $this->days = $days;
./vendor/fightbulc/moment/src/MomentFromVo.php:122:        return $this->getRoundedValue($this->days);
./vendor/fightbulc/moment/src/MomentFromVo.php:132:        $this->hours = $hours;
./vendor/fightbulc/moment/src/MomentFromVo.php:142:        return $this->getRoundedValue($this->hours);
./vendor/fightbulc/moment/src/MomentFromVo.php:152:        $this->minutes = $minutes;
./vendor/fightbulc/moment/src/MomentFromVo.php:162:        return $this->getRoundedValue($this->minutes);
./vendor/fightbulc/moment/src/MomentFromVo.php:172:        $this->seconds = $seconds;
./vendor/fightbulc/moment/src/MomentFromVo.php:182:        return (int)$this->getRoundedValue($this->seconds);
./vendor/fightbulc/moment/src/MomentFromVo.php:192:        $this->weeks = $weeks;
./vendor/fightbulc/moment/src/MomentFromVo.php:202:        return $this->getRoundedValue($this->weeks);
./vendor/fightbulc/moment/src/MomentFromVo.php:210:        return $this->getRoundedValue($this->weeks / 4);
./vendor/fightbulc/moment/src/MomentFromVo.php:218:        return $this->getRoundedValue($this->days / 365);
./vendor/fightbulc/moment/src/MomentFromVo.php:228:        if ($this->valueInRange($this->getSeconds(), 0, 45))
./vendor/fightbulc/moment/src/MomentFromVo.php:233:        elseif ($this->valueInRange($this->getSeconds(), 45, 90))
./vendor/fightbulc/moment/src/MomentFromVo.php:238:        elseif ($this->valueInRange($this->getSeconds(), 90, 45 * 60))
./vendor/fightbulc/moment/src/MomentFromVo.php:241:            $formatArgs[] = $this->roundAbs($this->getMinutes());
./vendor/fightbulc/moment/src/MomentFromVo.php:243:        elseif ($this->valueInRange($this->getMinutes(), 45, 90))
./vendor/fightbulc/moment/src/MomentFromVo.php:248:        elseif ($this->valueInRange($this->getMinutes(), 90, 22 * 60))
./vendor/fightbulc/moment/src/MomentFromVo.php:251:            $formatArgs[] = $this->roundAbs($this->getHours());
./vendor/fightbulc/moment/src/MomentFromVo.php:253:        elseif ($this->valueInRange($this->getHours(), 22, 36))
./vendor/fightbulc/moment/src/MomentFromVo.php:258:        elseif ($this->valueInRange($this->getHours(), 36, 25 * 24))
./vendor/fightbulc/moment/src/MomentFromVo.php:261:            $formatArgs[] = $this->roundAbs($this->getDays());
./vendor/fightbulc/moment/src/MomentFromVo.php:263:        elseif ($this->valueInRange($this->getDays(), 25, 45))
./vendor/fightbulc/moment/src/MomentFromVo.php:268:        elseif ($this->valueInRange($this->getDays(), 25, 345))
./vendor/fightbulc/moment/src/MomentFromVo.php:271:            $formatArgs[] = $this->roundAbs($this->getMonths());
./vendor/fightbulc/moment/src/MomentFromVo.php:273:        elseif ($this->valueInRange($this->getDays(), 345, 547))
./vendor/fightbulc/moment/src/MomentFromVo.php:281:            $formatArgs[] = $this->roundAbs($this->getYears());
./vendor/fightbulc/moment/src/MomentFromVo.php:285:        $formatArgs[] = $this->getDirection();
./vendor/fightbulc/moment/src/MomentFromVo.php:286:        $formatArgs[] = $this->getMoment();
./vendor/fightbulc/moment/src/MomentFromVo.php:292:        return MomentLocale::renderLocaleString(array('relativeTime', $this->getDirection()), array($time));
./vendor/fightbulc/moment/src/MomentLocale.php:165:                    $localeString = self::renderLocaleString(array($tag, --$localeIndex));
./vendor/fightbulc/moment/src/MomentHelper.php:41:                throw new MomentException('Invalid quarter. The range of quarters is 1 - 4. You asked for: ' . $quarter);
./vendor/fightbulc/moment/src/MomentHelper.php:47:            ->setTimezone($timeZoneString)
./vendor/fightbulc/moment/src/MomentHelper.php:48:            ->setYear($year)
./vendor/fightbulc/moment/src/MomentHelper.php:49:            ->setMonth($startMonth)
./vendor/fightbulc/moment/src/MomentHelper.php:50:            ->setDay(1)
./vendor/fightbulc/moment/src/MomentHelper.php:51:            ->setTime(0, 0, 0);
./vendor/fightbulc/moment/src/MomentHelper.php:56:            ->setTimezone($timeZoneString)
./vendor/fightbulc/moment/src/MomentHelper.php:57:            ->setYear($year)
./vendor/fightbulc/moment/src/MomentHelper.php:58:            ->setMonth($endMonth)
./vendor/fightbulc/moment/src/MomentHelper.php:59:            ->setDay($end->format('t'))
./vendor/fightbulc/moment/src/MomentHelper.php:60:            ->setTime(23, 59, 59);
./vendor/fightbulc/moment/src/MomentHelper.php:66:            ->setInterval($quarter)
./vendor/fightbulc/moment/src/MomentHelper.php:67:            ->setStartDate($start)
./vendor/fightbulc/moment/src/MomentHelper.php:68:            ->setEndDate($end);
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:61:        "Z"       => "P", // -07:00 -06:00 ... +06:00 +07:00
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:62:        "ZZ"      => "O", // -0700 -0600 ... +0600 +0700
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:82:        return $this->momentJsToPhp($format);
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:90:        return (array)$this->tokens;
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:100:        $this->tokens = array_merge($this->tokens, $options);
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:112:        $tokens = $this->getTokens();
./vendor/fightbulc/moment/src/CustomFormats/MomentJs.php:130:        //  ----------------------------------
./vendor/fightbulc/moment/src/Locales/se_SV.php:3:// locale: Swedish (se-SV)
./vendor/fightbulc/moment/src/Locales/ja_JP.php:2:// locale: Japanese ( ja-jp )
./vendor/fightbulc/moment/src/Locales/ja_JP.php:3:// author: Takumi https://github.com/takumi-dev
./vendor/fightbulc/moment/src/Locales/ca_ES.php:4:// author: CROWD Studio https://github.com/crowd-studio
./vendor/fightbulc/moment/src/Locales/ca_ES.php:17:        "withTime" => function (Moment $moment) { return '[a' . ($moment->getHour() !== 1 ? ' les' : null) . '] H:i'; },
./vendor/fightbulc/moment/src/Locales/ro_RO.php:3:// locale: romanian (ro-ro)
./vendor/fightbulc/moment/src/Locales/vi_VN.php:3:// locale: vietnamese - Viet Nam (vi_VN)
./vendor/fightbulc/moment/src/Locales/da_DK.php:3:// locale: danish (da-dk)
./vendor/fightbulc/moment/src/Locales/en_GB.php:3:// locale: great britain english (en-gb)
./vendor/fightbulc/moment/src/Locales/nl_NL.php:37:        return $number; //Possible to add 'e': $m->format('WS'); // 11e. But that also breaks "11e Januari 2015"
./vendor/fightbulc/moment/src/Locales/oc_LNC.php:4:// author: CROWD Studio https://github.com/crowd-studio
./vendor/fightbulc/moment/src/Locales/id_ID.php:3:// locale: Indonesian (Indonesia) (id-id)
./vendor/fightbulc/moment/src/Locales/tr_TR.php:3: * Turkish (tr-TR) language support
./vendor/fightbulc/moment/src/Locales/pt_BR.php:3:// locale: portuguese (pt-br)
./vendor/fightbulc/moment/src/Locales/pt_BR.php:19:        "withTime" => function (Moment $moment) { return '[à' . ($moment->getHour() !== 1 ? 's' : null) . '] H:i'; },
./vendor/fightbulc/moment/src/Locales/es_ES.php:19:        "withTime" => function (Moment $moment) { return '[a la' . ($moment->getHour() !== 1 ? 's' : null) . '] H:i'; },
./vendor/fightbulc/moment/src/Locales/uk_UA.php:59:            return $number->format('G') == 11 ? '[об] H:i' : '[о] H:i';
./vendor/fightbulc/moment/src/Locales/uk_UA.php:61:        'default'  => 'd-m-Y',
./vendor/fightbulc/moment/src/Locales/uk_UA.php:67:            return $number->format('G') == 11 ? 'об %s' : 'о %s';
./vendor/fightbulc/moment/src/Locales/uk_UA.php:101:        $ends = array('-ше', '-ге', '-тє', '-те', '-те', '-те', '-ме', '-ме', '-те', '-те');
./vendor/fightbulc/moment/src/Locales/hu_HU.php:13:        "sameDay"  => '[ma] l[-kor]',
./vendor/fightbulc/moment/src/Locales/hu_HU.php:14:        "nextDay"  => '[holnap] l[-kor]',
./vendor/fightbulc/moment/src/Locales/hu_HU.php:15:        "lastDay"  => '[tegnap] l[-kor]',
./vendor/fightbulc/moment/src/Locales/hu_HU.php:18:			return '[múlt] [' . weekEndings[$Moment->getDay()] . '] l[-kor]';
./vendor/fightbulc/moment/src/Locales/hu_HU.php:21:        "withTime" => 'H:i[-kor]',
./vendor/fightbulc/moment/src/Locales/pl_PL.php:13:        (in_array(mb_substr((string)$count, -1), $specialDigits) && $count > 20)
./vendor/fightbulc/moment/src/Locales/pl_PL.php:34:            if (in_array($moment->getWeekday(), $femaleWeekdays))
./vendor/fightbulc/moment/src/Locales/zh_CN.php:3:// locale: chinese (zh-cn)
./vendor/fightbulc/moment/src/Locales/zh_CN.php:22:        "default"  => 'Y-m-d',
./vendor/fightbulc/moment/src/Locales/zh_CN.php:64:        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
./vendor/fightbulc/moment/src/Locales/zh_TW.php:3:// locale: traditional chinese (zh-tw)
./vendor/fightbulc/moment/src/Locales/zh_TW.php:4:// author: Ben https://github.com/ben-lin
./vendor/fightbulc/moment/src/Locales/zh_TW.php:21:        "default"  => 'Y-m-d',
./vendor/fightbulc/moment/src/MomentPeriodVo.php:29:        return $this->interval;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:39:        $this->interval = $interval;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:51:        $this->refDate = $reference;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:61:        return $this->refDate;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:71:        $this->endDate = $end;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:81:        return $this->endDate;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:91:        $this->startDate = $start;
./vendor/fightbulc/moment/src/MomentPeriodVo.php:101:        return $this->startDate;
./vendor/fightbulc/moment/src/Moment.php:14:    const NO_TZ_MYSQL = 'Y-m-d H:i:s';
./vendor/fightbulc/moment/src/Moment.php:15:    const NO_TZ_NO_SECS = 'Y-m-d H:i';
./vendor/fightbulc/moment/src/Moment.php:16:    const NO_TIME = 'Y-m-d';
./vendor/fightbulc/moment/src/Moment.php:81:        $this->resetDateTime($dateTime, $timezone);
./vendor/fightbulc/moment/src/Moment.php:84:        $this->setImmutableMode($immutableMode);
./vendor/fightbulc/moment/src/Moment.php:95:        $this->immutableMode = $mode;
./vendor/fightbulc/moment/src/Moment.php:120:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:122:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:126:        $this->setRawDateTimeString($dateTime);
./vendor/fightbulc/moment/src/Moment.php:129:        parent::__construct($dateTime, $this->getDateTimeZone($timezone));
./vendor/fightbulc/moment/src/Moment.php:134:            $this->setTimezone($timezone);
./vendor/fightbulc/moment/src/Moment.php:138:        if ($this->isValidDate() === false)
./vendor/fightbulc/moment/src/Moment.php:153:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:155:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:158:        $this->setTimezoneString($timezone);
./vendor/fightbulc/moment/src/Moment.php:160:        parent::setTimezone($this->getDateTimeZone($timezone));
./vendor/fightbulc/moment/src/Moment.php:187:                $formatsInterface->setTokens($localeContent['customFormats']);
./vendor/fightbulc/moment/src/Moment.php:190:            $format = $formatsInterface->format($format);
./vendor/fightbulc/moment/src/Moment.php:203:                    $number = $this->format($token);
./vendor/fightbulc/moment/src/Moment.php:204:                    $format = str_replace($part, $this->formatOrdinal($number, $token), $format);
./vendor/fightbulc/moment/src/Moment.php:239:        return $this->addTime('second', $seconds);
./vendor/fightbulc/moment/src/Moment.php:249:        return $this->addTime('minute', $minutes);
./vendor/fightbulc/moment/src/Moment.php:259:        return $this->addTime('hour', $hours);
./vendor/fightbulc/moment/src/Moment.php:269:        return $this->addTime('day', $days);
./vendor/fightbulc/moment/src/Moment.php:279:        return $this->addTime('week', $weeks);
./vendor/fightbulc/moment/src/Moment.php:289:        return $this->addTime('month', $months);
./vendor/fightbulc/moment/src/Moment.php:299:        return $this->addTime('year', $years);
./vendor/fightbulc/moment/src/Moment.php:309:        return $this->subtractTime('second', $seconds);
./vendor/fightbulc/moment/src/Moment.php:319:        return $this->subtractTime('minute', $minutes);
./vendor/fightbulc/moment/src/Moment.php:329:        return $this->subtractTime('hour', $hours);
./vendor/fightbulc/moment/src/Moment.php:339:        return $this->subtractTime('day', $days);
./vendor/fightbulc/moment/src/Moment.php:349:        return $this->subtractTime('week', $weeks);
./vendor/fightbulc/moment/src/Moment.php:359:        return $this->subtractTime('month', $months);
./vendor/fightbulc/moment/src/Moment.php:369:        return $this->subtractTime('year', $years);
./vendor/fightbulc/moment/src/Moment.php:380:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:382:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:385:        $this->setDate($this->format('Y'), $this->format('m'), $day);
./vendor/fightbulc/moment/src/Moment.php:398:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:400:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:403:        $this->setDate($this->format('Y'), $month, $this->format('d'));
./vendor/fightbulc/moment/src/Moment.php:416:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:418:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:421:        $this->setDate($year, $this->format('m'), $this->format('d'));
./vendor/fightbulc/moment/src/Moment.php:432:        return (string)$this->format('d');
./vendor/fightbulc/moment/src/Moment.php:441:        return (string)$this->format('N');
./vendor/fightbulc/moment/src/Moment.php:450:        return (string)$this->format('l');
./vendor/fightbulc/moment/src/Moment.php:459:        return (string)$this->format('D');
./vendor/fightbulc/moment/src/Moment.php:468:        return (string)$this->format('W');
./vendor/fightbulc/moment/src/Moment.php:477:        return (string)$this->format('m');
./vendor/fightbulc/moment/src/Moment.php:486:        return (string)$this->format('F');
./vendor/fightbulc/moment/src/Moment.php:495:        return (string)$this->format('M');
./vendor/fightbulc/moment/src/Moment.php:504:        $currentMonth = $this->format('n');
./vendor/fightbulc/moment/src/Moment.php:515:        return (string)$this->format('Y');
./vendor/fightbulc/moment/src/Moment.php:527:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:529:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:545:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:547:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:550:        $this->setTime($this->format('H'), $this->format('i'), $second);
./vendor/fightbulc/moment/src/Moment.php:563:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:565:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:568:        $this->setTime($this->format('H'), $minute, $this->format('s'));
./vendor/fightbulc/moment/src/Moment.php:581:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:583:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:586:        $this->setTime($hour, $this->format('i'), $this->format('s'));
./vendor/fightbulc/moment/src/Moment.php:597:        return (string)$this->format('s');
./vendor/fightbulc/moment/src/Moment.php:606:        return (string)$this->format('i');
./vendor/fightbulc/moment/src/Moment.php:615:        return (string)$this->format('H');
./vendor/fightbulc/moment/src/Moment.php:628:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:630:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:647:        if ($this->isMoment($fromMoment) === false)
./vendor/fightbulc/moment/src/Moment.php:650:            $useTimezoneString = $timezoneString !== null ? $timezoneString : $this->getTimezoneString();
./vendor/fightbulc/moment/src/Moment.php:659:            ->setDirection($dateDiff->format('%R'))
./vendor/fightbulc/moment/src/Moment.php:660:            ->setSeconds($this->fromToSeconds($dateDiff))
./vendor/fightbulc/moment/src/Moment.php:661:            ->setMinutes($this->fromToMinutes($dateDiff))
./vendor/fightbulc/moment/src/Moment.php:662:            ->setHours($this->fromToHours($dateDiff))
./vendor/fightbulc/moment/src/Moment.php:663:            ->setDays($this->fromToDays($dateDiff))
./vendor/fightbulc/moment/src/Moment.php:664:            ->setWeeks($this->fromToWeeks($dateDiff))
./vendor/fightbulc/moment/src/Moment.php:676:        $useTimezoneString = $timezoneString !== null ? $timezoneString : $this->getTimezoneString();
./vendor/fightbulc/moment/src/Moment.php:678:        return $this->from('now', $useTimezoneString);
./vendor/fightbulc/moment/src/Moment.php:699:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:701:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:717:            ($dateInterval->days * 24 * 60 * 60)
./vendor/fightbulc/moment/src/Moment.php:718:            + ($dateInterval->h * 60 * 60)
./vendor/fightbulc/moment/src/Moment.php:719:            + ($dateInterval->i * 60)
./vendor/fightbulc/moment/src/Moment.php:720:            + $dateInterval->s;
./vendor/fightbulc/moment/src/Moment.php:730:        return $this->fromToSeconds($dateInterval) / 60;
./vendor/fightbulc/moment/src/Moment.php:740:        return $this->fromToMinutes($dateInterval) / 60;
./vendor/fightbulc/moment/src/Moment.php:750:        return $this->fromToHours($dateInterval) / 24;
./vendor/fightbulc/moment/src/Moment.php:760:        return $this->fromToDays($dateInterval) / 7;
./vendor/fightbulc/moment/src/Moment.php:774:                $interval = $this->format('W');
./vendor/fightbulc/moment/src/Moment.php:776:                $start = new Moment('@' . $this->format('U'));
./vendor/fightbulc/moment/src/Moment.php:777:                $start->setTimezone($this->getTimezoneString())
./vendor/fightbulc/moment/src/Moment.php:778:                      ->subtractDays($this->getDaysAfterStartOfWeek())
./vendor/fightbulc/moment/src/Moment.php:779:                      ->setTime(0, 0, 0)
./vendor/fightbulc/moment/src/Moment.php:782:                $end = new Moment('@' . $this->format('U'));
./vendor/fightbulc/moment/src/Moment.php:783:                $end->setTimezone($this->getTimezoneString())
./vendor/fightbulc/moment/src/Moment.php:784:                    ->addDays(6 - $this->getDaysAfterStartOfWeek())
./vendor/fightbulc/moment/src/Moment.php:785:                    ->setTime(23, 59, 59)
./vendor/fightbulc/moment/src/Moment.php:790:            // ------------------------------
./vendor/fightbulc/moment/src/Moment.php:793:                $maxMonthDays = $this->format('t');
./vendor/fightbulc/moment/src/Moment.php:794:                $currentMonthDay = $this->format('j');
./vendor/fightbulc/moment/src/Moment.php:795:                $interval = $this->getMonth();
./vendor/fightbulc/moment/src/Moment.php:797:                $start = new Moment('@' . $this->format('U'));
./vendor/fightbulc/moment/src/Moment.php:798:                $start->setTimezone($this->getTimezoneString())
./vendor/fightbulc/moment/src/Moment.php:799:                      ->subtractDays($currentMonthDay - 1)
./vendor/fightbulc/moment/src/Moment.php:800:                      ->setTime(0, 0, 0)
./vendor/fightbulc/moment/src/Moment.php:803:                $end = new Moment('@' . $this->format('U'));
./vendor/fightbulc/moment/src/Moment.php:804:                $end->setTimezone($this->getTimezoneString())
./vendor/fightbulc/moment/src/Moment.php:805:                    ->addDays($maxMonthDays - $currentMonthDay)
./vendor/fightbulc/moment/src/Moment.php:806:                    ->setTime(23, 59, 59)
./vendor/fightbulc/moment/src/Moment.php:811:            // ------------------------------
./vendor/fightbulc/moment/src/Moment.php:814:                $quarter = $this->getQuarter();
./vendor/fightbulc/moment/src/Moment.php:815:                $momentPeriodVo = MomentHelper::getQuarterPeriod($quarter, $this->getYear(), $this->getTimezoneString());
./vendor/fightbulc/moment/src/Moment.php:816:                $start = $momentPeriodVo->getStartDate();
./vendor/fightbulc/moment/src/Moment.php:817:                $end = $momentPeriodVo->getEndDate();
./vendor/fightbulc/moment/src/Moment.php:821:            // ------------------------------
./vendor/fightbulc/moment/src/Moment.php:830:            ->setRefDate($this)
./vendor/fightbulc/moment/src/Moment.php:831:            ->setInterval($interval)
./vendor/fightbulc/moment/src/Moment.php:832:            ->setStartDate($start)
./vendor/fightbulc/moment/src/Moment.php:833:            ->setEndDate($end)
./vendor/fightbulc/moment/src/Moment.php:846:        $refMoment = $refMoment ? $refMoment : new Moment('now', $this->getTimezoneString());
./vendor/fightbulc/moment/src/Moment.php:847:        $momentFromVo = $this->cloning()->startOf('day')->from($refMoment->startOf('day'));
./vendor/fightbulc/moment/src/Moment.php:848:        $diff = $momentFromVo->getDays();
./vendor/fightbulc/moment/src/Moment.php:874:        elseif ($diff == -1)
./vendor/fightbulc/moment/src/Moment.php:879:        elseif ($diff > -7)
./vendor/fightbulc/moment/src/Moment.php:898:        return $this->format($format);
./vendor/fightbulc/moment/src/Moment.php:913:                return $this->setTime($this->getHour(), $this->getMinute(), 0);
./vendor/fightbulc/moment/src/Moment.php:918:                return $this->setTime($this->getHour(), 0, 0);
./vendor/fightbulc/moment/src/Moment.php:923:                return $this->setTime(0, 0, 0);
./vendor/fightbulc/moment/src/Moment.php:928:                return $this->resetDateTime(
./vendor/fightbulc/moment/src/Moment.php:929:                    $this->getPeriod('week')->getStartDate()->format('c')
./vendor/fightbulc/moment/src/Moment.php:935:                return $this->resetDateTime(
./vendor/fightbulc/moment/src/Moment.php:936:                    $this->getPeriod('quarter')->getStartDate()->format('c')
./vendor/fightbulc/moment/src/Moment.php:942:                return $this->resetDateTime(
./vendor/fightbulc/moment/src/Moment.php:943:                    $this->getPeriod('month')->getStartDate()->format('c')
./vendor/fightbulc/moment/src/Moment.php:949:                return $this->setDate($this->getYear(), 1, 1)->setTime(0, 0, 0);
./vendor/fightbulc/moment/src/Moment.php:969:                return $this->setTime($this->getHour(), $this->getMinute(), 59);
./vendor/fightbulc/moment/src/Moment.php:974:                return $this->setTime($this->getHour(), 59, 59);
./vendor/fightbulc/moment/src/Moment.php:979:                return $this->setTime(23, 59, 59);
./vendor/fightbulc/moment/src/Moment.php:984:                return $this->resetDateTime(
./vendor/fightbulc/moment/src/Moment.php:985:                    $this->getPeriod('week')->getEndDate()->format('c')
./vendor/fightbulc/moment/src/Moment.php:991:                return $this->resetDateTime(
./vendor/fightbulc/moment/src/Moment.php:992:                    $this->getPeriod('quarter')->getEndDate()->format('c')
./vendor/fightbulc/moment/src/Moment.php:998:                return $this->resetDateTime(
./vendor/fightbulc/moment/src/Moment.php:999:                    $this->getPeriod('month')->getEndDate()->format('c')
./vendor/fightbulc/moment/src/Moment.php:1005:                return $this->setDate($this->getYear(), 12, 31)->setTime(23, 59, 59);
./vendor/fightbulc/moment/src/Moment.php:1029:        $clone = $this->cloning();
./vendor/fightbulc/moment/src/Moment.php:1031:        $clone->setImmutableMode(false);
./vendor/fightbulc/moment/src/Moment.php:1033:        $clone->setImmutableMode(true);
./vendor/fightbulc/moment/src/Moment.php:1051:        $todayWeekday = $this->getWeekday();
./vendor/fightbulc/moment/src/Moment.php:1061:                    $addDays = $w === 1 ? $d - $todayWeekday : ($d - $todayWeekday) + ($w * 7 - 7);
./vendor/fightbulc/moment/src/Moment.php:1064:                    $dates[] = $this->cloning()->addDays($addDays);
./vendor/fightbulc/moment/src/Moment.php:1079:        return $this->cloning()->setTimezone('UTC');
./vendor/fightbulc/moment/src/Moment.php:1093:        $dateTime = $this->isMoment($dateTime) ? $dateTime : new Moment($dateTime);
./vendor/fightbulc/moment/src/Moment.php:1095:        return (bool)($this->toUTC()->startOf($period)->getTimestamp() === $dateTime->toUTC()->startOf($period)->getTimestamp());
./vendor/fightbulc/moment/src/Moment.php:1109:        $dateTime = $this->isMoment($dateTime) ? $dateTime : new Moment($dateTime);
./vendor/fightbulc/moment/src/Moment.php:1111:        return (bool)($this->toUTC()->startOf($period)->getTimestamp() < $dateTime->toUTC()->startOf($period)->getTimestamp());
./vendor/fightbulc/moment/src/Moment.php:1125:        $dateTime = $this->isMoment($dateTime) ? $dateTime : new Moment($dateTime);
./vendor/fightbulc/moment/src/Moment.php:1127:        return $dateTime->isBefore($this, $period);
./vendor/fightbulc/moment/src/Moment.php:1143:        $isBefore = $this->isBefore($minDateTime, $period);
./vendor/fightbulc/moment/src/Moment.php:1144:        $isAfter = $this->isAfter($maxDateTime, $period);
./vendor/fightbulc/moment/src/Moment.php:1162:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:1164:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:1167:        $this->rawDateTimeString = $rawDateTimeString;
./vendor/fightbulc/moment/src/Moment.php:1177:        return $this->rawDateTimeString;
./vendor/fightbulc/moment/src/Moment.php:1187:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:1189:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:1192:        $this->timezoneString = $timezoneString;
./vendor/fightbulc/moment/src/Moment.php:1202:        return $this->timezoneString;
./vendor/fightbulc/moment/src/Moment.php:1213:        $this->setTimezoneString($timezoneString);
./vendor/fightbulc/moment/src/Moment.php:1225:        $currentWeekDay = (int)$this->getWeekday();
./vendor/fightbulc/moment/src/Moment.php:1226:        $distance = (7 - $dow + $currentWeekDay) % 7;
./vendor/fightbulc/moment/src/Moment.php:1237:        $rawDateTime = $this->getRawDateTimeString();
./vendor/fightbulc/moment/src/Moment.php:1239:        if (strpos($rawDateTime, '-') === false)
./vendor/fightbulc/moment/src/Moment.php:1244:        // ----------------------------------
./vendor/fightbulc/moment/src/Moment.php:1250:            $rawDateTime = preg_replace('/\.[0-9][0-9][0-9]/', '', $rawDateTime);
./vendor/fightbulc/moment/src/Moment.php:1258:                if (strpos($rawTimeZone, '+') !== false || strpos($rawTimeZone, '-') !== false)
./vendor/fightbulc/moment/src/Moment.php:1260:                    // with colon: +-HH:MM
./vendor/fightbulc/moment/src/Moment.php:1263:                        $momentDateTime = $this->format('Y-m-d\TH:i:sP');
./vendor/fightbulc/moment/src/Moment.php:1266:                    // without colon: +-HHMM
./vendor/fightbulc/moment/src/Moment.php:1269:                        $momentDateTime = $this->format('Y-m-d\TH:i:sO');
./vendor/fightbulc/moment/src/Moment.php:1276:                    $momentDateTime = $this->format('Y-m-d\TH:i:se');
./vendor/fightbulc/moment/src/Moment.php:1283:                $momentDateTime = $this->format('Y-m-d\TH:i:s');
./vendor/fightbulc/moment/src/Moment.php:1293:                $momentDateTime = $this->format(self::NO_TZ_MYSQL);
./vendor/fightbulc/moment/src/Moment.php:1297:                $momentDateTime = $this->format(self::NO_TZ_NO_SECS);
./vendor/fightbulc/moment/src/Moment.php:1304:            $momentDateTime = $this->format(self::NO_TIME);
./vendor/fightbulc/moment/src/Moment.php:1318:        if ($this->immutableMode)
./vendor/fightbulc/moment/src/Moment.php:1320:            return $this->implicitCloning(__FUNCTION__, func_get_args());
./vendor/fightbulc/moment/src/Moment.php:1323:        parent::modify('-' . $value . ' ' . $type);
./vendor/fightbulc/moment/composer.json:39:    "require-dev": {
./vendor/fightbulc/moment/composer.json:43:        "psr-4": {
./vendor/fightbulc/moment/README.md:10:[![Build Status](https://travis-ci.org/fightbulc/moment.php.svg?branch=master)](https://travis-ci.org/fightbulc/moment.php)
./vendor/fightbulc/moment/README.md:11:[![Total Downloads](https://img.shields.io/packagist/dt/fightbulc/moment.svg?style=flat-square)](https://packagist.org/packages/fightbulc/moment)
./vendor/fightbulc/moment/README.md:25:-------------------------------------------------
./vendor/fightbulc/moment/README.md:39:-------------------------------------------------
./vendor/fightbulc/moment/README.md:47:echo $m->format(); // e.g. 2012-10-03T10:00:00+0000
./vendor/fightbulc/moment/README.md:50:echo $m->format(); // e.g. 2012-10-03T12:00:00+0200
./vendor/fightbulc/moment/README.md:52:$m = new \Moment\Moment('2017-06-06T10:00:00', 'Europe/Berlin');
./vendor/fightbulc/moment/README.md:53:echo $m->format(); // e.g. 2012-10-03T12:00:00+0200
./vendor/fightbulc/moment/README.md:56:echo $m->format(); // e.g. 2017-07-06T18:43:05+0000
./vendor/fightbulc/moment/README.md:59:-------------------------------------------------
./vendor/fightbulc/moment/README.md:66:const ATOM = 'Y-m-d\TH:i:sP'; // 2005-08-15T15:52:01+00:00
./vendor/fightbulc/moment/README.md:67:const COOKIE = 'l, d-M-y H:i:s T'; // Monday, 15-Aug-2005 15:52:01 UTC
./vendor/fightbulc/moment/README.md:68:const ISO8601 = 'Y-m-d\TH:i:sO'; // 2005-08-15T15:52:01+0000
./vendor/fightbulc/moment/README.md:70:const RFC850 = 'l, d-M-y H:i:s T'; // Monday, 15-Aug-05 15:52:01 UTC
./vendor/fightbulc/moment/README.md:75:const W3C = 'Y-m-d\TH:i:sP'; // 2005-08-15T15:52:01+00:00
./vendor/fightbulc/moment/README.md:79:const NO_TZ_MYSQL = 'Y-m-d H:i:s'; // 2005-08-15 15:52:01
./vendor/fightbulc/moment/README.md:80:const NO_TZ_NO_SECS = 'Y-m-d H:i'; // 2005-08-15 15:52
./vendor/fightbulc/moment/README.md:81:const NO_TIME = 'Y-m-d'; // 2005-08-15
./vendor/fightbulc/moment/README.md:84:$timeWithFraction = '2016-05-04T10:00:00.000';
./vendor/fightbulc/moment/README.md:87:-------------------------------------------------
./vendor/fightbulc/moment/README.md:95:echo $m->format('[Weekday:] l'); // e.g. Weekday: Wednesday
./vendor/fightbulc/moment/README.md:101:echo $m->format('[Wochentag:] l'); // e.g. Wochentag: Mittwoch
./vendor/fightbulc/moment/README.md:133:-------------------------------------------------
./vendor/fightbulc/moment/README.md:138:$m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');
./vendor/fightbulc/moment/README.md:139:echo $m->setTimezone('UTC')->format(); // 2012-04-25T01:00:00+0000
./vendor/fightbulc/moment/README.md:147:$m = new \Moment\Moment('2016-09-13T14:32:06');
./vendor/fightbulc/moment/README.md:148:echo $m->format(); // 2016-09-13T14:32:06+0100
./vendor/fightbulc/moment/README.md:152:-------------------------------------------------
./vendor/fightbulc/moment/README.md:159:$m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');
./vendor/fightbulc/moment/README.md:160:echo $m->format('l, dS F Y / H:i (e)'); // Wednesday, 25th April 2012 / 03:00 (Europe/Berlin)
./vendor/fightbulc/moment/README.md:164:#### II. Non-php formats
./vendor/fightbulc/moment/README.md:173:$m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');
./vendor/fightbulc/moment/README.md:176:echo $m->format('LLLL', new \Moment\CustomFormats\MomentJs()); // Wednesday, April 25th 2012 3:00 AM
./vendor/fightbulc/moment/README.md:186:$m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');
./vendor/fightbulc/moment/README.md:187:echo $m->format('[We are in the month of:] F'); // We are in the month of: April
./vendor/fightbulc/moment/README.md:201:$m = new \Moment\Moment('2014-05-27T12:22:00', 'CET');
./vendor/fightbulc/moment/README.md:202:$m->format('WS'); // 22nd
./vendor/fightbulc/moment/README.md:205:-------------------------------------------------
./vendor/fightbulc/moment/README.md:212:$m = new \Moment\Moment('2012-05-15T12:30:00', 'CET');
./vendor/fightbulc/moment/README.md:213:echo $m->addHours(2)->format(); // 2012-05-15T14:30:00+0200
./vendor/fightbulc/moment/README.md:215:$m = new \Moment\Moment('2012-05-15T12:30:00', 'CET');
./vendor/fightbulc/moment/README.md:216:echo $m->subtractDays(7)->subtractMinutes(15)->format(); // 2012-05-08T12:15:00+0200
./vendor/fightbulc/moment/README.md:219:echo $m->subtractDays(7)->subtractMinutes(15)->format(); // 2014-05-23T09:44:39+0000
./vendor/fightbulc/moment/README.md:227:$m = new \Moment\Moment('2012-05-15T12:30:00', 'CET');
./vendor/fightbulc/moment/README.md:228:$c = $m->cloning()->addDays(1);
./vendor/fightbulc/moment/README.md:230:echo $m->getDay(); // 15
./vendor/fightbulc/moment/README.md:231:echo $c->getDay(); // 16
./vendor/fightbulc/moment/README.md:237:$m = new \Moment\Moment('2012-05-15T12:30:00', 'CET', true);
./vendor/fightbulc/moment/README.md:238:$c = $m->addDays(1);
./vendor/fightbulc/moment/README.md:240:echo $m->getDay(); // 15
./vendor/fightbulc/moment/README.md:241:echo $c->getDay(); // 16
./vendor/fightbulc/moment/README.md:244:$m->setImmutableMode(false)->subtractDays(1);
./vendor/fightbulc/moment/README.md:246:echo $m->getDay(); // 14
./vendor/fightbulc/moment/README.md:254:---             | ---
./vendor/fightbulc/moment/README.md:266:---             | ---
./vendor/fightbulc/moment/README.md:273:--              | getQuarter()
./vendor/fightbulc/moment/README.md:275:-------------------------------------------------
./vendor/fightbulc/moment/README.md:280:$m = new \Moment\Moment('2013-02-01T07:00:00');
./vendor/fightbulc/moment/README.md:281:$momentFromVo = $m->fromNow();
./vendor/fightbulc/moment/README.md:284:$m = new \Moment\Moment('2013-02-01T07:00:00');
./vendor/fightbulc/moment/README.md:285:$momentFromVo = $m->from('2011-09-25T10:00:00');
./vendor/fightbulc/moment/README.md:288:echo $momentFromVo->getDirection()  // "future"
./vendor/fightbulc/moment/README.md:289:echo $momentFromVo->getSeconds()    // -42411600
./vendor/fightbulc/moment/README.md:290:echo $momentFromVo->getMinutes()    // -706860
./vendor/fightbulc/moment/README.md:291:echo $momentFromVo->getHours()      // -11781
./vendor/fightbulc/moment/README.md:292:echo $momentFromVo->getDays()       // -490.88
./vendor/fightbulc/moment/README.md:293:echo $momentFromVo->getWeeks()      // -70.13
./vendor/fightbulc/moment/README.md:294:echo $momentFromVo->getMonths()     // -17.53
./vendor/fightbulc/moment/README.md:295:echo $momentFromVo->getYears()      // -1.42
./vendor/fightbulc/moment/README.md:296:echo $momentFromVo->getRelative()   // in a year
./vendor/fightbulc/moment/README.md:299:-------------------------------------------------
./vendor/fightbulc/moment/README.md:303:Sometimes its helpful to get the period boundaries of a given date. For instance in case that today is Wednesday and I need the starting-/end dates from today's week. Allowed periods are ```week```, ```month``` and ```quarter```.
./vendor/fightbulc/moment/README.md:306:$m = new \Moment\Moment('2013-10-23T10:00:00');
./vendor/fightbulc/moment/README.md:307:$momentPeriodVo = $m->getPeriod('week');
./vendor/fightbulc/moment/README.md:311:    ->getStartDate()
./vendor/fightbulc/moment/README.md:312:    ->format('Y-m-d'); // 2013-10-21
./vendor/fightbulc/moment/README.md:315:    ->getEndDate()
./vendor/fightbulc/moment/README.md:316:    ->format('Y-m-d'); // 2013-10-27
./vendor/fightbulc/moment/README.md:319:    ->getRefDate()
./vendor/fightbulc/moment/README.md:320:    ->format('Y-m-d'); // 2013-10-23
./vendor/fightbulc/moment/README.md:322:echo $momentPeriodVo->getInterval(); // 43 = week of year
./vendor/fightbulc/moment/README.md:328:$momentPeriodVo = $m->getPeriod('month');
./vendor/fightbulc/moment/README.md:329:$momentPeriodVo = $m->getPeriod('quarter');
./vendor/fightbulc/moment/README.md:332:-------------------------------------------------
./vendor/fightbulc/moment/README.md:339:(new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->subtractDays(6)->calendar(); // last week
./vendor/fightbulc/moment/README.md:340:(new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->subtractDays(1)->calendar(); // yesterday
./vendor/fightbulc/moment/README.md:341:(new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->calendar(); // today
./vendor/fightbulc/moment/README.md:342:(new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->addDays(1)->calendar(); // tomorrow
./vendor/fightbulc/moment/README.md:343:(new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->addDays(3)->calendar(); // next week
./vendor/fightbulc/moment/README.md:344:(new \Moment\Moment('2014-03-30T16:58:00', 'CET'))->addDays(10)->calendar(); // everything else
./vendor/fightbulc/moment/README.md:348:---             | ---
./vendor/fightbulc/moment/README.md:356:__Note:__ Use ```$moment->calendar(false)``` to leave out the time ```at 00:00```.
./vendor/fightbulc/moment/README.md:358:-------------------------------------------------
./vendor/fightbulc/moment/README.md:367:$m->startOf('year');    // set to January 1st, 00:00 this year
./vendor/fightbulc/moment/README.md:368:$m->startOf('quarter');  // set to the beginning of the current quarter, 1st day of months, 00:00
./vendor/fightbulc/moment/README.md:369:$m->startOf('month');   // set to the first of this month, 00:00
./vendor/fightbulc/moment/README.md:370:$m->startOf('week');    // set to the first day of this week, 00:00
./vendor/fightbulc/moment/README.md:371:$m->startOf('day');     // set to 00:00 today
./vendor/fightbulc/moment/README.md:372:$m->startOf('hour');    // set to now, but with 0 mins, 0 secs
./vendor/fightbulc/moment/README.md:373:$m->startOf('minute');  // set to now, but with 0 seconds
./vendor/fightbulc/moment/README.md:375:$m->endOf('year');    // set to December 31st, 23:59 this year
./vendor/fightbulc/moment/README.md:376:$m->endOf('quarter');  // set to the end of the current quarter, last day of month, 23:59
./vendor/fightbulc/moment/README.md:377:$m->endOf('month');   // set to the last of this month, 23:59
./vendor/fightbulc/moment/README.md:378:$m->endOf('week');    // set to the last day of this week, 23:59
./vendor/fightbulc/moment/README.md:379:$m->endOf('day');     // set to 23:59 today
./vendor/fightbulc/moment/README.md:380:$m->endOf('hour');    // set to now, but with 59 mins, 59 secs
./vendor/fightbulc/moment/README.md:381:$m->endOf('minute');  // set to now, but with 59 seconds
./vendor/fightbulc/moment/README.md:386:-------------------------------------------------
./vendor/fightbulc/moment/README.md:395:// 1 - 7 = Mon - Sun
./vendor/fightbulc/moment/README.md:402:$dates = $m->getMomentsByWeekdays($weekdayNumbers, 3);
./vendor/fightbulc/moment/README.md:407:You can now run through the result and put it formatted into a drop-down field or for whatever you might need it.
./vendor/fightbulc/moment/README.md:409:-------------------------------------------------
./vendor/fightbulc/moment/README.md:413:- Try to port useful methods from moment.js
./vendor/fightbulc/moment/README.md:414:- Add unit tests
./vendor/fightbulc/moment/README.md:416:-------------------------------------------------
./vendor/fightbulc/moment/README.md:421: - fixed:
./vendor/fightbulc/moment/README.md:422:    - Occitan locale
./vendor/fightbulc/moment/README.md:425: - fixed:
./vendor/fightbulc/moment/README.md:426:    - Russian locale [issue](https://github.com/fightbulc/moment.php/issues/68#issuecomment-264890181)
./vendor/fightbulc/moment/README.md:429: - added:
./vendor/fightbulc/moment/README.md:430:    - Portuguese (pt_PT)
./vendor/fightbulc/moment/README.md:433: - fixed:
./vendor/fightbulc/moment/README.md:434:    - Hungarian locale weekdays order
./vendor/fightbulc/moment/README.md:437: - added:
./vendor/fightbulc/moment/README.md:438:    - allow initialising Moment with unix timestamp without leading @
./vendor/fightbulc/moment/README.md:441: - fixed:
./vendor/fightbulc/moment/README.md:442:    - Fix format of 'LLL' in Custom Formats
./vendor/fightbulc/moment/README.md:445: - fixed:
./vendor/fightbulc/moment/README.md:446:    - removed php5.4+ only syntax
./vendor/fightbulc/moment/README.md:449: - fixed:
./vendor/fightbulc/moment/README.md:450:    - Danish day- and monthnames correct case
./vendor/fightbulc/moment/README.md:451:    - French locale
./vendor/fightbulc/moment/README.md:452:    - PHPDocs
./vendor/fightbulc/moment/README.md:453:  - added:
./vendor/fightbulc/moment/README.md:454:    - consts for `NO_TZ_MYSQL`, `NO_TZ_NO_SECS` and `NO_TIME` when parsing dates
./vendor/fightbulc/moment/README.md:457: - added:
./vendor/fightbulc/moment/README.md:458:    - Dutch customFormat
./vendor/fightbulc/moment/README.md:461: - fixed:
./vendor/fightbulc/moment/README.md:462:    - Russian locale
./vendor/fightbulc/moment/README.md:465: - added:
./vendor/fightbulc/moment/README.md:466:    - Turkish locale  
./vendor/fightbulc/moment/README.md:467: - fixed:
./vendor/fightbulc/moment/README.md:468:    - Lengadocian locale
./vendor/fightbulc/moment/README.md:471: - fixed:
./vendor/fightbulc/moment/README.md:472:    - PHP7.1 setTime requires `$microseconds`  
./vendor/fightbulc/moment/README.md:475: - added:
./vendor/fightbulc/moment/README.md:476:    - Ukrainian locale  
./vendor/fightbulc/moment/README.md:479: - added:
./vendor/fightbulc/moment/README.md:480:    - Hungarian locale  
./vendor/fightbulc/moment/README.md:483: - fixed:
./vendor/fightbulc/moment/README.md:484:    - Lengadocian locale  
./vendor/fightbulc/moment/README.md:487: - added:
./vendor/fightbulc/moment/README.md:488:    - Vietnamese locale
./vendor/fightbulc/moment/README.md:489:    - Lengadocian locale  
./vendor/fightbulc/moment/README.md:492: - added:
./vendor/fightbulc/moment/README.md:493:    - Change default timezone
./vendor/fightbulc/moment/README.md:494:- fixed:
./vendor/fightbulc/moment/README.md:495:    - FormatsInterface docs
./vendor/fightbulc/moment/README.md:498: - added:
./vendor/fightbulc/moment/README.md:499:    - Arabic locale
./vendor/fightbulc/moment/README.md:500:    - Custom format on locale level
./vendor/fightbulc/moment/README.md:503: - fixed:
./vendor/fightbulc/moment/README.md:504:    - Russian locale
./vendor/fightbulc/moment/README.md:505: - added:
./vendor/fightbulc/moment/README.md:506:    - Russian locale tests
./vendor/fightbulc/moment/README.md:509: - fixed:
./vendor/fightbulc/moment/README.md:510:    - Polish locale
./vendor/fightbulc/moment/README.md:511:    - Calculation of seconds
./vendor/fightbulc/moment/README.md:514:- fixed:
./vendor/fightbulc/moment/README.md:515:    - Russian: more relative time fixes
./vendor/fightbulc/moment/README.md:518:- fixed:
./vendor/fightbulc/moment/README.md:519:    - Russian locale relative time: day handling
./vendor/fightbulc/moment/README.md:522:- fixed:
./vendor/fightbulc/moment/README.md:523:    - missing immutable handling
./vendor/fightbulc/moment/README.md:526:- fixed:
./vendor/fightbulc/moment/README.md:527:    - Improved Polish locale (added Nominativ)
./vendor/fightbulc/moment/README.md:530:- fixed:
./vendor/fightbulc/moment/README.md:531:    - Chinese locale
./vendor/fightbulc/moment/README.md:534:- added accepted formats to README
./vendor/fightbulc/moment/README.md:537:- fixed:
./vendor/fightbulc/moment/README.md:538:    - Thai locale
./vendor/fightbulc/moment/README.md:541:- added:
./vendor/fightbulc/moment/README.md:542:    - Catalan locale
./vendor/fightbulc/moment/README.md:543:- fixed:
./vendor/fightbulc/moment/README.md:544:    - Polish locale test
./vendor/fightbulc/moment/README.md:547:- added:
./vendor/fightbulc/moment/README.md:548:    - Russian locale
./vendor/fightbulc/moment/README.md:549:- fixed:
./vendor/fightbulc/moment/README.md:550:    - Polish locale test
./vendor/fightbulc/moment/README.md:553:- added:
./vendor/fightbulc/moment/README.md:554:    - Immutable mode
./vendor/fightbulc/moment/README.md:555:- fixed:
./vendor/fightbulc/moment/README.md:556:    - Polish locale
./vendor/fightbulc/moment/README.md:559:- added:
./vendor/fightbulc/moment/README.md:560:    - Polish locale
./vendor/fightbulc/moment/README.md:563:- added:
./vendor/fightbulc/moment/README.md:564:    - Indonesian locale
./vendor/fightbulc/moment/README.md:567:- added:
./vendor/fightbulc/moment/README.md:568:    - Japanese locale
./vendor/fightbulc/moment/README.md:571:- fixed:
./vendor/fightbulc/moment/README.md:572:    - typo in Dutch locale
./vendor/fightbulc/moment/README.md:575:- added:
./vendor/fightbulc/moment/README.md:576:    - Dutch locale
./vendor/fightbulc/moment/README.md:579:- added:
./vendor/fightbulc/moment/README.md:580:    - Swedish locale
./vendor/fightbulc/moment/README.md:583:- added:
./vendor/fightbulc/moment/README.md:584:    - Danish locale
./vendor/fightbulc/moment/README.md:587:- fixed:
./vendor/fightbulc/moment/README.md:588:    - fixed starting/ending weekday for Romanian locale
./vendor/fightbulc/moment/README.md:591:- fixed:
./vendor/fightbulc/moment/README.md:592:    - adding delimiter character to Italian locale
./vendor/fightbulc/moment/README.md:595:- fixed:
./vendor/fightbulc/moment/README.md:596:    - passing back new instance for startOf/endOf for week, month, quarter
./vendor/fightbulc/moment/README.md:599:- added:
./vendor/fightbulc/moment/README.md:600:    - locale Czech
./vendor/fightbulc/moment/README.md:603:- added:
./vendor/fightbulc/moment/README.md:604:    - ```calendar``` locale receives as \Closure the following params ```function(Moment $m) {}```
./vendor/fightbulc/moment/README.md:605:    - ```relativeTime``` locale receives as \Closure the following params ```function($count, $direction, Moment $m) {}```
./vendor/fightbulc/moment/README.md:608:- added:
./vendor/fightbulc/moment/README.md:609:    - fixed passing closures to locale (calendar, relativeTime)
./vendor/fightbulc/moment/README.md:610:    - set correct german locale information
./vendor/fightbulc/moment/README.md:613:- added:
./vendor/fightbulc/moment/README.md:614:    - fixed Thai locale strings
./vendor/fightbulc/moment/README.md:617:- added:
./vendor/fightbulc/moment/README.md:618:    - locale traditional Chinese
./vendor/fightbulc/moment/README.md:621:- added:
./vendor/fightbulc/moment/README.md:622:    - locale Chinese
./vendor/fightbulc/moment/README.md:623:    - ordinal formatter receives now the ```token``` e.g. the token within ```dS``` is ```d```  
./vendor/fightbulc/moment/README.md:626:- fixed: english ordinal issue for numbers between 11 - 13
./vendor/fightbulc/moment/README.md:629:- added: locale Italian
./vendor/fightbulc/moment/README.md:632:- fixed: english ordinal issue
./vendor/fightbulc/moment/README.md:635:- added: locale Portuguese
./vendor/fightbulc/moment/README.md:638:- fixed:
./vendor/fightbulc/moment/README.md:639:    - Locale displayed wrong month name (#34)
./vendor/fightbulc/moment/README.md:640:    - Changed the order of weekdays within locale files
./vendor/fightbulc/moment/README.md:643:- added:
./vendor/fightbulc/moment/README.md:644:    - getWeekdayNameLong()
./vendor/fightbulc/moment/README.md:645:    - getWeekdayNameShort()
./vendor/fightbulc/moment/README.md:646:    - getMonthNameLong()
./vendor/fightbulc/moment/README.md:647:    - getMonthNameShort()
./vendor/fightbulc/moment/README.md:650:- added:
./vendor/fightbulc/moment/README.md:651:    - Locale: Thai
./vendor/fightbulc/moment/README.md:654:- added:
./vendor/fightbulc/moment/README.md:655:    - Locale
./vendor/fightbulc/moment/README.md:656:    - MomentFromVo:
./vendor/fightbulc/moment/README.md:657:        - getMonths()
./vendor/fightbulc/moment/README.md:658:        - getYears()
./vendor/fightbulc/moment/README.md:659:        - getRelative()
./vendor/fightbulc/moment/README.md:660:- fixed:
./vendor/fightbulc/moment/README.md:661:    - MomentFromVo:
./vendor/fightbulc/moment/README.md:662:        - getSeconds() shows now direction as well
./vendor/fightbulc/moment/README.md:665:- fixed:
./vendor/fightbulc/moment/README.md:666:    - timezone issue which occured only for unixtime dates
./vendor/fightbulc/moment/README.md:667:- other:
./vendor/fightbulc/moment/README.md:668:    - MomentFromVo:
./vendor/fightbulc/moment/README.md:669:        - direction returns now: "future" (-) / "past" (+)
./vendor/fightbulc/moment/README.md:670:        - time values are now type casted as floats
./vendor/fightbulc/moment/README.md:673:- fixed:
./vendor/fightbulc/moment/README.md:674:    - unrecognised timezone when constructing a Moment
./vendor/fightbulc/moment/README.md:677:- added:
./vendor/fightbulc/moment/README.md:678:    - getMomentsByWeekdays()
./vendor/fightbulc/moment/README.md:679:    - getWeekday()
./vendor/fightbulc/moment/README.md:680:    - getWeekOfYear()
./vendor/fightbulc/moment/README.md:681:- other:
./vendor/fightbulc/moment/README.md:682:    - escaped text
./vendor/fightbulc/moment/README.md:685:- added:
./vendor/fightbulc/moment/README.md:686:    - startOf and endOf as implemented by [moment.js](http://momentjs.com/docs/#/manipulating/start-of/)
./vendor/fightbulc/moment/README.md:687:    - get the quarter period of a given date
./vendor/fightbulc/moment/README.md:688:    - setDay()
./vendor/fightbulc/moment/README.md:689:    - getDay()
./vendor/fightbulc/moment/README.md:690:    - setMonth()
./vendor/fightbulc/moment/README.md:691:    - getMonth()
./vendor/fightbulc/moment/README.md:692:    - setYear()
./vendor/fightbulc/moment/README.md:693:    - getYear()
./vendor/fightbulc/moment/README.md:694:    - getQuarter()
./vendor/fightbulc/moment/README.md:695:    - setSecond()
./vendor/fightbulc/moment/README.md:696:    - getSecond()
./vendor/fightbulc/moment/README.md:697:    - setMinute()
./vendor/fightbulc/moment/README.md:698:    - getMinute()
./vendor/fightbulc/moment/README.md:699:    - setHour()
./vendor/fightbulc/moment/README.md:700:    - getHour()
./vendor/fightbulc/moment/README.md:701:    - added cloning()
./vendor/fightbulc/moment/README.md:702:        - create a new mutable moment based of the given instance
./vendor/fightbulc/moment/README.md:703:    - added ```getInterval()``` to ```MomentPeriodVo``` to indicate the interval of the given period
./vendor/fightbulc/moment/README.md:704:        - ```week``` = week of the year
./vendor/fightbulc/moment/README.md:705:        - ```month``` = month of the year
./vendor/fightbulc/moment/README.md:706:        - ```quarter``` = quarter of the year
./vendor/fightbulc/moment/README.md:707:    - added a static class ```MomentHelper```
./vendor/fightbulc/moment/README.md:708:        - get the period for a given quarter in a given year
./vendor/fightbulc/moment/README.md:709:    - fixed PHP's internal ordinal calculation (also in combination with moment.js formatting)
./vendor/fightbulc/moment/README.md:710:        - e.g. ```WS``` for 21th week of the year shows now correct ```21th``` etc.
./vendor/fightbulc/moment/README.md:711:    - you can now escape text by wrapping it in ```[]```
./vendor/fightbulc/moment/README.md:712:        - e.g. ```[Hello World]``` will be automatically transformed into ```\H\e\l\l\o \W\o\r\l\d```
./vendor/fightbulc/moment/README.md:714:- removed:
./vendor/fightbulc/moment/README.md:715:    - add()
./vendor/fightbulc/moment/README.md:716:    - subtract()
./vendor/fightbulc/moment/README.md:719:- added:
./vendor/fightbulc/moment/README.md:720:    - calendar format as implemented by [moment.js](http://momentjs.com/docs/#/displaying/calendar-time/)
./vendor/fightbulc/moment/README.md:723:- fixed:
./vendor/fightbulc/moment/README.md:724:    - incompatibility w/ PHP 5.3
./vendor/fightbulc/moment/README.md:726:- added:
./vendor/fightbulc/moment/README.md:727:    - Exception throw as ```MomentException```
./vendor/fightbulc/moment/README.md:728:    - Date validation on instantiation:
./vendor/fightbulc/moment/README.md:729:        - test for dates w/ format ```YYYY-mm-dd``` and ```YYYY-mm-ddTHH:ii:ss```
./vendor/fightbulc/moment/README.md:730:        - throws MomentException on invalid dates
./vendor/fightbulc/moment/README.md:731:    - addSeconds()
./vendor/fightbulc/moment/README.md:732:    - addMinutes()
./vendor/fightbulc/moment/README.md:733:    - addHours()
./vendor/fightbulc/moment/README.md:734:    - addDays()
./vendor/fightbulc/moment/README.md:735:    - addWeeks()
./vendor/fightbulc/moment/README.md:736:    - addMonths()
./vendor/fightbulc/moment/README.md:737:    - addYears()
./vendor/fightbulc/moment/README.md:738:    - subtractSeconds()
./vendor/fightbulc/moment/README.md:739:    - subtractMinutes()
./vendor/fightbulc/moment/README.md:740:    - subtractHours()
./vendor/fightbulc/moment/README.md:741:    - subtractDays()
./vendor/fightbulc/moment/README.md:742:    - subtractWeeks()
./vendor/fightbulc/moment/README.md:743:    - subtractMonths()
./vendor/fightbulc/moment/README.md:744:    - subtractYears()
./vendor/fightbulc/moment/README.md:746:- deprecated:
./vendor/fightbulc/moment/README.md:747:    - add()
./vendor/fightbulc/moment/README.md:748:    - subtract()
./vendor/fightbulc/moment/README.md:750:-------------------------------------------------
./vendor/fightbulc/moment/.travis.yml:4:  - 5.3
./vendor/fightbulc/moment/.travis.yml:5:  - 5.4
./vendor/fightbulc/moment/.travis.yml:6:  - 5.5
./vendor/fightbulc/moment/.travis.yml:7:  - 5.6
./vendor/fightbulc/moment/.travis.yml:8:  - 7.0
./vendor/fightbulc/moment/.travis.yml:9:  - hhvm
./vendor/fightbulc/moment/.travis.yml:13:    - php: hhvm
./vendor/fightbulc/moment/.travis.yml:16:  - composer self-update
./vendor/fightbulc/moment/.travis.yml:19:  - travis_retry composer install --no-interaction --prefer-source
./vendor/fightbulc/moment/.travis.yml:22:  - phpunit -c tests/build.xml
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:14:        $startingDate = '2015-01-04T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:30:            $this->assertEquals($weekdayNames[$moment->getWeekday()][0], $moment->getWeekdayNameShort(), 'weekday short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:31:            $this->assertEquals($weekdayNames[$moment->getWeekday()][1], $moment->getWeekdayNameLong(), 'weekday long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:33:            $moment->addDays(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:39:        $startingDate = '2015-01-04T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:60:            $this->assertEquals($monthNames[$moment->format('n')][0], $moment->getMonthNameShort(), 'month short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:61:            $this->assertEquals($monthNames[$moment->format('n')][1], $moment->getMonthNameLong(), 'month long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:63:            $moment->addMonths(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:77:        $b = new Moment('2010-02-14 15:25:50');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:79:            $this->assertEquals($a[$i][1], $b->format($a[$i][0]));
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:85:        $beginningMoment = new Moment('2015-06-14 20:46:22', 'Europe/Berlin');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:86:        $endMoment = new Moment('2015-06-14 20:48:32', 'Europe/Berlin');
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:87:        $this->assertEquals('dans 2 minutes', $endMoment->from($beginningMoment)->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentFrenchLocaleTest.php:88:        $this->assertEquals('il y a 2 minutes', $beginningMoment->from($endMoment)->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:14:        $startingDate = '2016-01-29T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:29:            $this->assertEquals($weekdayNames[$moment->getWeekday()][0], $moment->getWeekdayNameShort(), 'weekday short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:30:            $this->assertEquals($weekdayNames[$moment->getWeekday()][1], $moment->getWeekdayNameLong(), 'weekday long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:32:            $moment->addDays(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:38:        $string = '2015-06-14 20:46:22';
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:40:        $this->assertEquals('14 czerwca', $moment->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:42:        $string = '2015-03-08T15:14:53-0500';
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:44:        $this->assertEquals('8 marca', $moment->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:49:        $moment = new Moment('2016-01-03 16:17:07', 'Europe/Berlin');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:50:        $this->assertEquals('3 grudnia', $moment->subtractMonths(1)->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:55:        $startingDate = '2016-01-01T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:75:            $this->assertEquals($monthsNominative[$moment->format('n')], $moment->format('f'), 'month nominative failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:77:            $moment->addMonths(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:84:        $past = new Moment('2016-01-03 16:17:07', 'Europe/Berlin');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:86:        $relative = $past->from('2016-01-03 16:34:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:87:        $this->assertEquals('17 minut temu', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:89:        $relative = $past->from('2016-01-03 16:40:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:90:        $this->assertEquals('23 minuty temu', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:92:        $relative = $past->from('2016-01-03 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:93:        $this->assertEquals('13 minut temu', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:98:        $past = new Moment('2016-04-10');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:99:        $this->assertEquals('ostatnia niedziela', $past->calendar(false, new Moment('2016-04-12')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:101:        $past = new Moment('2016-04-11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:102:        $this->assertEquals('ostatni poniedziałek', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:104:        $past = new Moment('2016-04-12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:105:        $this->assertEquals('ostatni wtorek', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:107:        $past = new Moment('2016-04-13');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:108:        $this->assertEquals('ostatnia środa', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:110:        $past = new Moment('2016-04-14');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:111:        $this->assertEquals('ostatni czwartek', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:113:        $past = new Moment('2016-04-15');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:114:        $this->assertEquals('ostatni piątek', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:116:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:117:        $this->assertEquals('wczoraj', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:119:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentPolishLocaleTest.php:120:        $this->assertEquals('ostatnia sobota', $past->calendar(false, new Moment('2016-04-18')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:3: * Turkish (tr-TR) language support
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:19:        $startingDate = '2015-01-04T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:33:            $this->assertEquals($weekdayNames[$moment->getWeekday()][0], $moment->getWeekdayNameShort(), 'weekday short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:34:            $this->assertEquals($weekdayNames[$moment->getWeekday()][1], $moment->getWeekdayNameLong(), 'weekday long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:36:            $moment->addDays(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:42:        $startingDate = '2015-01-04T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:62:            $this->assertEquals($monthNames[$moment->format('n')][0], $moment->getMonthNameShort(), 'month short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:63:            $this->assertEquals($monthNames[$moment->format('n')][1], $moment->getMonthNameLong(), 'month long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:65:            $moment->addMonths(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:79:        $b = new Moment('2010-02-14 15:25:50');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:81:            $this->assertEquals($a[$i][1], $b->format($a[$i][0]));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:87:        $beginningMoment = new Moment('2015-06-14 20:46:22', 'Europe/Istanbul');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:88:        $endMoment = new Moment('2015-06-14 20:48:32', 'Europe/Istanbul');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:89:        $this->assertEquals('2 dakika sonra', $endMoment->from($beginningMoment)->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:90:        $this->assertEquals('2 dakika önce', $beginningMoment->from($endMoment)->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:95:        $past = new Moment('2016-01-03 16:17:07', 'Europe/Kiev');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:97:        $relative = $past->from('2016-01-03 16:34:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:98:        $this->assertEquals('17 dakika önce', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:100:        $relative = $past->from('2016-01-03 16:40:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:101:        $this->assertEquals('23 dakika önce', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:103:        $relative = $past->from('2016-01-03 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:104:        $this->assertEquals('13 dakika önce', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:109:        $past = new Moment('2016-04-10 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:110:        $this->assertEquals('Geçen hafta Pazar 16:30', $past->calendar(true, new Moment('2016-04-12')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:112:        $past = new Moment('2016-09-24 11:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:113:        $this->assertEquals('Geçen hafta Cumartesi 11:30', $past->calendar(true, new Moment('2016-09-26')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:115:        $past = new Moment('2016-04-11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:116:        $this->assertEquals('Geçen hafta Pazartesi', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:118:        $past = new Moment('2016-04-12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:119:        $this->assertEquals('Geçen hafta Salı', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:121:        $past = new Moment('2016-04-13');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:122:        $this->assertEquals('Geçen hafta Çarşamba', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:124:        $past = new Moment('2016-04-14');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:125:        $this->assertEquals('Geçen hafta Perşembe', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:127:        $past = new Moment('2016-04-15');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:128:        $this->assertEquals('Geçen hafta Cuma', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:130:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:131:        $this->assertEquals('Dün', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:133:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTurkishLocaleTest.php:134:        $this->assertEquals('Geçen hafta Cumartesi', $past->calendar(false, new Moment('2016-04-18')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:14:        $startingDate = '2016-01-29T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:29:            $this->assertEquals($weekdayNames[$moment->getWeekday()][0], $moment->getWeekdayNameShort(), 'weekday short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:30:            $this->assertEquals($weekdayNames[$moment->getWeekday()][1], $moment->getWeekdayNameLong(), 'weekday long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:32:            $moment->addDays(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:38:        $string = '2015-06-14 20:46:22';
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:40:        $this->assertEquals('14 червня', $moment->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:42:        $string = '2015-03-08T15:14:53-0500';
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:44:        $this->assertEquals('8 березня', $moment->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:49:        $moment = new Moment('2016-01-03 16:17:07', 'Europe/Kiev');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:50:        $this->assertEquals('3 грудня', $moment->subtractMonths(1)->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:55:        $startingDate = '2016-01-01T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:75:            $this->assertEquals($monthsNominative[$moment->format('n')], $moment->format('f'), 'month nominative failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:77:            $moment->addMonths(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:84:        $past = new Moment('2016-01-03 16:17:07', 'Europe/Kiev');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:86:        $relative = $past->from('2016-01-03 16:34:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:87:        $this->assertEquals('17 хвилин тому', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:89:        $relative = $past->from('2016-01-03 16:40:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:90:        $this->assertEquals('23 хвилини тому', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:92:        $relative = $past->from('2016-01-03 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:93:        $this->assertEquals('13 хвилин тому', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:98:        $past = new Moment('2016-04-10 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:99:        $this->assertEquals('неділя о 16:30', $past->calendar(true, new Moment('2016-04-12')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:101:        $past = new Moment('2016-09-24 11:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:102:        $this->assertEquals('субота об 11:30', $past->calendar(true, new Moment('2016-09-26')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:104:        $past = new Moment('2016-04-11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:105:        $this->assertEquals('понеділок', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:107:        $past = new Moment('2016-04-12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:108:        $this->assertEquals('вівторок', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:110:        $past = new Moment('2016-04-13');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:111:        $this->assertEquals('середа', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:113:        $past = new Moment('2016-04-14');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:114:        $this->assertEquals('четвер', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:116:        $past = new Moment('2016-04-15');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:117:        $this->assertEquals('п’ятниця', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:119:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:120:        $this->assertEquals('вчора', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:122:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentUkrainianLocaleTest.php:123:        $this->assertEquals('субота', $past->calendar(false, new Moment('2016-04-18')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:14:        $startingDate = '2016-01-29T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:29:            $this->assertEquals($weekdayNames[$moment->getWeekday()][0], $moment->getWeekdayNameShort(), 'weekday short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:30:            $this->assertEquals($weekdayNames[$moment->getWeekday()][1], $moment->getWeekdayNameLong(), 'weekday long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:32:            $moment->addDays(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:38:        $string = '2015-06-14 20:46:22';
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:40:        $this->assertEquals('14 июня', $moment->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:42:        $string = '2015-03-08T15:14:53-0500';
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:44:        $this->assertEquals('8 марта', $moment->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:49:        $moment = new Moment('2016-01-03 16:17:07', 'Europe/Moscow');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:50:        $this->assertEquals('3 декабря', $moment->subtractMonths(1)->format('j F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:55:        $startingDate = '2016-01-01T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:75:            $this->assertEquals($monthsNominative[$moment->format('n')], $moment->format('f'), 'month nominative failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:77:            $moment->addMonths(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:84:        $past = new Moment('2016-01-03 16:17:07', 'Europe/Moscow');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:86:        $relative = $past->from('2016-01-03 16:34:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:87:        $this->assertEquals('17 минут назад', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:89:        $relative = $past->from('2016-01-03 16:40:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:90:        $this->assertEquals('23 минуты назад', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:92:        $relative = $past->from('2016-01-03 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:93:        $this->assertEquals('13 минут назад', $relative->getRelative());
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:98:        $past = new Moment('2016-04-10 16:30:07');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:99:        $this->assertEquals('воскресенье в 16:30', $past->calendar(true, new Moment('2016-04-12')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:101:        $past = new Moment('2016-04-11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:102:        $this->assertEquals('понедельник', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:104:        $past = new Moment('2016-04-12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:105:        $this->assertEquals('вторник', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:107:        $past = new Moment('2016-04-13');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:108:        $this->assertEquals('среда', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:110:        $past = new Moment('2016-04-14');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:111:        $this->assertEquals('четверг', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:113:        $past = new Moment('2016-04-15');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:114:        $this->assertEquals('пятница', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:116:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:117:        $this->assertEquals('вчера', $past->calendar(false, new Moment('2016-04-17')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:119:        $past = new Moment('2016-04-16');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:120:        $this->assertEquals('суббота', $past->calendar(false, new Moment('2016-04-18')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:125:        $date = new Moment('2017-01-11 01:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:127:        $this->assertEquals('через несколько секунд', $date->from('2017-01-11 00:59:59')->getRelative(), 'seconds');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:128:        $this->assertEquals('через 2 минуты', $date->from('2017-01-11 00:58:00')->getRelative(), 'minutes');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:129:        $this->assertEquals('через 2 часа', $date->from('2017-01-10 23:00:00')->getRelative(), 'hours');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:130:        $this->assertEquals('через день', $date->from('2017-01-10 00:00:00')->getRelative(), 'days');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:131:        $this->assertEquals('через месяц', $date->from('2016-12-11 00:00:00')->getRelative(), 'month');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:132:        $this->assertEquals('через год', $date->from('2016-01-11 00:00:00')->getRelative(), 'year');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:138:        $date = new Moment('2017-01-01 01:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:139:        $this->assertEquals('1е января 2017', $date->format('jS F Y'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:141:        $date = new Moment('2017-01-12 01:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:142:        $this->assertEquals('12е января 2017', $date->format('jS F Y'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:144:        $date = new Moment('2017-01-23 01:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:145:        $this->assertEquals('23е января 2017', $date->format('jS F Y'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:147:        $date = new Moment('2017-01-25 01:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentRussianLocaleTest.php:148:        $this->assertEquals('25е января 2017', $date->format('jS F Y'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:14:        $startingDate = '2015-01-04T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:30:            $this->assertEquals($weekdayNames[$moment->getWeekday()][0], $moment->getWeekdayNameShort(), 'weekday short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:31:            $this->assertEquals($weekdayNames[$moment->getWeekday()][1], $moment->getWeekdayNameLong(), 'weekday long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:33:            $moment->addDays(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:39:        $startingDate = '2015-01-04T00:00:00+0000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:60:            $this->assertEquals($monthNames[$moment->format('n')][0], $moment->getMonthNameShort(), 'month short name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:61:            $this->assertEquals($monthNames[$moment->format('n')][1], $moment->getMonthNameLong(), 'month long name failed');
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:63:            $moment->addMonths(1);
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:71:        $string = '2015-06-14 20:46:22';
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:73:        $this->assertEquals('14. Juni', $moment->format('d. F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:75:        $string = '2015-03-08T15:14:53-0500';
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:77:        $this->assertEquals('08. März', $moment->format('d. F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:84:        $moment = new Moment('2016-01-03 16:17:07', 'Europe/Berlin');
./vendor/fightbulc/moment/tests/unit/Moment/MomentGermanLocaleTest.php:85:        $this->assertEquals('03. Dezember', $moment->subtractMonths(1)->format('d. F'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:9:        $data = '1923-12-31 12:30:00';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:11:        $this->assertEquals('1923-12-31T12:30:00+0000', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:13:        $data = '1923-12-31T12:30:00.000';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:15:        $this->assertEquals('1923-12-31T12:30:00+0000', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:17:        $data = '1923-12-31T12:30:00.123';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:19:        $this->assertEquals('1923-12-31T12:30:00+0000', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:21:        $data = '1923-12-31T12:30:00.123+02:00';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:23:        $this->assertEquals('1923-12-31T12:30:00+0200', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:25:        $data = '1923-12-31T12:30:00.123+0200';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:27:        $this->assertEquals('1923-12-31T12:30:00+0200', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:29:        $data = '1923-12-31T12:30:00.123Z';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:31:        $this->assertEquals('1923-12-31T12:30:00+0000', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:33:        $data = '1923-12-31T12:30:00.123Europe/Warsaw';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:35:        $this->assertEquals('1923-12-31T12:30:00+0100', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:37:        $data = '1923-12-31T12:30:00.123Europe/Warsaw';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:39:        $this->assertEquals('1923-12-31T12:30:00+0100', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:41:        $data = '1923-12-31T12:30:00.123UTC';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:43:        $this->assertEquals('1923-12-31T12:30:00+0000', $m->format());
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:49:        $this->assertFalse($m->isMoment('2012-12-01T12:00:00'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:50:        $this->assertTrue($m->isMoment(new Moment('2012-12-01T12:00:00')));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:55:        $m = new Moment('2017-01-01 00:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:56:        $from = $m->from('2016-01-01 00:00:00');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:58:        $this->assertEquals(-366, $from->getSeconds() / 60 / 60 / 24);
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:63:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:64:        $i = new Moment('2014-01-01T10:10:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:65:        $this->assertTrue($s->isBefore($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:66:        $this->assertFalse($i->isBefore($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:68:        $this->assertFalse($s->isBefore($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:69:        $this->assertFalse($i->isBefore($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:71:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:72:        $i = new Moment('2014-01-01T10:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:73:        $this->assertTrue($s->isBefore($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:74:        $this->assertFalse($i->isBefore($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:76:        $this->assertFalse($s->isBefore($i, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:77:        $this->assertFalse($i->isBefore($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:79:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:80:        $i = new Moment('2014-01-01T12:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:81:        $this->assertTrue($s->isBefore($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:82:        $this->assertFalse($i->isBefore($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:84:        $this->assertFalse($s->isBefore($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:85:        $this->assertFalse($i->isBefore($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:87:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:88:        $i = new Moment('2014-01-02T12:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:89:        $this->assertTrue($s->isBefore($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:90:        $this->assertFalse($i->isBefore($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:92:        $this->assertFalse($s->isBefore($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:93:        $this->assertFalse($i->isBefore($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:95:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:96:        $i = new Moment('2014-02-02T12:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:97:        $this->assertTrue($s->isBefore($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:98:        $this->assertFalse($i->isBefore($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:100:        $this->assertFalse($s->isBefore($i, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:101:        $this->assertFalse($i->isBefore($s, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:104:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:105:        $i = '2014-01-01T10:12:12';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:106:        $this->assertTrue($s->isBefore($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:108:        $s = '2014-01-01T10:10:11';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:109:        $i = new Moment('2014-01-01T10:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:111:        $this->assertFalse($i->isBefore($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:116:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:117:        $i = new Moment('2014-01-01T10:10:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:118:        $this->assertTrue($i->isAfter($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:119:        $this->assertFalse($s->isAfter($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:121:        $this->assertFalse($s->isAfter($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:122:        $this->assertFalse($i->isAfter($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:124:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:125:        $i = new Moment('2014-01-01T10:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:126:        $this->assertFalse($s->isAfter($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:127:        $this->assertTrue($i->isAfter($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:129:        $this->assertFalse($s->isAfter($i, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:130:        $this->assertFalse($i->isAfter($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:132:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:133:        $i = new Moment('2014-01-01T12:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:134:        $this->assertFalse($s->isAfter($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:135:        $this->assertTrue($i->isAfter($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:137:        $this->assertFalse($s->isAfter($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:138:        $this->assertFalse($i->isAfter($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:140:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:141:        $i = new Moment('2014-01-02T12:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:142:        $this->assertFalse($s->isAfter($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:143:        $this->assertTrue($i->isAfter($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:145:        $this->assertFalse($s->isAfter($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:146:        $this->assertFalse($i->isAfter($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:148:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:149:        $i = new Moment('2014-02-02T12:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:150:        $this->assertFalse($s->isAfter($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:151:        $this->assertTrue($i->isAfter($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:153:        $this->assertFalse($s->isAfter($i, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:154:        $this->assertFalse($i->isAfter($s, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:157:        $s = new Moment('2014-01-01T10:10:11');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:158:        $i = '2014-01-01T10:12:12';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:159:        $this->assertFalse($s->isAfter($i, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:161:        $s = '2014-01-01T10:10:11';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:162:        $i = new Moment('2014-01-01T10:12:12');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:164:        $this->assertTrue($i->isAfter($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:169:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:170:        $i = new Moment('2014-01-01T10:10:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:172:        $this->assertTrue($i->isAfter($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:173:        $this->assertFalse($s->isAfter($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:175:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:176:        $i = new Moment('2014-01-01T10:10:01+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:178:        $this->assertTrue($i->isAfter($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:179:        $this->assertFalse($s->isAfter($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:181:        $s = new Moment('2014-01-01T10:10:00CET');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:182:        $i = new Moment('2014-01-01T09:10:00UTC');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:184:        $this->assertFalse($i->isAfter($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:185:        $this->assertFalse($s->isAfter($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:187:        $s = new Moment('2014-01-01T10:10:00Europe/Warsaw');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:188:        $i = new Moment('2014-01-01T09:10:01UTC');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:190:        $this->assertTrue($i->isAfter($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:191:        $this->assertFalse($s->isAfter($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:196:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:197:        $i = new Moment('2014-01-01T10:10:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:199:        $this->assertFalse($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:200:        $this->assertFalse($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:202:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:203:        $i = new Moment('2014-01-01T10:10:00CET');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:204:        $this->assertTrue($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:206:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:207:        $i = new Moment('2014-01-01T10:10:00Europe/Warsaw');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:208:        $this->assertTrue($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:211:        $s = new Moment('2014-01-01T10:10:00CET');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:212:        $i = new Moment('2014-01-01T09:10:00UTC');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:213:        $this->assertTrue($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:215:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:216:        $i = '2014-01-01T10:10:00Europe/Warsaw';
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:217:        $this->assertTrue($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:221:        $s = new Moment('2014-01-01T10:10:00+0100');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:222:        $i = new Moment('2014-01-01T09:10:01+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:224:        $this->assertFalse($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:226:        $this->assertTrue($i->isSame($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:228:        $i = new Moment('2014-01-01T09:11:01+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:229:        $this->assertFalse($i->isSame($s, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:230:        $this->assertTrue($i->isSame($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:236:        $s = new Moment('2014-01-01T09:40:00+0030');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:237:        $i = new Moment('2014-01-01T09:10:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:239:        $this->assertTrue($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:240:        $this->assertTrue($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:242:        $s = new Moment('2014-01-01T10:05:00+0045');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:243:        $i = new Moment('2014-01-01T09:20:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:245:        $this->assertTrue($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:246:        $this->assertTrue($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:248:        $s = new Moment('2014-01-01T10:04:00+0045');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:249:        $i = new Moment('2014-01-01T09:20:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:251:        $this->assertTrue($i->isSame($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:252:        $this->assertTrue($s->isSame($i, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:257:        $s = new Moment('2014-01-01T00:14:00+0230');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:258:        $i = new Moment('2013-12-31T23:45:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:260:        $this->assertFalse($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:261:        $this->assertFalse($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:263:        $this->assertFalse($i->isSame($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:264:        $this->assertFalse($s->isSame($i, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:266:        $this->assertTrue($i->isSame($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:267:        $this->assertTrue($s->isSame($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:269:        $this->assertTrue($i->isSame($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:270:        $this->assertTrue($s->isSame($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:272:        $this->assertTrue($i->isSame($s, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:273:        $this->assertTrue($s->isSame($i, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:278:        $s = new Moment('2014-01-01T00:14:00+0230');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:279:        $i = new Moment('2013-12-30T23:45:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:281:        $this->assertFalse($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:282:        $this->assertFalse($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:284:        $this->assertFalse($i->isSame($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:285:        $this->assertFalse($s->isSame($i, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:287:        $this->assertFalse($i->isSame($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:288:        $this->assertFalse($s->isSame($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:290:        $this->assertTrue($i->isSame($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:291:        $this->assertTrue($s->isSame($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:293:        $this->assertTrue($i->isSame($s, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:294:        $this->assertTrue($s->isSame($i, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:299:        $s = new Moment('2014-01-01T00:14:00+0230');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:300:        $i = new Moment('2013-11-30T23:45:00+0000');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:302:        $this->assertFalse($i->isSame($s));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:303:        $this->assertFalse($s->isSame($i));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:305:        $this->assertFalse($i->isSame($s, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:306:        $this->assertFalse($s->isSame($i, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:308:        $this->assertFalse($i->isSame($s, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:309:        $this->assertFalse($s->isSame($i, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:311:        $this->assertFalse($i->isSame($s, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:312:        $this->assertFalse($s->isSame($i, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:314:        $this->assertTrue($i->isSame($s, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:315:        $this->assertTrue($s->isSame($i, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:320:        $l = new Moment('2014-01-01T10:00:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:321:        $r = new Moment('2014-01-01T12:00:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:323:        $n = $l->cloning();
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:324:        $this->assertTrue($n->isBetween($l, $r, true));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:325:        $this->assertFalse($n->isBetween($l, $r, false));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:327:        $n = $r->cloning();
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:328:        $this->assertTrue($n->isBetween($l, $r, true));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:329:        $this->assertFalse($n->isBetween($l, $r, false));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:332:        $l = new Moment('2014-01-01T10:30:30Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:333:        $r = new Moment('2014-01-01T12:30:30Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:335:        $n = new Moment('2014-01-01T10:30:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:336:        $this->assertFalse($n->isBetween($l, $r, true));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:337:        $n = new Moment('2014-01-01T12:30:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:338:        $this->assertFalse($n->isBetween($l, $r, true));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:340:        $n = new Moment('2014-01-01T10:30:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:341:        $this->assertTrue($n->isBetween($l, $r, true, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:342:        $n = new Moment('2014-01-01T12:30:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:343:        $this->assertTrue($n->isBetween($l, $r, true, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:346:        $n = new Moment('2014-01-01T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:347:        $this->assertFalse($n->isBetween($l, $r, true, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:348:        $n = new Moment('2014-01-01T12:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:349:        $this->assertFalse($n->isBetween($l, $r, true, 'minute'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:351:        $n = new Moment('2014-01-01T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:352:        $this->assertTrue($n->isBetween($l, $r, true, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:353:        $n = new Moment('2014-01-01T12:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:354:        $this->assertTrue($n->isBetween($l, $r, true, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:357:        $n = new Moment('2014-01-01T09:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:358:        $this->assertFalse($n->isBetween($l, $r, true, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:359:        $n = new Moment('2014-01-01T13:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:360:        $this->assertFalse($n->isBetween($l, $r, true, 'hour'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:362:        $n = new Moment('2014-01-01T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:363:        $this->assertTrue($n->isBetween($l, $r, true, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:364:        $n = new Moment('2014-01-01T12:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:365:        $this->assertTrue($n->isBetween($l, $r, true, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:368:        $l = new Moment('2014-01-10T10:30:30Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:369:        $r = new Moment('2014-01-20T12:30:30Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:371:        $n = new Moment('2014-01-09T09:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:372:        $this->assertFalse($n->isBetween($l, $r, true, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:373:        $n = new Moment('2014-01-21T13:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:374:        $this->assertFalse($n->isBetween($l, $r, true, 'day'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:376:        $n = new Moment('2014-01-09T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:377:        $this->assertTrue($n->isBetween($l, $r, true, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:378:        $n = new Moment('2014-01-21T12:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:379:        $this->assertTrue($n->isBetween($l, $r, true, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:382:        $l = new Moment('2014-04-10T10:30:30Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:383:        $r = new Moment('2015-08-20T12:30:30Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:385:        $n = new Moment('2014-03-09T09:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:386:        $this->assertFalse($n->isBetween($l, $r, true, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:387:        $n = new Moment('2015-09-21T13:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:388:        $this->assertFalse($n->isBetween($l, $r, true, 'month'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:390:        $n = new Moment('2014-03-09T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:391:        $this->assertTrue($n->isBetween($l, $r, true, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:392:        $n = new Moment('2015-09-21T12:31:45Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:393:        $this->assertTrue($n->isBetween($l, $r, true, 'year'));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:402:        $gb_start = new Moment('2015-04-27T00:00:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:403:        $gb_end = new Moment('2015-05-03T23:59:59Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:406:        $gb = new Moment('2015-04-28T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:408:        $this->assertTrue($gb->cloning()->startOf('week')->isSame($gb_start));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:409:        $this->assertTrue($gb->cloning()->endOf('week')->isSame($gb_end));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:412:        $gb = new Moment('2015-04-27T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:414:        $this->assertTrue($gb->cloning()->startOf('week')->isSame($gb_start));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:415:        $this->assertTrue($gb->cloning()->endOf('week')->isSame($gb_end));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:418:        $gb = new Moment('2015-05-03T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:420:        $this->assertTrue($gb->cloning()->startOf('week')->isSame($gb_start));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:421:        $this->assertTrue($gb->cloning()->endOf('week')->isSame($gb_end));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:428:        $us_start = new Moment('2015-04-26T00:00:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:429:        $us_end = new Moment('2015-05-02T23:59:59Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:432:        $us = new Moment('2015-04-28T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:434:        $this->assertTrue($us->cloning()->startOf('week')->isSame($us_start));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:435:        $this->assertTrue($us->cloning()->endOf('week')->isSame($us_end));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:438:        $us = new Moment('2015-04-26T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:440:        $this->assertTrue($us->cloning()->startOf('week')->isSame($us_start));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:441:        $this->assertTrue($us->cloning()->endOf('week')->isSame($us_end));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:444:        $us = new Moment('2015-05-02T10:29:00Z');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:446:        $this->assertTrue($us->cloning()->startOf('week')->isSame($us_start));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:447:        $this->assertTrue($us->cloning()->endOf('week')->isSame($us_end));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:452:        $origin = new Moment('1923-12-31 12:30:00', 'UTC', true);
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:454:        $this->assertNotSame($origin, $origin->addMonths(1));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:455:        $origin->setImmutableMode(false);
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:456:        $this->assertSame($origin, $origin->addMonths(1));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:457:        $origin->setImmutableMode(true);
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:458:        $this->assertNotSame($origin, $origin->addMonths(1));
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:466://        $now = new Moment('2016-01-31', 'Asia/Tokyo');
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:469://            ->subtractDays(1)
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:470://            ->addDays(1)
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:471://            ->startOf('day')
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:472://            ->cloning()
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:473://            ->startOf('month')
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:474://            ->addMonths(1)
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:475://            ->setDay('30')
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:476://            ->subtractMonths(1)
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:477://            ->endOf('month')
./vendor/fightbulc/moment/tests/unit/Moment/MomentTest.php:478://            ->format();
./vendor/fightbulc/moment/tests/build.xml:1:<?xml version="1.0" encoding="UTF-8"?>
./vendor/fightbulc/moment/tests/test.html:4:    <meta charset="utf-8">
./vendor/fightbulc/moment/tests/test.html:9:            font-family: "Helvetica Neue";
./vendor/fightbulc/moment/tests/test.html:16:            margin-bottom: 10px;
./vendor/fightbulc/moment/tests/test.html:159:        Reference date '2012-04-25T03:00:00' in 'CET'.
./vendor/fightbulc/moment/tests/test.php:10:$response['test01'] = $m->format();
./vendor/fightbulc/moment/tests/test.php:12:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:14:$m = new \Moment\Moment('2012-05-15T12:30:00', 'CET');
./vendor/fightbulc/moment/tests/test.php:15:$response['test02'] = $m->addHours(2)->format();
./vendor/fightbulc/moment/tests/test.php:17:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:19:$m = new \Moment\Moment('2012-05-15T12:30:00', 'CET');
./vendor/fightbulc/moment/tests/test.php:21:    ->subtractDays(7)
./vendor/fightbulc/moment/tests/test.php:22:    ->subtractMinutes(15)
./vendor/fightbulc/moment/tests/test.php:23:    ->format();
./vendor/fightbulc/moment/tests/test.php:25:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:27:$m = new \Moment\Moment('2013-02-01T07:00:00');
./vendor/fightbulc/moment/tests/test.php:28:$result = $m->from('2011-09-25T10:00:00');
./vendor/fightbulc/moment/tests/test.php:29:$response['test04.01'] = $result->getSeconds();
./vendor/fightbulc/moment/tests/test.php:30:$response['test04.02'] = $result->getMinutes();
./vendor/fightbulc/moment/tests/test.php:31:$response['test04.03'] = $result->getHours();
./vendor/fightbulc/moment/tests/test.php:32:$response['test04.04'] = $result->getDays();
./vendor/fightbulc/moment/tests/test.php:33:$response['test04.05'] = $result->getWeeks();
./vendor/fightbulc/moment/tests/test.php:34:$response['test04.06'] = $result->getMonths();
./vendor/fightbulc/moment/tests/test.php:35:$response['test04.07'] = $result->getYears();
./vendor/fightbulc/moment/tests/test.php:36:$response['test04.08'] = $result->getRelative();
./vendor/fightbulc/moment/tests/test.php:38:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:40:$m = new \Moment\Moment('2014-12-09T07:00:00');
./vendor/fightbulc/moment/tests/test.php:41:$result = $m->fromNow();
./vendor/fightbulc/moment/tests/test.php:42:$response['test05.00'] = $m->format('c');
./vendor/fightbulc/moment/tests/test.php:43:$response['test05.01'] = $result->getSeconds();
./vendor/fightbulc/moment/tests/test.php:44:$response['test05.02'] = $result->getMinutes();
./vendor/fightbulc/moment/tests/test.php:45:$response['test05.03'] = $result->getHours();
./vendor/fightbulc/moment/tests/test.php:46:$response['test05.04'] = $result->getDays();
./vendor/fightbulc/moment/tests/test.php:47:$response['test05.05'] = $result->getWeeks();
./vendor/fightbulc/moment/tests/test.php:48:$response['test05.06'] = $result->getMonths();
./vendor/fightbulc/moment/tests/test.php:49:$response['test05.07'] = $result->getYears();
./vendor/fightbulc/moment/tests/test.php:50:$response['test05.08'] = $result->getRelative();
./vendor/fightbulc/moment/tests/test.php:52:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:54:$m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');
./vendor/fightbulc/moment/tests/test.php:55:$response['test06.01'] = $m->format();
./vendor/fightbulc/moment/tests/test.php:56:$response['test06.02'] = $m->setTimezone('UTC')->format();
./vendor/fightbulc/moment/tests/test.php:58:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:60:$m = new \Moment\Moment('2012-04-25T15:00:00', 'CET');
./vendor/fightbulc/moment/tests/test.php:61:$response['test07.00'] = $m->format('l, dS F Y / H:i (e)');
./vendor/fightbulc/moment/tests/test.php:64:$response['test07.01'] = $m->format('LT', $momentJs);
./vendor/fightbulc/moment/tests/test.php:65:$m->setLocale('fr_FR');
./vendor/fightbulc/moment/tests/test.php:66:$response['test07.02'] = $m->format('LT', $momentJs);
./vendor/fightbulc/moment/tests/test.php:67:$response['test07.03'] = $m->format('L', $momentJs);
./vendor/fightbulc/moment/tests/test.php:68:$response['test07.04'] = $m->format('l', $momentJs);
./vendor/fightbulc/moment/tests/test.php:69:$response['test07.05'] = $m->format('LL', $momentJs);
./vendor/fightbulc/moment/tests/test.php:70:$response['test07.06'] = $m->format('ll', $momentJs);
./vendor/fightbulc/moment/tests/test.php:71:$response['test07.07'] = $m->format('LLL', $momentJs);
./vendor/fightbulc/moment/tests/test.php:72:$response['test07.08'] = $m->format('lll', $momentJs);
./vendor/fightbulc/moment/tests/test.php:73:$response['test07.09'] = $m->format('LLLL', $momentJs);
./vendor/fightbulc/moment/tests/test.php:74:$response['test07.10'] = $m->format('llll', $momentJs);
./vendor/fightbulc/moment/tests/test.php:76:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:78:$m = new \Moment\Moment('2013-10-23T10:00:00', 'CET');
./vendor/fightbulc/moment/tests/test.php:79:$momentPeriodVo = $m->getPeriod('week');
./vendor/fightbulc/moment/tests/test.php:82:    ->getRefDate()
./vendor/fightbulc/moment/tests/test.php:83:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:86:    ->getStartDate()
./vendor/fightbulc/moment/tests/test.php:87:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:90:    ->getEndDate()
./vendor/fightbulc/moment/tests/test.php:91:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:93:$response['test08.03'] = $momentPeriodVo->getInterval();
./vendor/fightbulc/moment/tests/test.php:95:$momentPeriodVo = $m->getPeriod('month');
./vendor/fightbulc/moment/tests/test.php:98:    ->getStartDate()
./vendor/fightbulc/moment/tests/test.php:99:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:102:    ->getEndDate()
./vendor/fightbulc/moment/tests/test.php:103:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:105:$response['test08.06'] = $momentPeriodVo->getInterval();
./vendor/fightbulc/moment/tests/test.php:107:$momentPeriodVo = $m->getPeriod('quarter');
./vendor/fightbulc/moment/tests/test.php:110:    ->getStartDate()
./vendor/fightbulc/moment/tests/test.php:111:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:114:    ->getEndDate()
./vendor/fightbulc/moment/tests/test.php:115:    ->format('Y-m-d');
./vendor/fightbulc/moment/tests/test.php:117:$response['test08.09'] = $momentPeriodVo->getInterval();
./vendor/fightbulc/moment/tests/test.php:119:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:121://$m = new \Moment\Moment('2012-04-25T03:00:00', 'CET');
./vendor/fightbulc/moment/tests/test.php:122:$response['test09.01'] = $m->format('l, F jS Y g:i A');
./vendor/fightbulc/moment/tests/test.php:123:$response['test09.02'] = $m->format('LLLL', new \Moment\CustomFormats\MomentJs());
./vendor/fightbulc/moment/tests/test.php:124:$response['test09.03'] = $m->format('WS [week of the year]');
./vendor/fightbulc/moment/tests/test.php:125:$response['test09.04'] = $m->format('Wo [week of the year]', new \Moment\CustomFormats\MomentJs());
./vendor/fightbulc/moment/tests/test.php:127:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:133:$response['test10.01'] = $m->subtractDays(6)->calendar();
./vendor/fightbulc/moment/tests/test.php:137:$response['test10.02'] = $m->subtractDays(1)->calendar();
./vendor/fightbulc/moment/tests/test.php:141:$response['test10.03'] = $m->calendar();
./vendor/fightbulc/moment/tests/test.php:145:$response['test10.04'] = $m->addDays(1)->calendar();
./vendor/fightbulc/moment/tests/test.php:148:$response['test10.05'] = $m->addDays(3)->calendar();
./vendor/fightbulc/moment/tests/test.php:152:$response['test10.06'] = $m->addDays(10)->calendar();
./vendor/fightbulc/moment/tests/test.php:154:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:159:$response['test11.00'] = $m->format();
./vendor/fightbulc/moment/tests/test.php:164:    $response['test11.0' . $index] = $m->startOf($period)->format();
./vendor/fightbulc/moment/tests/test.php:167:// ------------------------------------------
./vendor/fightbulc/moment/tests/test.php:172:$response['test12.00'] = $m->format();
./vendor/fightbulc/moment/tests/test.php:177:    $response['test12.0' . $index] = $m->endOf($period)->format();
./vendor/fightbulc/moment/tests/format.php:8:echo $m->format('U');
./vendor/psr/log/Psr/Log/LoggerAwareTrait.php:24:        $this->logger = $logger;
./vendor/psr/log/Psr/Log/AbstractLogger.php:8: * It simply delegates all log-level-specific methods to the `log` method to
./vendor/psr/log/Psr/Log/AbstractLogger.php:24:        $this->log(LogLevel::EMERGENCY, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:40:        $this->log(LogLevel::ALERT, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:55:        $this->log(LogLevel::CRITICAL, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:69:        $this->log(LogLevel::ERROR, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:85:        $this->log(LogLevel::WARNING, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:98:        $this->log(LogLevel::NOTICE, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:113:        $this->log(LogLevel::INFO, $message, $context);
./vendor/psr/log/Psr/Log/AbstractLogger.php:126:        $this->log(LogLevel::DEBUG, $message, $context);
./vendor/psr/log/Psr/Log/NullLogger.php:10: * is a good way to avoid littering your code with `if ($this->logger) { }`
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:26:     * Example ->error('Foo') would yield "error Foo".
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:34:        $this->assertInstanceOf('Psr\Log\LoggerInterface', $this->getLogger());
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:42:        $logger = $this->getLogger();
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:43:        $logger->{$level}($message, array('user' => 'Bob'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:44:        $logger->log($level, $message, array('user' => 'Bob'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:50:        $this->assertEquals($expected, $this->getLogs());
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:72:        $logger = $this->getLogger();
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:73:        $logger->log('invalid level', 'Foo');
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:78:        $logger = $this->getLogger();
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:79:        $logger->info('{Message {nothing} {user} {foo.bar} a}', array('user' => 'Bob', 'foo.bar' => 'Bar'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:82:        $this->assertEquals($expected, $this->getLogs());
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:88:            $dummy = $this->createPartialMock('Psr\Log\Test\DummyTest', array('__toString'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:90:            $dummy = $this->getMock('Psr\Log\Test\DummyTest', array('__toString'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:92:        $dummy->expects($this->once())
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:93:            ->method('__toString')
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:94:            ->will($this->returnValue('DUMMY'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:96:        $this->getLogger()->warning($dummy);
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:99:        $this->assertEquals($expected, $this->getLogs());
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:115:        $this->getLogger()->warning('Crazy context data', $context);
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:118:        $this->assertEquals($expected, $this->getLogs());
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:123:        $logger = $this->getLogger();
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:124:        $logger->warning('Random message', array('exception' => 'oops'));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:125:        $logger->critical('Uncaught Exception!', array('exception' => new \LogicException('Fail')));
./vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php:131:        $this->assertEquals($expected, $this->getLogs());
./vendor/psr/log/Psr/Log/LoggerInterface.php:17: * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
./vendor/psr/log/Psr/Log/LoggerAwareInterface.php:6: * Describes a logger-aware instance.
./vendor/psr/log/Psr/Log/LoggerTrait.php:9: * It simply delegates all log-level-specific methods to the `log` method to
./vendor/psr/log/Psr/Log/LoggerTrait.php:25:        $this->log(LogLevel::EMERGENCY, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:41:        $this->log(LogLevel::ALERT, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:56:        $this->log(LogLevel::CRITICAL, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:70:        $this->log(LogLevel::ERROR, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:86:        $this->log(LogLevel::WARNING, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:99:        $this->log(LogLevel::NOTICE, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:114:        $this->log(LogLevel::INFO, $message, $context);
./vendor/psr/log/Psr/Log/LoggerTrait.php:127:        $this->log(LogLevel::DEBUG, $message, $context);
./vendor/psr/log/composer.json:4:    "keywords": ["psr", "psr-3", "log"],
./vendor/psr/log/composer.json:5:    "homepage": "https://github.com/php-fig/log",
./vendor/psr/log/composer.json:9:            "name": "PHP-FIG",
./vendor/psr/log/composer.json:10:            "homepage": "http://www.php-fig.org/"
./vendor/psr/log/composer.json:17:        "psr-4": {
./vendor/psr/log/composer.json:22:        "branch-alias": {
./vendor/psr/log/composer.json:23:            "dev-master": "1.0.x-dev"
./vendor/psr/log/README.md:5:[PSR-3](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md).
./vendor/psr/log/README.md:11:-----
./vendor/psr/log/README.md:26:        $this->logger = $logger;
./vendor/psr/log/README.md:31:        if ($this->logger) {
./vendor/psr/log/README.md:32:            $this->logger->info('Doing work');
./vendor/psr/log/README.md:44:[specification text](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md)
./controller/activate.php:3:$data_array['memberID'] = $route->getParameter(2);    
./controller/activate.php:4:$data_array['active'] = $route->getParameter(3);    
./controller/activate.php:7:$data_array = $gump->sanitize($data_array); 
./controller/activate.php:12:$gump->validation_rules($validation_rules_array);
./controller/activate.php:18:$gump->filter_rules($filter_rules_array);
./controller/activate.php:19:$validated_data = $gump->run($data_array);
./controller/activate.php:23:  $error = $gump->get_readable_errors(false);
./controller/activate.php:24:  $msg->error($error);
./controller/activate.php:34:  if($userVeridator->isReady2Active($memberID, $active)){
./controller/activate.php:37:    Database::get()->update("members", $data_array, "memberID", $memberID); 
./controller/activate.php:38:    $msg->success("Your account is now active you may now log in.");
./controller/activate.php:44:    $msg->error("Your account could not be activated.");
./controller/activate.php:45:    echo $userVeridator->isReady2Active($memberID, $active);
./controller/thankyou.php:9:  if($order->status == 1){
./controller/thankyou.php:11:    $productKeys = $cart->getAllProductID();
./controller/category.php:75:                            echo date('d-m-Y', strtotime($row['topic_date']));
./controller/login.php:8:  $_POST = $gump->sanitize($_POST); 
./controller/login.php:13:  $gump->validation_rules($validation_rules_array);
./controller/login.php:18:  $gump->filter_rules($filter_rules_array);
./controller/login.php:19:  $validated_data = $gump->run($_POST);
./controller/login.php:22:    $error = $gump->get_readable_errors(false);
./controller/login.php:30:    $memberVeridator->loginVerification($username, $password);
./controller/login.php:31:    $error = $memberVeridator->getErrorArray();
./controller/login.php:40:      $result = Database::get()->query($table, $condition, $order_by, $fields, $limit, $data_array);
./controller/login.php:49:        $msg->error($e);
./controller/do_reset.php:6:  $_POST = $gump->sanitize($_POST); 
./controller/do_reset.php:13:  $gump->validation_rules($validation_rules_array);
./controller/do_reset.php:20:  $gump->filter_rules($filter_rules_array);
./controller/do_reset.php:22:  $validated_data = $gump->run($_POST);
./controller/do_reset.php:25:    $error = $gump->get_readable_errors(false);
./controller/do_reset.php:27:      $msg->error($e);
./controller/do_reset.php:37:    $userVeridator->isPasswordMatch($password, $passwordConfirm);
./controller/do_reset.php:38:    $error = $userVeridator->getErrorArray();
./controller/do_reset.php:50:    $result = Database::get()->query($table, $condition, $order_by, $fields, $limit, $data_array);
./controller/do_reset.php:52:        $msg->error('Invalid token provided, please use the link provided in the reset email.');
./controller/do_reset.php:56:        $msg->info('Your password has already been changed!');
./controller/do_reset.php:63:    $hashedpassword = $passwordObject->password_hash($password, PASSWORD_BCRYPT);
./controller/do_reset.php:72:      Database::get()->update($table, $data_array, $key, $id);
./controller/do_reset.php:75:      $msg->success('Password changed, you may now login.');
./controller/do_reset.php:81:        $error[] = $e->getMessage();
./controller/do_reset.php:86:        $msg->error($e);
./controller/register.php:6:  $_POST = $gump->sanitize($_POST); 
./controller/register.php:15:  $gump->validation_rules($validation_rules_array);
./controller/register.php:24:  $gump->filter_rules($filter_rules_array);
./controller/register.php:26:  $validated_data = $gump->run($_POST);
./controller/register.php:29:    $error = $gump->get_readable_errors(false);
./controller/register.php:38:    $memberVeridator->isPasswordMatch($password, $passwordConfirm);
./controller/register.php:39:    $memberVeridator->isUsernameDuplicate($username);
./controller/register.php:40:    $memberVeridator->isEmailDuplicate($email);
./controller/register.php:41:    $error = $memberVeridator->getErrorArray();
./controller/register.php:48:    $hashedpassword = $passwordObject->password_hash($password, PASSWORD_BCRYPT);
./controller/register.php:54:    $member_signup_date = date('Y-m-d h:i:s');
./controller/register.php:68:      Database::get()->insert($table, $data_array);
./controller/register.php:69:      $id = Database::get()->getLastId();
./controller/register.php:79:        $mail->setFrom(Config::MAIL_FROM, Config::MAIL_FROM_NAME);
./controller/register.php:80:        $mail->addAddress($email);
./controller/register.php:81:        $mail->subject($subject);
./controller/register.php:82:        $mail->body($body);
./controller/register.php:83:        if($mail->send()){
./controller/register.php:84:        $msg->success('Registration successful, please check your email to activate your account.');
./controller/register.php:86:        $msg->error('Sorry, unable to send Email.');
./controller/register.php:95:        $error[] = $e->getMessage();
./controller/register.php:101:        $msg->error($e);
./controller/reply.php:25:                VALUES ('" . $_POST['reply-content'] . "',
./controller/reset.php:6:$verify_array['resetToken'] = $route->getParameter(2);
./controller/reset.php:9:$verify_array = $gump->sanitize($verify_array); 
./controller/reset.php:13:$gump->validation_rules($validation_rules_array);
./controller/reset.php:17:$gump->filter_rules($filter_rules_array);
./controller/reset.php:18:$validated_data = $gump->run($verify_array);
./controller/reset.php:21:  $msg->error('Invalid token provided, please use the link provided in the reset email.');
./controller/reset.php:35:  $result = Database::get()->query($table, $condition, $order_by, $fields, $limit, $data_array);
./controller/reset.php:37:    $msg->error('Invalid token provided, please use the link provided in the reset email.');
./controller/reset.php:41:    $msg->info('Your password has already been changed!');
./controller/create_topic.php:27:        $result = $dbconn->query($sql);
./controller/create_topic.php:31:            //the query failed, uh-oh :-(
./controller/create_topic.php:36:            if(($result->num_rows) == 0)
./controller/create_topic.php:56:                    while($row = $result->fetch_assoc())
./controller/create_cat.php:21:$result = $dbconn->query($sql);
./controller/create_cat.php:29:			if($result->num_rows == 0)
./controller/create_cat.php:42:					while($row = $result->fetch_assoc())
./controller/create_cat.php:49:															echo '<a href="topic.php?id=">Topic subject</a> at 10-10';
./controller/create_cat.php:65:    $result = $dbconn->query($sql);
./controller/forumTutorial/footer.php:2:</div><!-- content -->
./controller/forumTutorial/footer.php:3:</div><!-- wrapper -->
./controller/forumTutorial/category.php:74:                            echo date('d-m-Y', strtotime($row['topic_date']));
Binary file ./controller/forumTutorial/.git/objects/e0/5d7858e4da1961a07f462535a77793fe1a227f matches
Binary file ./controller/forumTutorial/.git/objects/53/426359c8a5b588d2c70ab8d3f4e553d590b4cb matches
Binary file ./controller/forumTutorial/.git/objects/cf/b0bc945eed646cb591e67e1c8fb8079cec7d54 matches
./controller/forumTutorial/.git/logs/HEAD:1:0000000000000000000000000000000000000000 5f333a014ae1650386c85fdd96d4a0d67586e6f7 dio-ub <hcgcarry@gmail.com> 1535118151 +0800	commit (initial): fucku
./controller/forumTutorial/.git/logs/refs/remotes/origin/master:1:0000000000000000000000000000000000000000 5f333a014ae1650386c85fdd96d4a0d67586e6f7 dio-ub <hcgcarry@gmail.com> 1535118438 +0800	update by push
./controller/forumTutorial/.git/logs/refs/heads/master:1:0000000000000000000000000000000000000000 5f333a014ae1650386c85fdd96d4a0d67586e6f7 dio-ub <hcgcarry@gmail.com> 1535118151 +0800	commit (initial): fucku
./controller/forumTutorial/.git/hooks/pre-push.sample:5:# pushed.  If this script exits with a non-zero status nothing will be pushed.
./controller/forumTutorial/.git/hooks/pre-push.sample:9:# $1 -- Name of the remote to which the push is being done
./controller/forumTutorial/.git/hooks/pre-push.sample:10:# $2 -- URL to which the push is being done
./controller/forumTutorial/.git/hooks/pre-push.sample:44:		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
./controller/forumTutorial/.git/hooks/pre-push.sample:45:		if [ -n "$commit" ]
./controller/forumTutorial/.git/hooks/post-update.sample:6:# To enable this hook, rename this file to "post-update".
./controller/forumTutorial/.git/hooks/post-update.sample:8:exec git update-server-info
./controller/forumTutorial/.git/hooks/applypatch-msg.sample:4:# applypatch from an e-mail message.
./controller/forumTutorial/.git/hooks/applypatch-msg.sample:6:# The hook should exit with non-zero status after issuing an
./controller/forumTutorial/.git/hooks/applypatch-msg.sample:10:# To enable this hook, rename this file to "applypatch-msg".
./controller/forumTutorial/.git/hooks/applypatch-msg.sample:12:. git-sh-setup
./controller/forumTutorial/.git/hooks/applypatch-msg.sample:13:commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
./controller/forumTutorial/.git/hooks/applypatch-msg.sample:14:test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
./controller/forumTutorial/.git/hooks/pre-rebase.sample:5:# The "pre-rebase" hook is run just before "git rebase" starts doing
./controller/forumTutorial/.git/hooks/pre-rebase.sample:7:# non-zero status.
./controller/forumTutorial/.git/hooks/pre-rebase.sample:11:# $1 -- the upstream the series was forked from.
./controller/forumTutorial/.git/hooks/pre-rebase.sample:12:# $2 -- the branch being rebased (or empty when rebasing the current branch).
./controller/forumTutorial/.git/hooks/pre-rebase.sample:24:	topic=`git symbolic-ref HEAD` ||
./controller/forumTutorial/.git/hooks/pre-rebase.sample:40:git show-ref -q "$topic" || {
./controller/forumTutorial/.git/hooks/pre-rebase.sample:46:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
./controller/forumTutorial/.git/hooks/pre-rebase.sample:47:if test -z "$not_in_master"
./controller/forumTutorial/.git/hooks/pre-rebase.sample:54:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
./controller/forumTutorial/.git/hooks/pre-rebase.sample:55:only_next_2=`git rev-list ^master           ${publish} | sort`
./controller/forumTutorial/.git/hooks/pre-rebase.sample:58:	not_in_topic=`git rev-list "^$topic" master`
./controller/forumTutorial/.git/hooks/pre-rebase.sample:59:	if test -z "$not_in_topic"
./controller/forumTutorial/.git/hooks/pre-rebase.sample:61:		echo >&2 "$topic is already up-to-date with master"
./controller/forumTutorial/.git/hooks/pre-rebase.sample:67:	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
./controller/forumTutorial/.git/hooks/pre-rebase.sample:68:	/usr/bin/perl -e '
./controller/forumTutorial/.git/hooks/pre-rebase.sample:72:			/^([0-9a-f]+) /;
./controller/forumTutorial/.git/hooks/pre-rebase.sample:76:				/^([0-9a-f]+) (.*)$/;
./controller/forumTutorial/.git/hooks/pre-rebase.sample:79:			if (!exists $not_in_next{$elem->[0]}) {
./controller/forumTutorial/.git/hooks/pre-rebase.sample:84:				print STDERR " $elem->[1]\n";
./controller/forumTutorial/.git/hooks/pre-rebase.sample:125:    build on top of it -- other people may already want to
./controller/forumTutorial/.git/hooks/pre-rebase.sample:133:		   o---o---o---o---o---o---o---o---o---o "next"
./controller/forumTutorial/.git/hooks/pre-rebase.sample:135:		 /   a---a---b A     /           /
./controller/forumTutorial/.git/hooks/pre-rebase.sample:137:	       /   /   c---c---c---c B         /
./controller/forumTutorial/.git/hooks/pre-rebase.sample:139:	     /   /   /   b---b C     \       /
./controller/forumTutorial/.git/hooks/pre-rebase.sample:141:    ---o---o---o---o---o---o---o---o---o---o---o "master"
./controller/forumTutorial/.git/hooks/pre-rebase.sample:158:	git rev-list ^master ^topic next
./controller/forumTutorial/.git/hooks/pre-rebase.sample:159:	git rev-list ^master        next
./controller/forumTutorial/.git/hooks/pre-rebase.sample:165:	git rev-list master..topic
./controller/forumTutorial/.git/hooks/update.sample:4:# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
./controller/forumTutorial/.git/hooks/update.sample:9:# ------
./controller/forumTutorial/.git/hooks/update.sample:27:# --- Command line
./controller/forumTutorial/.git/hooks/update.sample:32:# --- Safety check
./controller/forumTutorial/.git/hooks/update.sample:33:if [ -z "$GIT_DIR" ]; then
./controller/forumTutorial/.git/hooks/update.sample:40:if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
./controller/forumTutorial/.git/hooks/update.sample:45:# --- Config
./controller/forumTutorial/.git/hooks/update.sample:46:allowunannotated=$(git config --bool hooks.allowunannotated)
./controller/forumTutorial/.git/hooks/update.sample:47:allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
./controller/forumTutorial/.git/hooks/update.sample:48:denycreatebranch=$(git config --bool hooks.denycreatebranch)
./controller/forumTutorial/.git/hooks/update.sample:49:allowdeletetag=$(git config --bool hooks.allowdeletetag)
./controller/forumTutorial/.git/hooks/update.sample:50:allowmodifytag=$(git config --bool hooks.allowmodifytag)
./controller/forumTutorial/.git/hooks/update.sample:53:projectdesc=$(sed -e '1q' "$GIT_DIR/description")
./controller/forumTutorial/.git/hooks/update.sample:61:# --- Check types
./controller/forumTutorial/.git/hooks/update.sample:67:	newrev_type=$(git cat-file -t $newrev)
./controller/forumTutorial/.git/hooks/update.sample:72:		# un-annotated tag
./controller/forumTutorial/.git/hooks/update.sample:75:			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
./controller/forumTutorial/.git/hooks/update.sample:76:			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
./controller/forumTutorial/.git/hooks/update.sample:89:		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
./controller/forumTutorial/.git/hooks/update.sample:98:		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
./controller/forumTutorial/.git/hooks/update.sample:127:# --- Finished
./controller/forumTutorial/.git/hooks/commit-msg.sample:5:# that has the commit message.  The hook should exit with non-zero
./controller/forumTutorial/.git/hooks/commit-msg.sample:9:# To enable this hook, rename this file to "commit-msg".
./controller/forumTutorial/.git/hooks/commit-msg.sample:11:# Uncomment the below to add a Signed-off-by line to the message.
./controller/forumTutorial/.git/hooks/commit-msg.sample:12:# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
./controller/forumTutorial/.git/hooks/commit-msg.sample:15:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
./controller/forumTutorial/.git/hooks/commit-msg.sample:16:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
./controller/forumTutorial/.git/hooks/commit-msg.sample:18:# This example catches duplicate Signed-off-by lines.
./controller/forumTutorial/.git/hooks/commit-msg.sample:20:test "" = "$(grep '^Signed-off-by: ' "$1" |
./controller/forumTutorial/.git/hooks/commit-msg.sample:21:	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
./controller/forumTutorial/.git/hooks/commit-msg.sample:22:	echo >&2 Duplicate Signed-off-by lines.
./controller/forumTutorial/.git/hooks/pre-applypatch.sample:4:# by applypatch from an e-mail message.
./controller/forumTutorial/.git/hooks/pre-applypatch.sample:6:# The hook should exit with non-zero status after issuing an
./controller/forumTutorial/.git/hooks/pre-applypatch.sample:9:# To enable this hook, rename this file to "pre-applypatch".
./controller/forumTutorial/.git/hooks/pre-applypatch.sample:11:. git-sh-setup
./controller/forumTutorial/.git/hooks/pre-applypatch.sample:12:precommit="$(git rev-parse --git-path hooks/pre-commit)"
./controller/forumTutorial/.git/hooks/pre-applypatch.sample:13:test -x "$precommit" && exec "$precommit" ${1+"$@"}
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:7:# message file.  If the hook fails with a non-zero status,
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:10:# To enable this hook, rename this file to "prepare-commit-msg".
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:15:# The second includes the output of "git diff --name-status -r"
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:17:# commented because it doesn't cope with --amend or with squashed
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:20:# The third example adds a Signed-off-by line to the message, that can
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:25:    /usr/bin/perl -i.bak -ne 's/^/# /, s/^# #/#/ if /^Conflicts/ .. /#/; print' "$1" ;;
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:28:#   /usr/bin/perl -i.bak -pe '
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:29:#      print "\n" . `git diff --cached --name-status -r`
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:35:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
./controller/forumTutorial/.git/hooks/prepare-commit-msg.sample:36:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
./controller/forumTutorial/.git/hooks/pre-commit.sample:5:# exit with non-zero status after issuing an appropriate message if
./controller/forumTutorial/.git/hooks/pre-commit.sample:8:# To enable this hook, rename this file to "pre-commit".
./controller/forumTutorial/.git/hooks/pre-commit.sample:10:if git rev-parse --verify HEAD >/dev/null 2>&1
./controller/forumTutorial/.git/hooks/pre-commit.sample:18:# If you want to allow non-ASCII filenames set this variable to true.
./controller/forumTutorial/.git/hooks/pre-commit.sample:19:allownonascii=$(git config --bool hooks.allownonascii)
./controller/forumTutorial/.git/hooks/pre-commit.sample:24:# Cross platform projects tend to avoid non-ASCII filenames; prevent
./controller/forumTutorial/.git/hooks/pre-commit.sample:31:	test $(git diff --cached --name-only --diff-filter=A -z $against |
./controller/forumTutorial/.git/hooks/pre-commit.sample:32:	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
./controller/forumTutorial/.git/hooks/pre-commit.sample:35:Error: Attempt to add a non-ASCII file name.
./controller/forumTutorial/.git/hooks/pre-commit.sample:49:exec git diff-index --check --cached $against --
./controller/forumTutorial/.git/info/exclude:1:# git ls-files --others --exclude-from=.git/info/exclude
./controller/forumTutorial/reply.php:25:                VALUES ('" . $_POST['reply-content'] . "',
./controller/forumTutorial/header.php:1:<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
./controller/forumTutorial/header.php:2:"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
./controller/forumTutorial/header.php:5:    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
./controller/forumTutorial/header.php:8:    <title>PHP-MySQL forum</title>
./controller/forumTutorial/header.php:15:        <a class="item" href="/forum/index.php">Home</a> -
./controller/forumTutorial/header.php:16:        <a class="item" href="/forum/create_topic.php">Create a topic</a> -
./controller/forumTutorial/create_topic.php:27:        $result = $dbconn->query($sql);
./controller/forumTutorial/create_topic.php:31:            //the query failed, uh-oh :-(
./controller/forumTutorial/create_topic.php:36:            if(($result->num_rows) == 0)
./controller/forumTutorial/create_topic.php:56:                    while($row = $result->fetch_assoc())
./controller/forumTutorial/create_cat.php:21:$result = $dbconn->query($sql);
./controller/forumTutorial/create_cat.php:29:			if($result->num_rows == 0)
./controller/forumTutorial/create_cat.php:42:					while($row = $result->fetch_assoc())
./controller/forumTutorial/create_cat.php:49:															echo '<a href="topic.php?id=">Topic subject</a> at 10-10';
./controller/forumTutorial/create_cat.php:65:    $result = $dbconn->query($sql);
./controller/forumTutorial/signup.php:16:        E-mail: <input type="email" name="user_email"><br>
./controller/forumTutorial/signup.php:61:        echo 'Uh-oh.. a couple of fields are not filled in correctly..';
./controller/forumTutorial/signup.php:81:        $result = $dbconn->query($sql);
./controller/forumTutorial/signup.php:90:            echo 'Successfully registered. You can now <a href="signin.php">sign in</a> and start posting! :-)';
./controller/forumTutorial/signin.php:47:            echo 'Uh-oh.. a couple of fields are not filled in correctly..';
./controller/forumTutorial/signin.php:71:            $result = $dbconn->query($sql);
./controller/forumTutorial/signin.php:83:                if($result->num_rows == 0)
./controller/forumTutorial/signin.php:93:                    while($row = $result->fetch_assoc())
./controller/forumTutorial/style.css:2:    background-color: #4E4E4E;
./controller/forumTutorial/style.css:3:    text-align: center;         /* make sure IE centers the page too */
./controller/forumTutorial/style.css:12:    background-color: #fff;
./controller/forumTutorial/style.css:15:    font-family: Arial;
./controller/forumTutorial/style.css:17:    text-align: left;
./controller/forumTutorial/style.css:24:    border-bottom: none;        /* avoid a double border */
./controller/forumTutorial/style.css:29:    background-color: #FFF;
./controller/forumTutorial/style.css:30:    text-align: left;
./controller/forumTutorial/style.css:31:    font-size: 85%;
./controller/forumTutorial/style.css:35:    background-color: #009FC1;
./controller/forumTutorial/style.css:39:    background-color: #fff;
./controller/forumTutorial/style.css:50:    border-collapse: collapse;
./controller/forumTutorial/style.css:60:    text-decoration: none;
./controller/forumTutorial/style.css:64:    background-color: #B40E1F;
./controller/forumTutorial/style.css:74:    font-family: Arial;
./controller/forumTutorial/style.css:82:    background-color: #00728B;
./controller/forumTutorial/style.css:85:    font-family: Arial;
./controller/forumTutorial/style.css:87:    text-decoration: none;
./controller/forumTutorial/style.css:99:    font-size: 75%;
./controller/forumTutorial/style.css:103:    font-size: 65%;
./controller/forumTutorial/style.css:107:.topic-post {
./controller/forumTutorial/style.css:112:.post-content {
./controller/create_category.php:4:  $_POST = $gump->sanitize($_POST); 
./controller/create_category.php:9:  $gump->validation_rules($validation_rules_array);
./controller/create_category.php:14:  $gump->filter_rules($filter_rules_array);
./controller/create_category.php:16:  $validated_data = $gump->run($_POST);
./controller/create_category.php:19:    $error = $gump->get_readable_errors(false);
./controller/create_category.php:28:    $memberVeridator->isPasswordMatch($password, $passwordConfirm);
./controller/create_category.php:29:    $memberVeridator->isUsernameDuplicate($username);
./controller/create_category.php:30:    $memberVeridator->isEmailDuplicate($email);
./controller/create_category.php:31:    $error = $memberVeridator->getErrorArray();
./controller/create_category.php:38:    $hashedpassword = $passwordObject->password_hash($password, PASSWORD_BCRYPT);
./controller/create_category.php:44:    $member_signup_date = date('Y-m-d h:i:s');
./controller/create_category.php:58:      Database::get()->insert($table, $data_array);
./controller/create_category.php:59:      $id = Database::get()->getLastId();
./controller/create_category.php:69:        $mail->setFrom(Config::MAIL_FROM, Config::MAIL_FROM_NAME);
./controller/create_category.php:70:        $mail->addAddress($email);
./controller/create_category.php:71:        $mail->subject($subject);
./controller/create_category.php:72:        $mail->body($body);
./controller/create_category.php:73:        if($mail->send()){
./controller/create_category.php:74:        $msg->success('Registration successful, please check your email to activate your account.');
./controller/create_category.php:76:        $msg->error('Sorry, unable to send Email.');
./controller/create_category.php:85:        $error[] = $e->getMessage();
./controller/create_category.php:91:        $msg->error($e);
./controller/forget.php:11:  if($postVeridator->isValidUserName($username) AND $postVeridator->isValidEmail($email)) { // 信箱是否合法 if($userVeridator->isEmailDuplicate($email)) { // 信箱是否存在
./controller/forget.php:13:        $memberID=$userAction->getMemberID($username,$email);
./controller/forget.php:17:        $resetToken = $userAction->getResetToken($memberID); // 創建 Token 並存到資料庫
./controller/forget.php:18:        $userAction->sendResetEmail($resetToken,$email); // 用 Token 組出重置信件並寄出
./controller/forget.php:20:        $userAction->redir2login(); // 重導向登入頁並顯示成功
./controller/forget.php:23:        $error[] = $e->getMessage();
./controller/forget.php:24:        $log->error(__FILE__, json_encode($error));
./controller/forget.php:29:    $log->warning(__FILE__, 'WRONG EMAIL or username: ' .$email);
./controller/forget.php:31:    $msg->error('wrong username or email');
./controller/logout.php:10:$msg->success('Logout Successful.');
./.htaccess:4:    RewriteCond %{REQUEST_FILENAME} !-f
./.htaccess:5:    RewriteCond %{REQUEST_FILENAME} !-d
./view/body/upsell.php:3:	  <div class="col-xs-10 col-sm-10 col-lg-8 mx-auto py-3 borderShadow my-sm-4">
./view/body/upsell.php:4:    <h2 class="py-2 mx-auto">整包圖庫 3 折入手</h2>
./view/body/upsell.php:5:      <div class="card mb-3">
./view/body/upsell.php:6:        <img class="card-img-top" src="images/article/26853157_138111770193938_1490175646_o.jpg" alt="Card image cap">
./view/body/upsell.php:8:      <div class="card-body">
./view/body/upsell.php:9:        <p class="card-text">
./view/body/upsell.php:10:          <span style="text-decoration: line-through;">原價 TWD $ 500 元</span>, 
./view/body/upsell.php:11:          <span style="color: red; font-size: 1.5em;"> 特價只要 TWD $150 元</span>
./view/body/upsell.php:13:            <img class="img-fluid mx-auto" src="images/common/upsell-btn.png">
./view/body/upsell.php:18:        <a href="<?=Config::BASE_URL?>do_checkout" class="btn btn-outline-secondary mx-auto">不用了，謝謝</a>
./view/body/thankyou.php:3:        <div class="col-sm-10 col-lg-6 mx-auto pt-3">
./view/body/thankyou.php:4:            <h1 class="py-md-3">感謝您的支持！</h1>
./view/body/thankyou.php:5:            <div class="card mb-3">
./view/body/thankyou.php:6:                <img class="card-img-top" src="images/article/26804015_138111763527272_80447334_n.jpg" alt="Card image cap">
./view/body/thankyou.php:7:                <div class="card-body">
./view/body/thankyou.php:8:                    <a href="#" class="btn btn-primary btn-block">下載</a>
./view/body/thankyou.php:12:            <div class="card mb-3">
./view/body/thankyou.php:13:                <img class="card-img-top" src="images/article/26853157_138111770193938_1490175646_o.jpg" alt="Card image cap">
./view/body/thankyou.php:14:                <div class="card-body">
./view/body/thankyou.php:15:                    <a href="#" class="btn btn-primary btn-block">下載</a>
./view/body/login.php:3:	  <div class="col-sm-10 col-lg-6 mx-auto pt-3">
./view/body/login.php:5:	  <div class="card mb-3">
./view/body/login.php:6:        <div class="card-body">
./view/body/login.php:7:          <p class="card-text">
./view/body/login.php:13:				<?php if ($msg->hasMessages()) $msg->display(); ?>
./view/body/login.php:15:				<div class="form-group">
./view/body/login.php:16:					<input type="text" name="username" id="username" class="form-control input-lg" placeholder="User Name" value="<?php if($msg->hasErrors()){ echo htmlspecialchars($_POST['username'], ENT_QUOTES); } ?>" tabindex="1">
./view/body/login.php:19:				<div class="form-group">
./view/body/login.php:20:					<input type="password" name="password" id="password" class="form-control input-lg" placeholder="Password" tabindex="3">
./view/body/login.php:24:					<div class="col-xs-9 col-sm-9 col-md-9">
./view/body/login.php:31:					<div class="col-xs-6 col-md-6"><input type="submit" name="submit" value="Login" class="btn btn-primary btn-block btn-lg" tabindex="5"></div>
./view/body/register.php:3:      <div class="col-sm-10 col-lg-6 mx-auto pt-3">
./view/body/register.php:6:          <div class="card mb-3">
./view/body/register.php:7:            <div class="card-body">
./view/body/register.php:13:                <?php if ($msg->hasMessages()){ $msg->display(); $error=1; } ?>
./view/body/register.php:14:                <div class="form-group">
./view/body/register.php:16:class="form-control input-lg" placeholder="nickname" value="<?php if(isset($error)){ echo htmlspecialchars($_POST['nickname'], ENT_QUOTES); } ?>" tabindex="1">
./view/body/register.php:19:                <div class="form-group">
./view/body/register.php:20:                  <input type="text" name="username" id="username" class="form-control input-lg" placeholder="User Name" value="<?php if(isset($error)){ echo htmlspecialchars($_POST['username'], ENT_QUOTES); } ?>" tabindex="1">
./view/body/register.php:24:                <div class="form-group">
./view/body/register.php:25:                  <input type="email" name="email" id="email" class="form-control input-lg" placeholder="Email Address" value="<?php if(isset($error)){ echo htmlspecialchars($_POST['email'], ENT_QUOTES); } ?>" tabindex="2">
./view/body/register.php:28:                  <div class="col-xs-6 col-sm-6 col-md-6">
./view/body/register.php:29:                    <div class="form-group">
./view/body/register.php:30:                      <input type="password" name="password" id="password" class="form-control input-lg" placeholder="Password" tabindex="3">
./view/body/register.php:34:                  <div class="col-xs-6 col-sm-6 col-md-6">
./view/body/register.php:35:                    <div class="form-group">
./view/body/register.php:36:                      <input type="password" name="passwordConfirm" id="passwordConfirm" class="form-control input-lg" placeholder="Confirm Password" tabindex="4">
./view/body/register.php:42:                  <div class="col-xs-6 col-md-6"><input type="submit" name="submit" value="Register" class="btn btn-primary btn-block btn-lg" tabindex="5"></div>
./view/body/index.php:1:        <img class="card-img-top" src="/forum/pictures/fatezero.png" alt="Card image cap">
./view/body/reset.php:3:	    <div class="mx-auto col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3">
./view/body/reset.php:7:					<?php if ($msg->hasMessages()) $msg->display(); ?>
./view/body/reset.php:9:						<div class="col-xs-6 col-sm-6 col-md-6">
./view/body/reset.php:10:							<div class="form-group">
./view/body/reset.php:11:								<input type="password" name="password" id="password" class="form-control input-lg" placeholder="Password" tabindex="1">
./view/body/reset.php:14:						<div class="col-xs-6 col-sm-6 col-md-6">
./view/body/reset.php:15:							<div class="form-group">
./view/body/reset.php:16:								<input type="password" name="passwordConfirm" id="passwordConfirm" class="form-control input-lg" placeholder="Confirm Password" tabindex="2">
./view/body/reset.php:23:						<div class="col-xs-6 col-md-6">
./view/body/reset.php:25:						<input type="submit" name="submit" value="Change Password" class="btn btn-primary btn-block btn-lg" tabindex="3">
./view/body/fail.php:3:	  <div class="col-xs-10 col-sm-10 col-lg-8 mx-auto py-3 borderShadow my-sm-4">
./view/body/fail.php:4:    <h2 class="py-2 mx-auto">糟糕</h2>
./view/body/fail.php:5:      <div class="card-body">
./view/body/fail.php:6:        <p class="card-text">
./view/body/fail.php:11:        <a href="<?=Config::BASE_URL?>upsell" class="btn btn-outline-primary mx-auto">再次出發</a>
./view/body/forget.php:4:	  	<div class="col-sm-10 col-lg-6 mx-auto pt-3">
./view/body/forget.php:6:	  		<div class="card mb-3">
./view/body/forget.php:7:			  <div class="card-body">
./view/body/forget.php:8:          		<p class="card-text">
./view/body/forget.php:12:						<?php if ($msg->hasMessages()) $msg->display(); ?>
./view/body/forget.php:13:						<div class="form-group">
./view/body/forget.php:14:							<input type="text" name="username" id="username" class="form-control input-lg" placeholder="username" value="" tabindex="1">
./view/body/forget.php:16:						<div class="form-group">
./view/body/forget.php:17:							<input type="email" name="email" id="email" class="form-control input-lg" placeholder="Email" value="" tabindex="1">
./view/body/forget.php:21:							<div class="col-xs-6 col-md-6"><input type="submit" name="submit" value="Sent Reset Link" class="btn btn-primary btn-block btn-lg" tabindex="2"></div>
./view/footer/default.php:1:<!-- 這裏通常會放 footer 頁尾的資料 -->
./view/footer/default.php:2:<!-- 這裏通常會放 footer 頁尾的資料 -->
./view/footer/default.php:3:<!-- 這裏通常會放 footer 頁尾的資料 -->
./view/footer/default.php:4:<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
./view/footer/default.php:5:<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
./view/footer/default.php:6:<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/js/bootstrap.min.js" integrity="sha384-a5N7Y/aK3qNeh15eJKGWxsqtnX/wWdSZSKp+81YjTmS15nvnvxKHuzaWwXHDli+4" crossorigin="anonymous"></script>
./view/header/isLogin.php:3:    <meta charset="utf-8">
./view/header/isLogin.php:5:    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
./view/header/isLogin.php:6:    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">
./view/header/isLogin.php:7:      <!-- Latest compiled and minified CSS -->
./view/header/isLogin.php:13:<nav class="navbar navbar-expand-sm bg-dark navbar-dark sticky-top">
./view/header/isLogin.php:14:  <a class="navbar-brand" href="<?=Config::BASE_URL?>">
./view/header/isLogin.php:17:  <ul class="navbar-nav mr-auto">
./view/header/isLogin.php:18:    <li class="nav-item">
./view/header/isLogin.php:19:      <a class="nav-link" href="#">Link</a>
./view/header/isLogin.php:21:    <li class="nav-item">
./view/header/isLogin.php:22:      <a class="nav-link" href="#">Link</a>
./view/header/isLogin.php:25:  <ul class="navbar-nav">
./view/header/isLogin.php:26:    <li class="nav-item">
./view/header/isLogin.php:27:      <a class="nav-link" href="<?=Config::BASE_URL;?>logout">logout</a>
./view/header/isLogin.php:29:    <li class="nav-item">
./view/header/unLogin.php:3:    <meta charset="utf-8">
./view/header/unLogin.php:5:    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
./view/header/unLogin.php:6:    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy" crossorigin="anonymous">
./view/header/unLogin.php:7:			<!-- Latest compiled and minified CSS -->
./view/header/unLogin.php:13:<nav class="navbar navbar-expand-sm bg-dark navbar-dark sticky-top">
./view/header/unLogin.php:14:  <a class="navbar-brand" href="<?=Config::BASE_URL?>">
./view/header/unLogin.php:17:  <ul class="navbar-nav mr-auto">
./view/header/unLogin.php:18:    <li class="nav-item">
./view/header/unLogin.php:19:      <a class="nav-link" href="#">Link</a>
./view/header/unLogin.php:21:    <li class="nav-item">
./view/header/unLogin.php:22:      <a class="nav-link" href="#">Link</a>
./view/header/unLogin.php:25:  <ul class="navbar-nav">
./view/header/unLogin.php:26:    <li class="nav-item">
./view/header/unLogin.php:27:      <a class="nav-link" href="<?=Config::BASE_URL;?>login">login</a>
./view/header/unLogin.php:29:    <li class="nav-item">
./view/header/unLogin.php:30:      <a class="nav-link" href="<?=Config::BASE_URL;?>register">signup</a>
./log/warning.log:2:[2018-08-26 01:19:21] /var/www/html/forum/controller/do_forget.php.WARNING: 127.0.0.1: WRONG EMAIL: hcgcarry@gamil.com [] []
./log/warning.log:3:[2018-08-26 12:29:05] /var/www/html/forum/controller/forget.php.WARNING: 127.0.0.1: WRONG EMAIL:  [] []
